<?xml version="1.0"?>
<doc>
    <assembly>
        <name>dnSpy.Contracts</name>
    </assembly>
    <members>
        <member name="T:dnSpy.Contracts.App.AppDirectories">
            <summary>
            Application directories
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.AppDirectories.BinDirectory">
            <summary>
            Base directory of dnSpy binaries
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.AppDirectories.DataDirectory">
            <summary>
            Base directory of data directory. Usually %APPDATA%\dnSpy but could be identical to
            <see cref="P:dnSpy.Contracts.App.AppDirectories.BinDirectory"/>.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.AppDirectories.SettingsFilename">
            <summary>
            dnSpy settings filename
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.App.AppDirectories.__SetSettingsFilename(System.String)">
            <summary>
            Don't call this method. It's called by dnSpy to initialize <see cref="P:dnSpy.Contracts.App.AppDirectories.SettingsFilename"/>
            </summary>
            <param name="filename">Settings filename</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.App.AppDirectories.GetDirectories(System.String)">
            <summary>
            Returns directories relative to <see cref="P:dnSpy.Contracts.App.AppDirectories.BinDirectory"/> and <see cref="P:dnSpy.Contracts.App.AppDirectories.DataDirectory"/>
            in that order. If they're identical, only one path is returned.
            </summary>
            <param name="subDir">Sub directory</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.App.IAppCommandLineArgs">
            <summary>
            Application command line arguments
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.SettingsFilename">
            <summary>Settings filename</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.Filenames">
            <summary>Filenames to load</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.SingleInstance">
            <summary>true if single-instance</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.Activate">
            <summary>true to activate the window</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.Language">
            <summary>Language, either human readable or a language guid
            (<see cref="P:dnSpy.Contracts.Languages.ILanguage.GenericGuid"/> or <see cref="P:dnSpy.Contracts.Languages.ILanguage.UniqueGuid"/>)</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.Culture">
            <summary>Culture</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.SelectMember">
            <summary>Member to select, either an MD token or an XML doc name</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.NewTab">
            <summary>Show the file in a new tab</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.SearchText">
            <summary>Search string or null if none</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.SearchFor">
            <summary>Search type</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.SearchIn">
            <summary>Search location</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.Theme">
            <summary>Theme name (<see cref="P:dnSpy.Contracts.Themes.ITheme.Guid"/> or <see cref="P:dnSpy.Contracts.Themes.ITheme.Name"/>)</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.LoadFiles">
            <summary>true to load all saved files at startup</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.FullScreen">
            <summary>Full screen</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.ShowToolWindow">
            <summary>Tool windows to show</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.HideToolWindow">
            <summary>Tool windows to hide</summary>
        </member>
        <member name="M:dnSpy.Contracts.App.IAppCommandLineArgs.HasArgument(System.String)">
            <summary>
            Returns true if the argument is present
            </summary>
            <param name="argName">Argument name, eg. <c>--my-arg</c></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.App.IAppCommandLineArgs.GetArgumentValue(System.String)">
            <summary>
            Gets the argument value or null if the argument isn't present
            </summary>
            <param name="argName">Argument name, eg. <c>--my-arg</c></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.App.IAppCommandLineArgs.GetArguments">
            <summary>
            Gets all user arguments and values
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.App.IAppCommandLineArgsHandler">
            <summary>
            Gets notified when new command line arguments have been passed to dnSpy
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgsHandler.Order">
            <summary>
            Order
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.App.IAppCommandLineArgsHandler.OnNewArgs(dnSpy.Contracts.App.IAppCommandLineArgs)">
            <summary>
            Called whenever there are new command line arguments
            </summary>
            <param name="args">Command line arguments</param>
        </member>
        <member name="T:dnSpy.Contracts.App.IAppSettings">
            <summary>
            Application settings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppSettings.UseNewRenderer_TextEditor">
            <summary>
            Text Editor: true to use the new optimized renderer. It doesn't support all unicode chars or word wrapping
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppSettings.UseNewRenderer_HexEditor">
            <summary>
            Hex Editor: true to use the new optimized renderer. It doesn't support all unicode chars or word wrapping
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppSettings.UseNewRenderer_FileTreeView">
            <summary>
            File TreeView: true to use the new optimized renderer. It doesn't support all unicode chars or word wrapping
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.App.IAppStatusBar">
            <summary>
            App status bar
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.App.IAppStatusBar.Open">
            <summary>
            Opens the status bar
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.App.IAppStatusBar.Show(System.String)">
            <summary>
            Shows text in the status bar
            </summary>
            <param name="text">Text</param>
        </member>
        <member name="M:dnSpy.Contracts.App.IAppStatusBar.Close">
            <summary>
            Closes the status bar
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.App.IAppWindow">
            <summary>
            App window
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.App.IAppWindow.MainWindowClosing">
            <summary>
            Raised when the main window is closing
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.App.IAppWindow.MainWindowClosed">
            <summary>
            Raised when the main window has closed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppWindow.MainWindow">
            <summary>
            Gets the main window
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppWindow.MainWindowCommands">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Controls.IWpfCommands"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppWindow.AppSettings">
            <summary>
            Gets the settings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppWindow.StatusBar">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.App.IAppStatusBar"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppWindow.FileTabManager">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTabManager"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppWindow.FileTreeView">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Files.TreeView.IFileTreeView"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppWindow.ToolWindowManager">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.ToolWindows.App.IMainToolWindowManager"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppWindow.LanguageManager">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Languages.ILanguageManager"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppWindow.AppLoaded">
            <summary>
            true if the app has been loaded
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.App.IAppWindow.AddTitleInfo(System.String)">
            <summary>
            Adds <paramref name="info"/> to the window title
            </summary>
            <param name="info">Some text</param>
        </member>
        <member name="M:dnSpy.Contracts.App.IAppWindow.RemoveTitleInfo(System.String)">
            <summary>
            Removes <paramref name="info"/> from the window title
            </summary>
            <param name="info">Some text</param>
        </member>
        <member name="M:dnSpy.Contracts.App.IAppWindow.RefreshToolBar">
            <summary>
            Refreshes the toolbar
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppWindow.AssemblyInformationalVersion">
            <summary>
            Gets the version (stored in an <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/> attribute)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppWindow.CommandLineArgs">
            <summary>
            Gets the command line args
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.App.IDnSpyLoader">
            <summary>
            Called at startup and exit. Use <see cref="T:dnSpy.Contracts.App.ExportDnSpyLoaderAttribute"/> to export an
            instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.App.IDnSpyLoader.Save(dnSpy.Contracts.Settings.ISettingsManager)">
            <summary>
            Called when dnSpy exits
            </summary>
            <param name="settingsManager">Settings manager</param>
        </member>
        <member name="M:dnSpy.Contracts.App.IDnSpyLoader.Load(dnSpy.Contracts.Settings.ISettingsManager,dnSpy.Contracts.App.IAppCommandLineArgs)">
            <summary>
            Called when dnSpy has just started. If the method takes too long to execute, give control
            back to dnSpy by using yield return. Only values in <see cref="T:dnSpy.Contracts.App.LoaderConstants"/>
            are used by the loader, anything else is ignored.
            </summary>
            <param name="settingsManager">Settings manager</param>
            <param name="args">Command line arguments</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.App.IDnSpyLoader.OnAppLoaded">
            <summary>
            Called when everything has been loaded
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.App.IDnSpyLoaderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IDnSpyLoaderMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.App.ExportDnSpyLoaderAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.App.ExportDnSpyLoaderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.App.IDnSpyLoader"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.App.ExportDnSpyLoaderAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.ExportDnSpyLoaderAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.App.IMessageBoxManager">
            <summary>
            Shows message boxes
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.App.IMessageBoxManager.ShowIgnorableMessage(System.Guid,System.String,dnSpy.Contracts.App.MsgBoxButton,System.Windows.Window)">
            <summary>
            Shows a message box unless the user has disabled showing this particular message. null
            is returned if the message was ignored and no message box was shown. Otherwise, the
            return value is the same as <see cref="M:dnSpy.Contracts.App.IMessageBoxManager.Show(System.String,dnSpy.Contracts.App.MsgBoxButton,System.Windows.Window)"/>.
            </summary>
            <param name="guid">Unique guid for this message</param>
            <param name="message">Message to show</param>
            <param name="buttons">Buttons that should be present</param>
            <param name="ownerWindow">Owner window or null to use the main window</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.App.IMessageBoxManager.Show(System.String,dnSpy.Contracts.App.MsgBoxButton,System.Windows.Window)">
            <summary>
            Shows a message box
            </summary>
            <param name="message">Message to show</param>
            <param name="buttons">Buttons that should be present</param>
            <param name="ownerWindow">Owner window or null to use the main window</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.App.IMessageBoxManager.Ask``1(System.String,System.String,System.String,System.Func{System.String,``0},System.Func{System.String,System.String},System.Windows.Window)">
            <summary>
            Asks the user for a value and returns it or the default value (eg. null or 0) if the
            user canceled the dialog box.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="labelMessage">Label</param>
            <param name="defaultText">Default text to write to the textbox or null</param>
            <param name="title">Title or null</param>
            <param name="converter">Converts a string to the type, or null to use the default
            converter.</param>
            <param name="verifier">Verifies the typed message. Returns null or an empty string if
            it's a valid value, else an error message to show to the user.</param>
            <param name="ownerWindow">Owner window or null to use the main window</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.App.IMessageBoxManager.Show(System.Exception,System.String,System.Windows.Window)">
            <summary>
            Shows an exception message
            </summary>
            <param name="exception">Exception</param>
            <param name="msg">Message to show or null</param>
            <param name="ownerWindow">Owner window or null to use the main window</param>
        </member>
        <member name="T:dnSpy.Contracts.App.LoaderConstants">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.App.LoaderConstants.Delay">
            <summary>
            Delays the loading a short while
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.App.LoaderConstants.ORDER_FILETABMANAGER">
            <summary>
            Order of <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTabManager"/>'s <see cref="T:dnSpy.Contracts.App.IDnSpyLoader"/> instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.App.MsgBoxButton">
            <summary>
            Buttons
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.App.MsgBoxButton.None">
            <summary>None, eg. the user pressed Alt+F4 to close the message box</summary>
        </member>
        <member name="F:dnSpy.Contracts.App.MsgBoxButton.OK">
            <summary>OK-button</summary>
        </member>
        <member name="F:dnSpy.Contracts.App.MsgBoxButton.Yes">
            <summary>Yes-button</summary>
        </member>
        <member name="F:dnSpy.Contracts.App.MsgBoxButton.No">
            <summary>No-button</summary>
        </member>
        <member name="F:dnSpy.Contracts.App.MsgBoxButton.Cancel">
            <summary>Cancel-button</summary>
        </member>
        <member name="T:dnSpy.Contracts.Command.ICommandHolder">
            <summary>
            Implement this interface to return the original <see cref="T:System.Windows.Input.ICommand"/> instance, eg. a <see cref="T:System.Windows.Input.RoutedCommand"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Command.ICommandHolder.Command">
            <summary>
            Returns the original <see cref="T:System.Windows.Input.ICommand"/> instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Controls.CommandConstants">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.CommandConstants.GUID_MAINWINDOW">
            <summary>Guid of main window</summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.CommandConstants.GUID_TEXTEDITOR_UICONTEXT">
            <summary>Guid of <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext"/> UI control</summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.CommandConstants.GUID_TEXTEDITOR_UICONTEXT_TEXTEDITOR">
            <summary>Guid of <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext"/>'s text editor</summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.CommandConstants.GUID_TEXTEDITOR_UICONTEXT_TEXTAREA">
            <summary>Guid of <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext"/>'s text area</summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.CommandConstants.GUID_FILE_TREEVIEW">
            <summary>Guid of file <see cref="T:dnSpy.Contracts.TreeView.ITreeView"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.CommandConstants.GUID_ANALYZER_TREEVIEW">
            <summary>Guid of analyzer <see cref="T:dnSpy.Contracts.TreeView.ITreeView"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.CommandConstants.GUID_SEARCH_CONTROL">
            <summary>Guid of search control</summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.CommandConstants.GUID_SEARCH_LISTBOX">
            <summary>Guid of search <see cref="T:System.Windows.Controls.ListBox"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.CommandConstants.GUID_DEBUGGER_BREAKPOINTS_CONTROL">
            <summary>Guid of debugger breakpoints control</summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.CommandConstants.GUID_DEBUGGER_BREAKPOINTS_LISTVIEW">
            <summary>Guid of debugger breakpoints <see cref="T:System.Windows.Controls.ListView"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.CommandConstants.GUID_DEBUGGER_CALLSTACK_CONTROL">
            <summary>Guid of debugger call stack control</summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.CommandConstants.GUID_DEBUGGER_CALLSTACK_LISTVIEW">
            <summary>Guid of debugger call stack <see cref="T:System.Windows.Controls.ListView"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.CommandConstants.GUID_DEBUGGER_LOCALS_CONTROL">
            <summary>Guid of debugger locals control</summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.CommandConstants.GUID_DEBUGGER_LOCALS_LISTVIEW">
            <summary>Guid of debugger locals <see cref="T:System.Windows.Controls.ListView"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.CommandConstants.GUID_DEBUGGER_EXCEPTIONS_CONTROL">
            <summary>Guid of debugger exceptions control</summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.CommandConstants.GUID_DEBUGGER_EXCEPTIONS_LISTVIEW">
            <summary>Guid of debugger exceptions <see cref="T:System.Windows.Controls.ListView"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.CommandConstants.GUID_DEBUGGER_THREADS_CONTROL">
            <summary>Guid of debugger threads control</summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.CommandConstants.GUID_DEBUGGER_THREADS_LISTVIEW">
            <summary>Guid of debugger threads <see cref="T:System.Windows.Controls.ListView"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.CommandConstants.GUID_DEBUGGER_MODULES_CONTROL">
            <summary>Guid of debugger modules control</summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.CommandConstants.GUID_DEBUGGER_MODULES_LISTVIEW">
            <summary>Guid of debugger modules <see cref="T:System.Windows.Controls.ListView"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.CommandConstants.GUID_DEBUGGER_MEMORY_CONTROL">
            <summary>Guid of debugger memory control</summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.CommandConstants.GUID_DEBUGGER_MEMORY_HEXBOX">
            <summary>Guid of debugger memory <c>HexBox</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.CommandConstants.GUID_REPL_CSHARP_TEXTEDITOR">
            <summary>Guid of C# Interactive's text editor</summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.CommandConstants.GUID_REPL_CSHARP_TEXTAREA">
            <summary>Guid of C# Interactive's text area</summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.CommandConstants.GUID_REPL_VISUAL_BASIC_TEXTEDITOR">
            <summary>Guid of Visual Basic Interactive's text editor</summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.CommandConstants.GUID_REPL_VISUAL_BASIC_TEXTAREA">
            <summary>Guid of Visual Basic Interactive's text area</summary>
        </member>
        <member name="T:dnSpy.Contracts.Controls.IFocusable">
            <summary>
            Can focus elements
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.IFocusable.CanFocus">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Controls.IFocusable.Focus"/> can be called
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Controls.IFocusable.Focus">
            <summary>
            Sets focus. Only called if <see cref="P:dnSpy.Contracts.Controls.IFocusable.CanFocus"/> is true
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Controls.IWpfCommandManager">
            <summary>
            WPF command manager
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Controls.IWpfCommandManager.Add(System.Guid,System.Windows.UIElement)">
            <summary>
            Adds an element. The element is stored in a <see cref="T:System.WeakReference"/>
            </summary>
            <param name="guid">Guid, eg. <see cref="F:dnSpy.Contracts.Controls.CommandConstants.GUID_MAINWINDOW"/></param>
            <param name="elem">Element</param>
        </member>
        <member name="M:dnSpy.Contracts.Controls.IWpfCommandManager.Remove(System.Guid,System.Windows.UIElement)">
            <summary>
            Removes an element
            </summary>
            <param name="guid">Guid, eg. <see cref="F:dnSpy.Contracts.Controls.CommandConstants.GUID_MAINWINDOW"/></param>
            <param name="elem">Element</param>
        </member>
        <member name="M:dnSpy.Contracts.Controls.IWpfCommandManager.GetCommands(System.Guid)">
            <summary>
            Gets a <see cref="T:dnSpy.Contracts.Controls.IWpfCommands"/> instance
            </summary>
            <param name="guid">Guid, eg. <see cref="F:dnSpy.Contracts.Controls.CommandConstants.GUID_MAINWINDOW"/></param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Controls.IWpfCommands">
            <summary>
            Stores commands and bindings added to a control
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.IWpfCommands.Guid">
            <summary>
            Gets the guid
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Controls.IWpfCommands.Add(System.Windows.Input.ICommand,System.Windows.Input.ModifierKeys,System.Windows.Input.Key)">
            <summary>
            Adds a key binding
            </summary>
            <param name="command">Gets called when the key combination is pressed</param>
            <param name="modifiers">Modifiers</param>
            <param name="key">Key</param>
        </member>
        <member name="M:dnSpy.Contracts.Controls.IWpfCommands.Add(System.Windows.Input.RoutedCommand,System.Windows.Input.ICommand,System.Windows.Input.ModifierKeys,System.Windows.Input.Key)">
            <summary>
            Adds a command and key binding
            </summary>
            <param name="command">The routed command</param>
            <param name="realCommand">The real command that will handle <paramref name="command"/> events</param>
            <param name="modifiers">Modifiers</param>
            <param name="key">Key</param>
        </member>
        <member name="M:dnSpy.Contracts.Controls.IWpfCommands.Add(System.Windows.Input.RoutedCommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler,System.Windows.Input.ModifierKeys,System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.Windows.Input.Key)">
            <summary>
            Adds a command and key binding(s)
            </summary>
            <param name="command">The routed command</param>
            <param name="exec">Executes the command</param>
            <param name="canExec">Can-execute handler</param>
            <param name="modifiers1">Modifiers</param>
            <param name="key1">Key</param>
            <param name="modifiers2">Modifiers</param>
            <param name="key2">Key</param>
            <param name="modifiers3">Modifiers</param>
            <param name="key3">Key</param>
        </member>
        <member name="T:dnSpy.Contracts.Controls.IWpfFocusChecker">
            <summary>
            Can prevent <see cref="T:dnSpy.Contracts.Controls.IWpfFocusManager"/> from calling <see cref="M:System.Windows.UIElement.Focus"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.IWpfFocusChecker.CanFocus">
            <summary>
            true if <see cref="T:dnSpy.Contracts.Controls.IWpfFocusManager"/> can give focus to a <see cref="T:System.Windows.UIElement"/>,
            false otherwise
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Controls.IWpfFocusManager">
            <summary>
            Focuses <see cref="T:System.Windows.UIElement"/>s
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.IWpfFocusManager.CanFocus">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Controls.IWpfFocusManager.Focus(System.Windows.IInputElement)"/> can be called
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Controls.IWpfFocusManager.Focus(System.Windows.IInputElement)">
            <summary>
            Gives the focus to <paramref name="element"/> by calling its <see cref="M:System.Windows.UIElement.Focus"/>
            method unless some other code prevents it. Eg., a menu could be open which could prevent
            the focus from being stolen by <paramref name="element"/>. Export a <see cref="T:dnSpy.Contracts.Controls.IWpfFocusChecker"/>
            class to prevent Focus() from being called.
            </summary>
            <param name="element">Element</param>
        </member>
        <member name="T:dnSpy.Contracts.Decompiler.ICodeMappings">
            <summary>
            Code mappings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Decompiler.ICodeMappings.Count">
            <summary>
            Number of mappings
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Decompiler.ICodeMappings.Find(System.Int32,System.Int32)">
            <summary>
            Gets code mappings
            </summary>
            <param name="line">Line</param>
            <param name="column">Column</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Decompiler.ICodeMappings.Find(dnlib.DotNet.MethodDef,System.UInt32)">
            <summary>
            Gets a code mapping
            </summary>
            <param name="method">Method</param>
            <param name="ilOffset">IL offset</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Decompiler.CodeMappingsConstants">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Decompiler.CodeMappingsConstants.CodeMappingsKey">
            <summary>
            Code mappings key
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Decompiler.CodeMappingsExtensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Decompiler.CodeMappingsExtensions.GetCodeMappings(dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext)">
            <summary>
            Gets a <see cref="T:dnSpy.Contracts.Decompiler.ICodeMappings"/> instance
            </summary>
            <param name="self">This</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Decompiler.CodeMappingsExtensions.TryGetCodeMappings(dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext)">
            <summary>
            Gets a <see cref="T:dnSpy.Contracts.Decompiler.ICodeMappings"/> or null if none exists
            </summary>
            <param name="self">This</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.DnSpyFileInfo">
            <summary>
            File info
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.DnSpyFileInfo.Name">
            <summary>
            Name, eg. filename if <see cref="P:dnSpy.Contracts.Files.DnSpyFileInfo.Type"/> is <see cref="F:dnSpy.Contracts.Files.FileConstants.FILETYPE_FILE"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.DnSpyFileInfo.Type">
            <summary>
            File type, eg. <see cref="F:dnSpy.Contracts.Files.FileConstants.FILETYPE_FILE"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.DnSpyFileInfo.CreateFile(System.String)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.DnSpyFileInfo"/> used by files on disk
            </summary>
            <param name="filename">Filename</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.DnSpyFileInfo.CreateGacFile(System.String)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.DnSpyFileInfo"/> used by files in the GAC
            </summary>
            <param name="asmFullName">Full name of assembly</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.DnSpyFileInfo.CreateReferenceAssembly(System.String,System.String)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.DnSpyFileInfo"/> used by reference assemblies
            </summary>
            <param name="asmFullName">Full name of assembly</param>
            <param name="refFilePath">Path to the reference assembly. It's used if it's not found
            in the GAC.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.DnSpyFileInfo.#ctor(System.String,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name, see <see cref="P:dnSpy.Contracts.Files.DnSpyFileInfo.Name"/></param>
            <param name="type">Type, see <see cref="P:dnSpy.Contracts.Files.DnSpyFileInfo.Type"/></param>
        </member>
        <member name="M:dnSpy.Contracts.Files.DnSpyFileInfo.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.FilenameKey">
            <summary>
            Compares filenames
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.FilenameKey.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="filename">Filename</param>
        </member>
        <member name="M:dnSpy.Contracts.Files.FilenameKey.Equals(dnSpy.Contracts.Files.FilenameKey)">
            <summary>
            Equals()
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.FilenameKey.Equals(System.Object)">
            <summary>
            Equals()
            </summary>
            <param name="obj">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.FilenameKey.GetHashCode">
            <summary>
            GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.FilenameKey.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.FileConstants">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.FileConstants.ORDER_DEFAULT_FILE_CREATOR">
            <summary>
            Order of default <see cref="T:dnSpy.Contracts.Files.IDnSpyFileCreator"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.FileConstants.FILETYPE_FILE">
            <summary>
            A normal <see cref="T:dnSpy.Contracts.Files.IDnSpyFile"/> created from a file. <see cref="P:dnSpy.Contracts.Files.DnSpyFileInfo.Name"/>
            is the filename.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.FileConstants.FILETYPE_GAC">
            <summary>
            A <see cref="T:dnSpy.Contracts.Files.IDnSpyFile"/> created from a file in the GAC. <see cref="P:dnSpy.Contracts.Files.DnSpyFileInfo.Name"/>
            is the assembly name.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.FileConstants.FILETYPE_REFASM">
            <summary>
            A <see cref="T:dnSpy.Contracts.Files.IDnSpyFile"/> created from a file in the GAC or the reference assemblies
            folder. <see cref="P:dnSpy.Contracts.Files.DnSpyFileInfo.Name"/> is the assembly name followed by 
            <see cref="F:dnSpy.Contracts.Files.FileConstants.REFERENCE_ASSEMBLY_SEPARATOR"/> followed by the path to the reference file in
            case it's not found in the GAC.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.FileConstants.REFERENCE_ASSEMBLY_SEPARATOR">
            <summary>
            String separating assembly full name and reference assembly path
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.IAnnotations">
            <summary>
            Add/remove annotations
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.IAnnotations.AddAnnotation``1(``0)">
            <summary>
            Adds an annotation and returns it
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="annotation">Value to add</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.IAnnotations.Annotation``1">
            <summary>
            Gets the first annotation of a certain type or null if none was found
            </summary>
            <typeparam name="T">Type</typeparam>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.IAnnotations.Annotations``1">
            <summary>
            Gets all annotations of a certain type
            </summary>
            <typeparam name="T">Type</typeparam>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.IAnnotations.RemoveAnnotations``1">
            <summary>
            Removes all annotations of a certain type
            </summary>
            <typeparam name="T">Type</typeparam>
        </member>
        <member name="T:dnSpy.Contracts.Files.IDnSpyDotNetFile">
            <summary>
            A .NET file
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.IDnSpyFile">
            <summary>
            A file, see also <see cref="T:dnSpy.Contracts.Files.IDnSpyDotNetFile"/> and <see cref="T:dnSpy.Contracts.Files.IDnSpyPEFile"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.IDnSpyFile.SerializedFile">
            <summary>
            Used to serialize this instance. Null if it can't be serialized.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.IDnSpyFile.Key">
            <summary>
            Gets a key for this file. Eg. a <see cref="T:dnSpy.Contracts.Files.FilenameKey"/> instance if it's a
            file loaded from disk. It's used to detect duplicate files when adding a new file.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.IDnSpyFile.AssemblyDef">
            <summary>
            Gets the assembly or null if it's not a .NET file or if it's a netmodule
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.IDnSpyFile.ModuleDef">
            <summary>
            Gets the module or null if it's not a .NET file
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.IDnSpyFile.PEImage">
            <summary>
            Gets the PE image or null if it's not available
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.IDnSpyFile.Filename">
            <summary>
            Gets/sets the filename
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.IDnSpyFile.IsAutoLoaded">
            <summary>
            true if it was not loaded by the user
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.IDnSpyFile.Children">
            <summary>
            Gets any children. Eg. if it's a .NET assembly, the children would be modules of the
            assembly.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.IDnSpyFile.ChildrenLoaded">
            <summary>
            true if <see cref="P:dnSpy.Contracts.Files.IDnSpyFile.Children"/> has been initialized
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.DnSpyFileExtensionMethods">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.DnSpyFileExtensionMethods.GetShortName(dnSpy.Contracts.Files.IDnSpyFile)">
            <summary>
            Gets the short name of <paramref name="file"/>, which is usually the filename without
            the extension.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.DnSpyFileExtensionMethods.NonLoadedDescendantsAndSelf(dnSpy.Contracts.Files.IDnSpyFile)">
            <summary>
            Gets self and all descendants that have been loaded
            </summary>
            <param name="file">This</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.DnSpyFileExtensionMethods.GetModules``1(dnSpy.Contracts.Files.IDnSpyFile)">
            <summary>
            Gets all modules in this instance and any children
            </summary>
            <typeparam name="T"><see cref="T:dnlib.DotNet.ModuleDefMD"/> or <see cref="T:dnlib.DotNet.ModuleDefMD"/></typeparam>
            <param name="file">File</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.DnSpyFileExtensionMethods.GetModules``1(System.Collections.Generic.IEnumerable{dnSpy.Contracts.Files.IDnSpyFile})">
            <summary>
            Gets all modules in this instance and any children
            </summary>
            <typeparam name="T"><see cref="T:dnlib.DotNet.ModuleDefMD"/> or <see cref="T:dnlib.DotNet.ModuleDefMD"/></typeparam>
            <param name="files">Files</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.DnSpyFileExtensionMethods.GetAllChildrenAndSelf(dnSpy.Contracts.Files.IDnSpyFile)">
            <summary>
            Gets self and all its children
            </summary>
            <param name="self">This</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.DnSpyFileExtensionMethods.GetAllChildren(dnSpy.Contracts.Files.IDnSpyFile)">
            <summary>
            Gets all its children and their children
            </summary>
            <param name="self">This</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.IDnSpyFileCreator">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Files.IDnSpyFile"/>s
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.IDnSpyFileCreator.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.IDnSpyFileCreator.Create(dnSpy.Contracts.Files.IFileManager,dnSpy.Contracts.Files.DnSpyFileInfo)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Files.IDnSpyFile"/> instance or returns null. This method can be
            called in <c>any</c> thread so the code must be thread safe.
            </summary>
            <param name="fileManager">File manager</param>
            <param name="fileInfo">File to create</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.IDnSpyFileCreator.CreateKey(dnSpy.Contracts.Files.IFileManager,dnSpy.Contracts.Files.DnSpyFileInfo)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.IDnSpyFilenameKey"/> instance
            </summary>
            <param name="fileManager">File manager</param>
            <param name="fileInfo">File to create</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.IDnSpyFilenameKey">
            <summary>
            A filename key
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.IDnSpyPEFile">
            <summary>
            A PE file (NOTE: not a .NET file, see <see cref="T:dnSpy.Contracts.Files.IDnSpyDotNetFile"/>)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.IFileManager">
            <summary>
            Manages all loaded files (which are shown in the treeview)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.IFileManager.DisableAssemblyLoad">
            <summary>
            Call this to disable loading assemblies in the file list until the return value's
            <see cref="M:System.IDisposable.Dispose"/> method has been called.
            </summary>
            <returns></returns>
        </member>
        <member name="E:dnSpy.Contracts.Files.IFileManager.CollectionChanged">
            <summary>
            Notified when the collection gets changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.IFileManager.GetFiles">
            <summary>
            Gets all files. Doesn't include any children.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.IFileManager.GetOrAdd(dnSpy.Contracts.Files.IDnSpyFile)">
            <summary>
            Adds a new <see cref="T:dnSpy.Contracts.Files.IDnSpyFile"/> instance if it hasn't already been added. Returns
            the input or the existing instance.
            </summary>
            <param name="file">File</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.IFileManager.ForceAdd(dnSpy.Contracts.Files.IDnSpyFile,System.Boolean,System.Object)">
            <summary>
            Adds <paramref name="file"/> to the list, even if another instance has already been
            inserted. Returns the input.
            </summary>
            <param name="file">File</param>
            <param name="delayLoad">true to delay load</param>
            <param name="data">Data passed to listeners</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.IFileManager.TryGetOrCreate(dnSpy.Contracts.Files.DnSpyFileInfo,System.Boolean)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Files.IDnSpyFile"/> instance or returns an existing one. null is
            returned if it couldn't be created.
            </summary>
            <param name="info">File info</param>
            <param name="isAutoLoaded">New value of <see cref="P:dnSpy.Contracts.Files.IDnSpyFile.IsAutoLoaded"/> if the
            file gets created.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.IFileManager.TryCreateOnly(dnSpy.Contracts.Files.DnSpyFileInfo)">
            <summary>
            Tries to create a new <see cref="T:dnSpy.Contracts.Files.IDnSpyFile"/> without adding it to the list. null is
            returned if it couldn't be created.
            </summary>
            <param name="info">File info</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.IFileManager.Resolve(dnlib.DotNet.IAssembly,dnlib.DotNet.ModuleDef)">
            <summary>
            Resolves an assembly. Returns null if it couldn't be resolved.
            </summary>
            <param name="asm">Assembly</param>
            <param name="sourceModule">The module that needs to resolve an assembly or null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.IFileManager.FindAssembly(dnlib.DotNet.IAssembly)">
            <summary>
            Returns an assembly or null if it's not in the list
            </summary>
            <param name="assembly">Assembly</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.IFileManager.Find(dnSpy.Contracts.Files.IDnSpyFilenameKey)">
            <summary>
            Returns an inserted <see cref="T:dnSpy.Contracts.Files.IDnSpyFile"/> instance or null
            </summary>
            <param name="key">Key</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.IFileManager.Remove(dnSpy.Contracts.Files.IDnSpyFilenameKey)">
            <summary>
            Removes a file
            </summary>
            <param name="key">Key of file to remove. See <see cref="P:dnSpy.Contracts.Files.IDnSpyFile.Key"/></param>
        </member>
        <member name="M:dnSpy.Contracts.Files.IFileManager.Remove(System.Collections.Generic.IEnumerable{dnSpy.Contracts.Files.IDnSpyFile})">
            <summary>
            Removes files
            </summary>
            <param name="files">Files</param>
        </member>
        <member name="M:dnSpy.Contracts.Files.IFileManager.Clear">
            <summary>
            Clears all files
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.IFileManager.SetDispatcher(System.Action{System.Action})">
            <summary>
            Can be called once to set a delegate instance that will execute code in a certain
            thread. <see cref="E:dnSpy.Contracts.Files.IFileManager.CollectionChanged"/> can be called in any thread unless this method
            gets called.
            </summary>
            <param name="action">Action</param>
        </member>
        <member name="P:dnSpy.Contracts.Files.IFileManager.Settings">
            <summary>
            Gets the settings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.IFileManager.AssemblyResolver">
            <summary>
            The assembly resolver it uses
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.IFileManagerCreator">
            <summary>
            <see cref="T:dnSpy.Contracts.Files.IFileManager"/> creator
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.IFileManagerCreator.Create">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Files.IFileManager"/> instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.IFileManagerSettings">
            <summary>
            <see cref="T:dnSpy.Contracts.Files.IFileManager"/> settings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.IFileManagerSettings.UseMemoryMappedIO">
            <summary>
            true to use memory mapped I/O
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.IFileManagerSettings.LoadPDBFiles">
            <summary>
            true to load PDB files
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.IFileManagerSettings.UseGAC">
            <summary>
            true to search the GAC
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.IMethodAnnotations">
            <summary>
            Adds data to methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.IMethodAnnotations.IsBodyModified(dnlib.DotNet.MethodDef)">
            <summary>
            Returns true if <paramref name="method"/> has been modified
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.IMethodAnnotations.SetBodyModified(dnlib.DotNet.MethodDef,System.Boolean)">
            <summary>
            Sets the is-modified state
            </summary>
            <param name="method">Method</param>
            <param name="isModified">New value</param>
        </member>
        <member name="T:dnSpy.Contracts.Files.NotifyFileCollectionChangedEventArgs">
            <summary>
            Event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.NotifyFileCollectionChangedEventArgs.Type">
            <summary>
            Event type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.NotifyFileCollectionChangedEventArgs.Files">
            <summary>
            All files
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.NotifyFileCollectionChangedEventArgs.Data">
            <summary>
            User data
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.NotifyFileCollectionChangedEventArgs.CreateClear(dnSpy.Contracts.Files.IDnSpyFile[],System.Object)">
            <summary>
            Creates a <see cref="F:dnSpy.Contracts.Files.NotifyFileCollectionType.Clear"/> instance
            </summary>
            <param name="clearedFiles">All cleared files</param>
            <param name="data">Data to send to listeners</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.NotifyFileCollectionChangedEventArgs.CreateAdd(dnSpy.Contracts.Files.IDnSpyFile,System.Object)">
            <summary>
            Creates a <see cref="F:dnSpy.Contracts.Files.NotifyFileCollectionType.Add"/> instance
            </summary>
            <param name="file">Added file</param>
            <param name="data">Data to send to listeners</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.NotifyFileCollectionChangedEventArgs.CreateRemove(dnSpy.Contracts.Files.IDnSpyFile,System.Object)">
            <summary>
            Creates a <see cref="F:dnSpy.Contracts.Files.NotifyFileCollectionType.Remove"/> instance
            </summary>
            <param name="file">Removed file</param>
            <param name="data">Data to send to listeners</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.NotifyFileCollectionChangedEventArgs.CreateRemove(dnSpy.Contracts.Files.IDnSpyFile[],System.Object)">
            <summary>
            Creates a <see cref="F:dnSpy.Contracts.Files.NotifyFileCollectionType.Remove"/> instance
            </summary>
            <param name="files">Removed files</param>
            <param name="data">Data to send to listeners</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.NotifyFileCollectionType">
            <summary>
            Event type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.NotifyFileCollectionType.Clear">
            <summary>
            All files have been cleared
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.NotifyFileCollectionType.Add">
            <summary>
            A new file was added
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.NotifyFileCollectionType.Remove">
            <summary>
            A file was removed
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.FileModifiedEventArgs">
            <summary>
            File modified event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.FileModifiedEventArgs.Files">
            <summary>
            Gets the modified files
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.FileModifiedEventArgs.#ctor(dnSpy.Contracts.Files.IDnSpyFile[])">
            <summary>
            Constructor
            </summary>
            <param name="files">Files</param>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.FileTabReferenceResult">
            <summary>
            Created by <see cref="T:dnSpy.Contracts.Files.Tabs.IReferenceFileTabContentCreator"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.FileTabReferenceResult.FileTabContent">
            <summary>
            New tab content, never null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.FileTabReferenceResult.SerializedUI">
            <summary>
            Serialized UI data for <see cref="P:dnSpy.Contracts.Files.Tabs.FileTabReferenceResult.FileTabContent"/> or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.FileTabReferenceResult.OnShownHandler">
            <summary>
            Called when the output has been shown, can be null
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.FileTabReferenceResult.#ctor(dnSpy.Contracts.Files.Tabs.IFileTabContent,System.Object,System.Action{dnSpy.Contracts.Files.Tabs.ShowTabContentEventArgs})">
            <summary>
            Constructor
            </summary>
            <param name="fileTabContent">New content</param>
            <param name="serializedUI">Serialized UI data or null</param>
            <param name="onShownHandler">Handler or null</param>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.IAsyncFileTabContent">
            <summary>
            <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTabContent"/> that creates its output asynchronously in another thread
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IAsyncFileTabContent.CanStartAsyncWorker(dnSpy.Contracts.Files.Tabs.IShowContext)">
            <summary>
            Returns true if <see cref="M:dnSpy.Contracts.Files.Tabs.IAsyncFileTabContent.AsyncWorker(dnSpy.Contracts.Files.Tabs.IShowContext,System.Threading.CancellationTokenSource)"/>
            should be called
            </summary>
            <param name="ctx">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IAsyncFileTabContent.AsyncWorker(dnSpy.Contracts.Files.Tabs.IShowContext,System.Threading.CancellationTokenSource)">
            <summary>
            Called in the worker thread
            </summary>
            <param name="ctx">Context</param>
            <param name="source">Cancellation token source</param>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IAsyncFileTabContent.EndAsyncShow(dnSpy.Contracts.Files.Tabs.IShowContext,dnSpy.Contracts.Files.Tabs.IAsyncShowResult)">
            <summary>
            Called in the main UI thread after the worker thread has exited or was interrupted
            </summary>
            <param name="ctx">Context</param>
            <param name="result">Result</param>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.IAsyncShowResult">
            <summary>
            Result passed to <see cref="M:dnSpy.Contracts.Files.Tabs.IAsyncFileTabContent.EndAsyncShow(dnSpy.Contracts.Files.Tabs.IShowContext,dnSpy.Contracts.Files.Tabs.IAsyncShowResult)"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IAsyncShowResult.Exception">
            <summary>
            The caught exception or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IAsyncShowResult.IsCanceled">
            <summary>
            true if it was canceled (the cancellation token threw an exception)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IAsyncShowResult.CanShowOutput">
            <summary>
            true if it's still the visible tab and the UI context can be written to. It can be false
            if the asynchronous operation got canceled by the user.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.IFileListListener">
            <summary>
            Can cancel loading file lists. Use <see cref="T:dnSpy.Contracts.Files.Tabs.ExportFileListListenerAttribute"/> to export
            an instance.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IFileListListener.CanLoad">
            <summary>
            true if we can load a new file list
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IFileListListener.CanReload">
            <summary>
            true if we can reload the current file list
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileListListener.BeforeLoad(System.Boolean)">
            <summary>
            Called before a new file list is loaded
            </summary>
            <param name="isReload">true if it's reload-list, false if it's load-list</param>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileListListener.AfterLoad(System.Boolean)">
            <summary>
            Called after a new file list has been loaded
            </summary>
            <param name="isReload">true if it's reload-list, false if it's load-list</param>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileListListener.CheckCanLoad(System.Boolean)">
            <summary>
            Returns true if the list can be loaded. It's called before <see cref="M:dnSpy.Contracts.Files.Tabs.IFileListListener.BeforeLoad(System.Boolean)"/>
            and can be used to show a message box to the user. If false is returned, the list isn't
            loaded.
            </summary>
            <param name="isReload">true if it's reload-list, false if it's load-list</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.IFileListListenerMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IFileListListenerMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Files.Tabs.ExportFileListListenerAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.ExportFileListListenerAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Files.Tabs.IFileListListener"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.ExportFileListListenerAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.ExportFileListListenerAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.IFileTab">
            <summary>
            A tab
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IFileTab.Content">
            <summary>
            Current <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTabContent"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IFileTab.UIContext">
            <summary>
            Current <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTabUIContext"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IFileTab.FileTabManager">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTabManager"/> owner
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTab.DeserializeUI(dnSpy.Contracts.Settings.ISettingsSection)">
            <summary>
            Deserializes UI settings serialized by <see cref="M:dnSpy.Contracts.Files.Tabs.IFileTab.SerializeUI(dnSpy.Contracts.Settings.ISettingsSection)"/>
            </summary>
            <param name="tabContentUI">Serialized data</param>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTab.SerializeUI(dnSpy.Contracts.Settings.ISettingsSection)">
            <summary>
            Serializes UI settings
            </summary>
            <param name="tabContentUI">Target section</param>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IFileTab.IsActiveTab">
            <summary>
            true if this is the active tab
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IFileTab.CanNavigateBackward">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Files.Tabs.IFileTab.NavigateBackward"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTab.NavigateBackward">
            <summary>
            Navigates backward in history
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IFileTab.CanNavigateForward">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Files.Tabs.IFileTab.NavigateForward"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTab.NavigateForward">
            <summary>
            Navigates forward in history
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTab.FollowReference(System.Object,dnSpy.Contracts.Files.Tabs.IFileTabContent,System.Action{dnSpy.Contracts.Files.Tabs.ShowTabContentEventArgs})">
            <summary>
            Follows a reference
            </summary>
            <param name="ref">Reference</param>
            <param name="sourceContent">Source content or null</param>
            <param name="onShown">Called after the content has been shown. Can be null.</param>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTab.FollowReferenceNewTab(System.Object,System.Action{dnSpy.Contracts.Files.Tabs.ShowTabContentEventArgs})">
            <summary>
            Follows a reference in a new tab
            </summary>
            <param name="ref">Reference</param>
            <param name="onShown">Called after the content has been shown. Can be null.</param>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTab.FollowReference(System.Object,System.Boolean,System.Action{dnSpy.Contracts.Files.Tabs.ShowTabContentEventArgs})">
            <summary>
            Follows a reference
            </summary>
            <param name="ref">Reference</param>
            <param name="newTab">true to open a new tab</param>
            <param name="onShown">Called after the content has been shown. Can be null.</param>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTab.Show(dnSpy.Contracts.Files.Tabs.IFileTabContent,System.Object,System.Action{dnSpy.Contracts.Files.Tabs.ShowTabContentEventArgs})">
            <summary>
            Shows the tab content
            </summary>
            <param name="tabContent">Tab content</param>
            <param name="serializedUI">Serialized UI data or null</param>
            <param name="onShown">Called after the output has been shown on the screen</param>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTab.TrySetFocus">
            <summary>
            Sets focus to the focused element if this is the active tab
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTab.Close">
            <summary>
            Closes this tab
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IFileTab.IsAsyncExecInProgress">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Files.Tabs.IFileTab.AsyncExec(System.Action{System.Threading.CancellationTokenSource},System.Action,System.Action{dnSpy.Contracts.Files.Tabs.IAsyncShowResult})"/> hasn't finished executing
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTab.AsyncExec(System.Action{System.Threading.CancellationTokenSource},System.Action,System.Action{dnSpy.Contracts.Files.Tabs.IAsyncShowResult})">
            <summary>
            Executes new code, cancelling any other started <see cref="M:dnSpy.Contracts.Files.Tabs.IFileTab.AsyncExec(System.Action{System.Threading.CancellationTokenSource},System.Action,System.Action{dnSpy.Contracts.Files.Tabs.IAsyncShowResult})"/> call
            </summary>
            <param name="preExec">Executed in the current thread before the async code has started</param>
            <param name="asyncAction">Executed in a new thread</param>
            <param name="postExec">Executed in the current thread after <paramref name="asyncAction"/>
            has finished executing</param>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.FileTabExtensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.FileTabExtensions.TryGetTextEditorUIContext(dnSpy.Contracts.Files.Tabs.IFileTab)">
            <summary>
            Returns the tab's <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext"/> or null if it's not visible
            </summary>
            <param name="tab">Tab</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.IFileTabContent">
            <summary>
            Contains the data used to generate the content shown in a tab
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IFileTabContent.Nodes">
            <summary>
            Gets all nodes used to generate the content
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabContent.OnShow(dnSpy.Contracts.Files.Tabs.IShowContext)">
            <summary>
            Called to show its content in the UI. Implement <see cref="T:dnSpy.Contracts.Files.Tabs.IAsyncFileTabContent"/> to
            create the content in a worker thread.
            </summary>
            <param name="ctx">UI Context created by <see cref="M:dnSpy.Contracts.Files.Tabs.IFileTabContent.CreateUIContext(dnSpy.Contracts.Files.Tabs.IFileTabUIContextLocator)"/></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabContent.OnHide">
            <summary>
            Called when the content is hidden
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabContent.OnSelected">
            <summary>
            Called when its tab has been selected. Only called if this is the tab's active content.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabContent.OnUnselected">
            <summary>
            Called when its tab has been unselected. Only called if this is the tab's active content.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IFileTabContent.Title">
            <summary>
            Gets the title
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IFileTabContent.ToolTip">
            <summary>
            Gets the tooltip
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabContent.Clone">
            <summary>
            Clones this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabContent.CreateUIContext(dnSpy.Contracts.Files.Tabs.IFileTabUIContextLocator)">
            <summary>
            Creates the <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTabUIContext"/> instance needed by this instance. This
            instance will only be used in this tab.
            </summary>
            <param name="locator">Can be used to get a per-tab shared instance</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IFileTabContent.FileTab">
            <summary>
            Written by the owner <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTab"/> instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.IFileTabContentFactory">
            <summary>
            <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTabContent"/> factory. Use <see cref="T:dnSpy.Contracts.Files.Tabs.ExportFileTabContentFactoryAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabContentFactory.Create(dnSpy.Contracts.Files.Tabs.IFileTabContentFactoryContext)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTabContent"/> instance or returns null
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabContentFactory.Serialize(dnSpy.Contracts.Files.Tabs.IFileTabContent,dnSpy.Contracts.Settings.ISettingsSection)">
            <summary>
            Serializes a <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTabContent"/> instance. Returns a unique guid if it was
            serialized, else null
            </summary>
            <param name="content">Content</param>
            <param name="section">Section to use</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabContentFactory.Deserialize(System.Guid,dnSpy.Contracts.Settings.ISettingsSection,dnSpy.Contracts.Files.Tabs.IFileTabContentFactoryContext)">
            <summary>
            Deserializes a <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTabContent"/> instance. Returns null if <paramref name="guid"/>
            isn't supported.
            </summary>
            <param name="guid">Guid, this is the return value of <see cref="M:dnSpy.Contracts.Files.Tabs.IFileTabContentFactory.Serialize(dnSpy.Contracts.Files.Tabs.IFileTabContent,dnSpy.Contracts.Settings.ISettingsSection)"/></param>
            <param name="section">Section with serialized content</param>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.IFileTabContentFactoryMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IFileTabContentFactoryMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Files.Tabs.ExportFileTabContentFactoryAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.ExportFileTabContentFactoryAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTabContentFactory"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.ExportFileTabContentFactoryAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.ExportFileTabContentFactoryAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.IFileTabContentFactoryContext">
            <summary>
            <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTabContentFactory"/> context
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IFileTabContentFactoryContext.Nodes">
            <summary>
            Gets all nodes
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.IFileTabManager">
            <summary>
            Manages the file tabs and treeview
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IFileTabManager.Settings">
            <summary>
            Gets the settings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IFileTabManager.FileTreeView">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Files.TreeView.IFileTreeView"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IFileTabManager.TabGroupManager">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Tabs.ITabGroupManager"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IFileTabManager.SortedTabs">
            <summary>
            Gets all <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTab"/> instances
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IFileTabManager.VisibleFirstTabs">
            <summary>
            Same as <see cref="P:dnSpy.Contracts.Files.Tabs.IFileTabManager.SortedTabs"/> except that visible tabs are returned first
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IFileTabManager.ActiveTab">
            <summary>
            Gets the active tab or null if none, see also <see cref="M:dnSpy.Contracts.Files.Tabs.IFileTabManager.GetOrCreateActiveTab"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabManager.GetOrCreateActiveTab">
            <summary>
            Gets the active tab or creates a new one if <see cref="P:dnSpy.Contracts.Files.Tabs.IFileTabManager.ActiveTab"/> is null
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabManager.OpenEmptyTab">
            <summary>
            Opens a new empty tab and sets it as the active tab (<see cref="P:dnSpy.Contracts.Files.Tabs.IFileTabManager.ActiveTab"/>)
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabManager.SetFocus(dnSpy.Contracts.Files.Tabs.IFileTab)">
            <summary>
            Gives <paramref name="tab"/> keyboard focus
            </summary>
            <param name="tab">Tab</param>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabManager.Refresh(System.Collections.Generic.IEnumerable{dnSpy.Contracts.Files.Tabs.IFileTab})">
            <summary>
            Forces a refresh of the selected tabs
            </summary>
            <param name="tabs">Tabs to refresh</param>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabManager.Refresh``1">
            <summary>
            Refreshes all tabs that contain nodes of type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Node type</typeparam>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabManager.Refresh(System.Predicate{dnSpy.Contracts.Files.TreeView.IFileTreeNodeData})">
            <summary>
            Refreshes all tabs that contain certain nodes
            </summary>
            <param name="pred">Returns true if the node should be included</param>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabManager.RefreshModifiedFile(dnSpy.Contracts.Files.IDnSpyFile)">
            <summary>
            Refreshes all tabs that use <paramref name="file"/>
            </summary>
            <param name="file">Modified file</param>
        </member>
        <member name="E:dnSpy.Contracts.Files.Tabs.IFileTabManager.FileModified">
            <summary>
            Raised when <see cref="M:dnSpy.Contracts.Files.Tabs.IFileTabManager.RefreshModifiedFile(dnSpy.Contracts.Files.IDnSpyFile)"/> gets called
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Files.Tabs.IFileTabManager.FileCollectionChanged">
            <summary>
            Notified when the file collection gets changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabManager.Owns(dnSpy.Contracts.Tabs.ITabGroup)">
            <summary>
            Returns true if <paramref name="tabGroup"/> is owned by this instance
            </summary>
            <param name="tabGroup">Tab group</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabManager.Close(dnSpy.Contracts.Files.Tabs.IFileTab)">
            <summary>
            Closes the tab
            </summary>
            <param name="tab"></param>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabManager.TryGetFileTab(dnSpy.Contracts.Tabs.ITabContent)">
            <summary>
            Tries to get the <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTab"/>
            </summary>
            <param name="content">Tab content</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabManager.CloseAll">
            <summary>
            Closes all tabs
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabManager.FollowReference(System.Object,System.Boolean,System.Boolean,System.Action{dnSpy.Contracts.Files.Tabs.ShowTabContentEventArgs})">
            <summary>
            Follows the reference in the active tab or a new tab
            </summary>
            <param name="ref">Reference</param>
            <param name="newTab">true to open a new tab</param>
            <param name="setFocus">true to give the tab keyboard focus</param>
            <param name="onShown">Called after the content has been shown. Can be null.</param>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabManager.TryCreateContent(dnSpy.Contracts.Files.TreeView.IFileTreeNodeData[])">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTabContent"/> instance. Returns null if it couldn't be created
            </summary>
            <param name="nodes">Nodes</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.IFileTabManagerSettings">
            <summary>
            <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTabManager"/> settings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IFileTabManagerSettings.RestoreTabs">
            <summary>
            true to restore tabs at startup
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IFileTabManagerSettings.DecompileFullType">
            <summary>
            true to decompile the owner type of a method, field, etc instead of just the method,
            field, etc.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.IFileTabUIContext">
            <summary>
            UI content shared by some <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTabContent"/> instances, eg. it could contain
            the text editor. Only one instance per tab is allocated and stored in a <see cref="T:System.WeakReference"/>.
            Implement <see cref="T:System.IDisposable"/> to get called when the tab is removed (only called if
            this instance hasn't been GC'd)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IFileTabUIContext.UIObject">
            <summary>
            Gets the UI object
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IFileTabUIContext.FocusedElement">
            <summary>
            Gets the element that should get focus when the tab is selected, or null. Implement
            <see cref="T:dnSpy.Contracts.Controls.IFocusable"/> to set focus yourself.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IFileTabUIContext.ScaleElement">
            <summary>
            Gets the element that gets the <see cref="T:System.Windows.Media.ScaleTransform"/> or null if none
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabUIContext.Serialize">
            <summary>
            Saves UI state, eg. line number, caret position, etc
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabUIContext.Deserialize(System.Object)">
            <summary>
            Restores UI state. <paramref name="obj"/> was created by <see cref="M:dnSpy.Contracts.Files.Tabs.IFileTabUIContext.Serialize"/> but
            could also be null or an invalid value. The callee is responsible for verifying
            <paramref name="obj"/>.
            </summary>
            <param name="obj">Serialized UI state</param>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabUIContext.CreateSerialized(dnSpy.Contracts.Settings.ISettingsSection)">
            <summary>
            Creates a serialized UI object, same type as returned by <see cref="M:dnSpy.Contracts.Files.Tabs.IFileTabUIContext.Serialize"/>.
            </summary>
            <param name="section">Serialized data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabUIContext.SaveSerialized(dnSpy.Contracts.Settings.ISettingsSection,System.Object)">
            <summary>
            Saves serialized data to <paramref name="section"/>. <paramref name="obj"/> was created
            by <see cref="M:dnSpy.Contracts.Files.Tabs.IFileTabUIContext.Serialize"/> but should be verified by the callee.
            </summary>
            <param name="section">Destination</param>
            <param name="obj">Serialized data, created by <see cref="M:dnSpy.Contracts.Files.Tabs.IFileTabUIContext.Serialize"/></param>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabUIContext.OnShow">
            <summary>
            Called when this instance will be shown in a tab
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabUIContext.OnHide">
            <summary>
            Called when another <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTabUIContext"/> instance will be shown
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IFileTabUIContext.FileTab">
            <summary>
            Initialized by the <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTabManager"/> owner
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.IFileTabUIContextCreator">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTabUIContext"/> instances. Use <see cref="T:dnSpy.Contracts.Files.Tabs.ExportFileTabUIContextCreatorAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabUIContextCreator.Create``1">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTabUIContext"/> instance or returns null if someone else
            should create it.
            </summary>
            <typeparam name="T">Type</typeparam>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.IFileTabUIContextCreatorMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IFileTabUIContextCreatorMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Files.Tabs.ExportFileTabUIContextCreatorAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.ExportFileTabUIContextCreatorAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTabUIContextCreator"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.ExportFileTabUIContextCreatorAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.ExportFileTabUIContextCreatorAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.IFileTabUIContextLocator">
            <summary>
            Creates and caches <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTabUIContext"/> instances. These are only used in a
            single tab.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabUIContextLocator.Get``1">
            <summary>
            Creates or returns an existing cached instance of a certain type. This instance is
            cached per tab and is stored in a <see cref="T:System.WeakReference"/>.
            </summary>
            <typeparam name="T">Type, eg. <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext"/></typeparam>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IFileTabUIContextLocator.Get``1(System.Object,System.Func{``0})">
            <summary>
            Creates or returns an existing cached instance of a certain type. This instance is
            cached per tab and is stored in a <see cref="T:System.WeakReference"/>.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="key">Key</param>
            <param name="creator">Called if the value hasn't been cached or if it has been GC'd</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.ILanguageTabContent">
            <summary>
            A <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTabContent"/> that uses a <see cref="T:dnSpy.Contracts.Languages.ILanguage"/> to generate its content
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.ILanguageTabContent.Language">
            <summary>
            Gets/sets the language used to generate the content
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.IReferenceFileTabContentCreator">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTabContent"/> instances. Use <see cref="T:dnSpy.Contracts.Files.Tabs.ExportReferenceFileTabContentCreatorAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.IReferenceFileTabContentCreator.Create(dnSpy.Contracts.Files.Tabs.IFileTabManager,dnSpy.Contracts.Files.Tabs.IFileTabContent,System.Object)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Files.Tabs.FileTabReferenceResult"/> or returns null
            </summary>
            <param name="fileTabManager">Owner</param>
            <param name="sourceContent">Source content or null. It's used when showing the reference
            in a new tab. This would then be the older tab's content.</param>
            <param name="ref">Reference</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.IReferenceFileTabContentCreatorMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IReferenceFileTabContentCreatorMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Files.Tabs.ExportReferenceFileTabContentCreatorAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.ExportReferenceFileTabContentCreatorAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Files.Tabs.IReferenceFileTabContentCreator"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.ExportReferenceFileTabContentCreatorAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.ExportReferenceFileTabContentCreatorAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.ISaveManager">
            <summary>
            Saves tabs
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.ISaveManager.CanSave(dnSpy.Contracts.Files.Tabs.IFileTab)">
            <summary>
            Returns true if the tab can be saved
            </summary>
            <param name="tab">Tab</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.ISaveManager.Save(dnSpy.Contracts.Files.Tabs.IFileTab)">
            <summary>
            Saves the tab. See also <see cref="M:dnSpy.Contracts.Files.Tabs.ISaveManager.CanSave(dnSpy.Contracts.Files.Tabs.IFileTab)"/>
            </summary>
            <param name="tab">Tab</param>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.ISaveManager.GetMenuHeader(dnSpy.Contracts.Files.Tabs.IFileTab)">
            <summary>
            Returns the menu header content, eg. "_Save..."
            </summary>
            <param name="tab">Tab</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.IShowContext">
            <summary>
            Passed to <see cref="M:dnSpy.Contracts.Files.Tabs.IFileTabContent.OnShow(dnSpy.Contracts.Files.Tabs.IShowContext)"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IShowContext.UIContext">
            <summary>
            UI Context created by <see cref="M:dnSpy.Contracts.Files.Tabs.IFileTabContent.CreateUIContext(dnSpy.Contracts.Files.Tabs.IFileTabUIContextLocator)"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IShowContext.IsRefresh">
            <summary>
            true if the view is refreshed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IShowContext.OnShown">
            <summary>
            If non-null, gets called after the content has been shown
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.IShowContext.UserData">
            <summary>
            Can be initialized by the <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTabContent"/> instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.ITabSaver">
            <summary>
            Saves tabs
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.ITabSaver.CanSave">
            <summary>
            true if it can be saved
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.ITabSaver.MenuHeader">
            <summary>
            Gets the menu header, eg. "_Save..." or null to use the default "_Save..." string
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.ITabSaver.Save">
            <summary>
            Saves the tab
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.ITabSaverCreator">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Files.Tabs.ITabSaver"/> instances. Use <see cref="T:dnSpy.Contracts.Files.Tabs.ExportTabSaverCreatorAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.ITabSaverCreator.Create(dnSpy.Contracts.Files.Tabs.IFileTab)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.Tabs.ITabSaver"/> instance or returns null
            </summary>
            <param name="tab">Tab</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.ITabSaverCreatorMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.ITabSaverCreatorMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Files.Tabs.ExportTabSaverCreatorAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.ExportTabSaverCreatorAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Files.Tabs.ITabSaverCreator"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.ExportTabSaverCreatorAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.ExportTabSaverCreatorAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.ShowTabContentEventArgs">
            <summary>
            Show tab content event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.ShowTabContentEventArgs.Success">
            <summary>
            true if the content was shown successfully (eg. no exceptions when decompiling code)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.ShowTabContentEventArgs.HasMovedCaret">
            <summary>
            Set to true if the caret has been moved by a previous handler
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.ShowTabContentEventArgs.Tab">
            <summary>
            Gets the tab
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.ShowTabContentEventArgs.#ctor(System.Boolean,dnSpy.Contracts.Files.Tabs.IFileTab)">
            <summary>
            Constructor
            </summary>
            <param name="success">See <see cref="P:dnSpy.Contracts.Files.Tabs.ShowTabContentEventArgs.Success"/></param>
            <param name="tab">Tab</param>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TabConstants">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TabConstants.ORDER_HEXFILETABCONTENTFACTORY">
            <summary>
            Order of hex <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTabContentFactory"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TabConstants.ORDER_HEXBOXFILETABCONTENTFACTORY">
            <summary>
            Order of hex editor <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTabContentFactory"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TabConstants.ORDER_DECOMPILEFILETABCONTENTFACTORY">
            <summary>
            Order of decompile <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTabContentFactory"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TabConstants.ORDER_DEFAULTDECOMPILENODE">
            <summary>
            Order of default <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.IDecompileNode"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TabConstants.ORDER_TEXTEDITORUICONTEXTCREATOR">
            <summary>
            Order of <see cref="T:dnSpy.Contracts.Files.Tabs.IFileTabUIContextCreator"/> instance that creates <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext"/> instances
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TabConstants.ORDER_DNLIBREFTOOLTIPCONTENTCREATOR">
            <summary>
            Order of dnlib reference <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.ToolTips.IToolTipContentCreator"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TabConstants.ORDER_DEFAULTTABSAVERCREATOR">
            <summary>
            Order of default <see cref="T:dnSpy.Contracts.Files.Tabs.ITabSaverCreator"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TabConstants.ORDER_BAMLTABSAVERCREATOR">
            <summary>
            Order of baml <see cref="T:dnSpy.Contracts.Files.Tabs.ITabSaverCreator"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TabConstants.ORDER_HEXTABSAVERCREATOR">
            <summary>
            Order of hex <see cref="T:dnSpy.Contracts.Files.Tabs.ITabSaverCreator"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TabConstants.ORDER_CONTENTCREATOR_HEXTOKENREF">
            <summary>
            Order of hex <see cref="T:dnSpy.Decompiler.Shared.TokenReference"/> <see cref="T:dnSpy.Contracts.Files.Tabs.IReferenceFileTabContentCreator"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TabConstants.ORDER_CONTENTCREATOR_HEXADDRREF">
            <summary>
            Order of hex <see cref="T:dnSpy.Decompiler.Shared.AddressReference"/> <see cref="T:dnSpy.Contracts.Files.Tabs.IReferenceFileTabContentCreator"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TabConstants.ORDER_CONTENTCREATOR_CODEREF">
            <summary>
            Order of default <see cref="T:dnSpy.Contracts.Files.Tabs.IReferenceFileTabContentCreator"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TabConstants.ORDER_CONTENTCREATOR_NODE">
            <summary>
            Order of <see cref="T:dnSpy.Contracts.Files.Tabs.IReferenceFileTabContentCreator"/> instance that creates content
            from <see cref="T:dnSpy.Contracts.Files.TreeView.IFileTreeNodeData"/> nodes.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.CodeReference">
            <summary>
            A reference in code
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TextEditor.CodeReference.Reference">
            <summary>
            The reference or null
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TextEditor.CodeReference.IsLocal">
            <summary>
            true if it's a local, parameter, or label
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TextEditor.CodeReference.IsLocalTarget">
            <summary>
            true if it's the target of a click, eg. the definition of a type, method, etc
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.CodeReference.#ctor(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="ref">Referece</param>
            <param name="isLocal">See <see cref="F:dnSpy.Contracts.Files.Tabs.TextEditor.CodeReference.IsLocal"/></param>
            <param name="isLocalTarget"><see cref="F:dnSpy.Contracts.Files.Tabs.TextEditor.CodeReference.IsLocalTarget"/></param>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.IDecompileNode">
            <summary>
            Decompiles <see cref="T:dnSpy.Contracts.Files.TreeView.IFileTreeNodeData"/> instances. Use <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.ExportDecompileNodeAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.IDecompileNode.Decompile(dnSpy.Contracts.Files.Tabs.TextEditor.IDecompileNodeContext,dnSpy.Contracts.Files.TreeView.IFileTreeNodeData)">
            <summary>
            Decompiles <paramref name="node"/> or returns false if someone else should have a try.
            This method can be called in any thread.
            </summary>
            <param name="context">Context</param>
            <param name="node">Node to decompile</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.IDecompileNodeMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.IDecompileNodeMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Files.Tabs.TextEditor.ExportDecompileNodeAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.ExportDecompileNodeAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.IDecompileNode"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ExportDecompileNodeAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.ExportDecompileNodeAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.IDecompileNodeCollection">
            <summary>
            Decompiles <see cref="T:dnSpy.Contracts.Files.TreeView.IFileTreeNodeData"/> instances. Use <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.ExportDecompileNodeCollectionAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.IDecompileNodeCollection.Decompile(dnSpy.Contracts.Files.Tabs.TextEditor.IDecompileNodeContext,dnSpy.Contracts.Files.TreeView.IFileTreeNodeData[])">
            <summary>
            Decompiles <paramref name="nodes"/> or returns false if someone else should have a try.
            This method can be called in any thread
            </summary>
            <param name="context">Context</param>
            <param name="nodes">Nodes to decompile</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.IDecompileNodeCollectionMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.IDecompileNodeCollectionMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Files.Tabs.TextEditor.ExportDecompileNodeCollectionAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.ExportDecompileNodeCollectionAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.IDecompileNodeCollection"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ExportDecompileNodeCollectionAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.ExportDecompileNodeCollectionAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.IDecompileNodeContext">
            <summary>
            <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.IDecompileNode"/> context
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.IDecompileNodeContext.Output">
            <summary>
            Output to use
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.IDecompileNodeContext.Language">
            <summary>
            Language to use
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.IDecompileNodeContext.DecompilationContext">
            <summary>
            Gets the decompilation context
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.IDecompileNodeContext.ExecuteInUIThread``1(System.Func{``0})">
            <summary>
            Executes <paramref name="func"/> in the UI thread and waits for it to complete, then
            returns the result to the caller. This can be used to load the node's
            <see cref="P:dnSpy.Contracts.TreeView.ITreeNode.Children"/> property since it can only be loaded in the UI thread.
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="func">Delegate to execute</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.IDecompileNodeContext.HighlightingDefinition">
            <summary>
            Sets the <see cref="T:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition"/> to use or null to use the default one.
            See also <see cref="P:dnSpy.Contracts.Files.Tabs.TextEditor.IDecompileNodeContext.HighlightingExtension"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.IDecompileNodeContext.HighlightingExtension">
            <summary>
            Sets the file extension (including the period) to use or null to use the default one.
            See also <see cref="P:dnSpy.Contracts.Files.Tabs.TextEditor.IDecompileNodeContext.HighlightingDefinition"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.IDecompileSelf">
            <summary>
            Decompiles itself. Can be implemented by <see cref="T:dnSpy.Contracts.Files.TreeView.IFileTreeNodeData"/> nodes.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.IDecompileSelf.Decompile(dnSpy.Contracts.Files.Tabs.TextEditor.IDecompileNodeContext)">
            <summary>
            Decompiles itself or returns false if someone else should have a try. This method can be
            called in any thread.
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.IIconBarCommand">
            <summary>
            Text editor icon bar command
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.IIconBarCommand.IsEnabled(dnSpy.Contracts.Files.Tabs.TextEditor.IIconBarCommandContext)">
            <summary>
            Returns true if <see cref="M:dnSpy.Contracts.Files.Tabs.TextEditor.IIconBarCommand.Execute(dnSpy.Contracts.Files.Tabs.TextEditor.IIconBarCommandContext)"/> can be called
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.IIconBarCommand.Execute(dnSpy.Contracts.Files.Tabs.TextEditor.IIconBarCommandContext)">
            <summary>
            Executes the command, only called if <see cref="M:dnSpy.Contracts.Files.Tabs.TextEditor.IIconBarCommand.IsEnabled(dnSpy.Contracts.Files.Tabs.TextEditor.IIconBarCommandContext)"/> returned true
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.IIconBarCommandContext">
            <summary>
            <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.IIconBarCommand"/> context
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.IIconBarCommandContext.UIContext">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.IIconBarCommandContext.Line">
            <summary>
            Gets the line number
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.IIconBarObject">
            <summary>
            Adds an icon in the icon bar
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.IIconBarObject.GetLineNumber(dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext)">
            <summary>
            Gets the line number
            </summary>
            <param name="uiContext">Text editor</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.IIconBarObject.ImageReference">
            <summary>
            Gets the image or null if none
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.IMarkedTextLine">
            <summary>
            Implemented by code breakpoints, call stack lines, current line and any other classes that
            must have an icon in the icon bar and always-marked text in the text editor
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext">
            <summary>
            Text editor UI context
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext.SetOutput(dnSpy.Decompiler.Shared.ITextOutput,ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition)">
            <summary>
            Sets document to <paramref name="output"/>, which should be an <c>AvalonEditTextOutput</c>
            instance
            </summary>
            <param name="output">New document</param>
            <param name="highlighting">Highlighting to use or null</param>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext.AddOutputData(System.Object,System.Object)">
            <summary>
            Adds data that is cleared each time <see cref="M:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext.SetOutput(dnSpy.Decompiler.Shared.ITextOutput,ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition)"/>
            gets called.
            </summary>
            <param name="key">Key</param>
            <param name="data">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext.GetOutputData(System.Object)">
            <summary>
            Returns data added by <see cref="M:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext.AddOutputData(System.Object,System.Object)"/> or null if not found
            </summary>
            <param name="key">Key</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext.ShowCancelButton(System.Action,System.String)">
            <summary>
            Shows a cancel button. Can be used when decompiling in another thread
            </summary>
            <param name="onCancel">Called if the user clicks the cancel button</param>
            <param name="msg">Message to show to the user</param>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext.HideCancelButton">
            <summary>
            Hides the cancel button shown by <see cref="M:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext.ShowCancelButton(System.Action,System.String)"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext.MoveCaretTo(System.Object)">
            <summary>
            Moves the caret to a reference, this can be a <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.CodeReference"/>,
            or a <see cref="T:dnlib.DotNet.IMemberDef"/>. Anything else isn't currently supported.
            </summary>
            <param name="ref">Reference</param>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext.HasSelectedText">
            <summary>
            true if there's selected text
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext.Location">
            <summary>
            Gets the current location
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext.ScrollAndMoveCaretTo(System.Int32,System.Int32)">
            <summary>
            Scrolls to a line and column
            </summary>
            <param name="line">Line</param>
            <param name="column">Column</param>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext.SelectedReference">
            <summary>
            Gets the selected reference or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext.SelectedCodeReference">
            <summary>
            Gets the selected reference or null
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext.GetSelectedCodeReferences">
            <summary>
            Returns all selected <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.CodeReference"/>s
            </summary>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext.References">
            <summary>
            Gets the references in the document
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext.GetCodeReferences(System.Int32,System.Int32)">
            <summary>
            Gets all code references starting from a certain location
            </summary>
            <param name="line">Line</param>
            <param name="column">Column</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext.SaveReferencePosition">
            <summary>
            Saves current location relative to some reference in the code. Return value can be
            passed to <see cref="M:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext.RestoreReferencePosition(System.Object)"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext.RestoreReferencePosition(System.Object)">
            <summary>
            Restores location saved by <see cref="M:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext.SaveReferencePosition"/>
            </summary>
            <param name="obj">Saved position</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.TextEditorUIContextListener">
            <summary>
            Called at various times
            </summary>
            <param name="event">Event</param>
            <param name="uiContext">Instance</param>
            <param name="data">Data, see <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.TextEditorUIContextListenerEvent"/></param>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContextManager">
            <summary>
            Notifies listeners of <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext"/> events
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContextManager.Add(dnSpy.Contracts.Files.Tabs.TextEditor.TextEditorUIContextListener,System.Double)">
            <summary>
            Adds a listener
            </summary>
            <param name="listener">Listener</param>
            <param name="order">Order, see constants in <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.TextEditorUIContextManagerConstants"/></param>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContextManager.Remove(dnSpy.Contracts.Files.Tabs.TextEditor.TextEditorUIContextListener)">
            <summary>
            Removes a listener
            </summary>
            <param name="listener">Listener</param>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.ITextLineObject">
            <summary>
            A text line object
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.ITextLineObject.ZOrder">
            <summary>
            Z-order, eg. <see cref="F:dnSpy.Contracts.Files.Tabs.TextEditor.TextEditorConstants.ZORDER_BREAKPOINT"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ITextLineObject.IsVisible(dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext)">
            <summary>
            Returns true if it's visible
            </summary>
            <param name="uiContext">Text editor</param>
            <returns></returns>
        </member>
        <member name="E:dnSpy.Contracts.Files.Tabs.TextEditor.ITextLineObject.ObjPropertyChanged">
            <summary>
            Raised when a property has changed, eg. if it must be redrawn
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.ITextLineObjectManager">
            <summary>
            Keeps track of text line objects, eg. code breakpoints, current line markers, etc
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Files.Tabs.TextEditor.ITextLineObjectManager.OnListModified">
            <summary>
            Notified when the list has been modified
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.ITextLineObjectManager.Objects">
            <summary>
            Gets all objects
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ITextLineObjectManager.GetObjectsOfType``1">
            <summary>
            Finds an object of a certain type or returns null if none found
            </summary>
            <typeparam name="T">Type</typeparam>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ITextLineObjectManager.Add(dnSpy.Contracts.Files.Tabs.TextEditor.ITextLineObject)">
            <summary>
            Adds a new object
            </summary>
            <param name="obj">Object</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ITextLineObjectManager.Remove(dnSpy.Contracts.Files.Tabs.TextEditor.ITextLineObject)">
            <summary>
            Removes an object
            </summary>
            <param name="obj">Object</param>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.ITextMarker">
            <summary>
            Represents a text marker.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.ITextMarker.StartOffset">
            <summary>
            Gets the start offset of the marked text region.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.ITextMarker.EndOffset">
            <summary>
            Gets the end offset of the marked text region.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.ITextMarker.Length">
            <summary>
            Gets the length of the marked region.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ITextMarker.Delete">
            <summary>
            Deletes the text marker.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.ITextMarker.IsDeleted">
            <summary>
            Gets whether the text marker was deleted.
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Files.Tabs.TextEditor.ITextMarker.Deleted">
            <summary>
            Event that occurs when the text marker is deleted.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.ITextMarker.HighlightingColor">
            <summary>
            Gets the highlighting color
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.ITextMarker.BackgroundColor">
            <summary>
            Gets/Sets the background color.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.ITextMarker.ForegroundColor">
            <summary>
            Gets/Sets the foreground color.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.ITextMarker.FontWeight">
            <summary>
            Gets/Sets the font weight.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.ITextMarker.FontStyle">
            <summary>
            Gets/Sets the font style.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.ITextMarker.MarkerTypes">
            <summary>
            Gets/Sets the type of the marker. Use TextMarkerType.None for normal markers.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.ITextMarker.MarkerColor">
            <summary>
            Gets/Sets the color of the marker.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.ITextMarker.IsVisible">
            <summary>
            Gets or sets if the marker is visible or not.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.ITextMarker.TextMarkerObject">
            <summary>
            Gets or sets the text obj
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.ITextMarker.ZOrder">
            <summary>
            Gets or sets the Z-order
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ITextMarker.Redraw">
            <summary>
            Forces a redraw
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.TextMarkerTypes">
            <summary>
            Text marker types
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TextEditor.TextMarkerTypes.None">
            <summary>
            Use no marker
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TextEditor.TextMarkerTypes.SquigglyUnderline">
            <summary>
            Use squiggly underline marker
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TextEditor.TextMarkerTypes.NormalUnderline">
            <summary>
            Normal underline.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TextEditor.TextMarkerTypes.DottedUnderline">
            <summary>
            Dotted underline.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TextEditor.TextMarkerTypes.LineInScrollBar">
            <summary>
            Horizontal line in the scroll bar.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TextEditor.TextMarkerTypes.ScrollBarRightTriangle">
            <summary>
            Small triangle in the scroll bar, pointing to the right.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TextEditor.TextMarkerTypes.ScrollBarLeftTriangle">
            <summary>
            Small triangle in the scroll bar, pointing to the left.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TextEditor.TextMarkerTypes.CircleInScrollBar">
            <summary>
            Small circle in the scroll bar.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.ITextMarkerService">
            <summary>
            Handles the text markers for a code editor.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.ITextMarkerService.TextView">
            <summary>
            Gets the text view
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ITextMarkerService.Create(System.Int32,System.Int32)">
            <summary>
            Creates a new text marker. The text marker will be invisible at first,
            you need to set one of the Color properties to make it visible.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ITextMarkerService.Remove(dnSpy.Contracts.Files.Tabs.TextEditor.ITextMarker)">
            <summary>
            Removes the specified text marker.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.ITextMarkerObject">
            <summary>
            Marks text in the text editor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ITextMarkerObject.CreateMarker(dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext,dnSpy.Contracts.Files.Tabs.TextEditor.ITextMarkerService)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.ITextMarker"/>
            </summary>
            <param name="uiContext">Text editor</param>
            <param name="markerService">Text marker service</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.TextEditorConstants">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TextEditor.TextEditorConstants.ZORDER_BREAKPOINT">
            <summary>Z-order of breakpoints</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TextEditor.TextEditorConstants.ZORDER_RETURNSTATEMENT">
            <summary>Z-order of return statements</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TextEditor.TextEditorConstants.ZORDER_SELECTEDRETURNSTATEMENT">
            <summary>Z-order of selected return statements</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TextEditor.TextEditorConstants.ZORDER_CURRENTSTATEMENT">
            <summary>Z-order of current statement</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TextEditor.TextEditorConstants.ZORDER_SEARCHRESULT">
            <summary>Z-order of search results</summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.TextEditorUIContextListenerEvent">
            <summary>
            <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.TextEditorUIContextListener"/> event
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TextEditor.TextEditorUIContextListenerEvent.Added">
            <summary>
            A <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext"/> has been created
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TextEditor.TextEditorUIContextListenerEvent.Removed">
            <summary>
            A <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext"/> has been removed (eg. tab was closed). This event
            isn't raised if the <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext"/> instance has already been GC'd.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TextEditor.TextEditorUIContextListenerEvent.NewContent">
            <summary>
            New content has been added to the text editor. The <c>data</c> argument is a
            <see cref="T:dnSpy.Decompiler.Shared.ITextOutput"/>, most likely an <c>AvalonEditTextOutput</c>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.TextEditorUIContextManagerConstants">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TextEditor.TextEditorUIContextManagerConstants.ORDER_DEFAULT">
            <summary>Default order</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TextEditor.TextEditorUIContextManagerConstants.ORDER_DEBUGGER_CODEMAPPINGSCREATOR">
            <summary>Debugger: create code mappings</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TextEditor.TextEditorUIContextManagerConstants.ORDER_ASMEDITOR_CODEMAPPINGSCREATOR">
            <summary>AsmEditor: create code mappings</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TextEditor.TextEditorUIContextManagerConstants.ORDER_DEBUGGER_CALLSTACK">
            <summary>Debugger: call stack</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TextEditor.TextEditorUIContextManagerConstants.ORDER_DEBUGGER_METHODLOCALPROVIDER">
            <summary>Debugger: locals (<c>MethodLocalProvider</c>)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TextEditor.TextEditorUIContextManagerConstants.ORDER_TEXTMARKERSERVICE">
            <summary>Text marker serivce</summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.TextLineObjectEventArgs">
            <summary>
            <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.ITextLineObject"/> event args
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.Tabs.TextEditor.TextLineObjectEventArgs.RedrawProperty">
            <summary>
            The object needs to be redrawn
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.TextLineObjectEventArgs.Property">
            <summary>
            Gets the property
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.TextLineObjectEventArgs.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="property">Property</param>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.TextLineObjectListModifiedEventArgs">
            <summary>
            <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.ITextLineObject"/> list modified event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.TextLineObjectListModifiedEventArgs.TextLineObject">
            <summary>
            Added/removed object
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.TextLineObjectListModifiedEventArgs.Added">
            <summary>
            true if added, false if removed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.TextLineObjectListModifiedEventArgs.#ctor(dnSpy.Contracts.Files.Tabs.TextEditor.ITextLineObject,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="obj">Object</param>
            <param name="added">true if added</param>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.ToolTips.ICodeToolTipCreator">
            <summary>
            Creates code tooltips
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.ToolTips.ICodeToolTipCreator.Image">
            <summary>
            Sets the image that should be shown in the tooltip or null if none should be shown
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ToolTips.ICodeToolTipCreator.SetImage(System.Object)">
            <summary>
            Initializes <see cref="P:dnSpy.Contracts.Files.Tabs.TextEditor.ToolTips.ICodeToolTipCreator.Image"/> with an image
            </summary>
            <param name="ref">A dnlib type, method, field, local, etc</param>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.ToolTips.ICodeToolTipCreator.Output">
            <summary>
            Gets the current output
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ToolTips.ICodeToolTipCreator.CreateNewOutput">
            <summary>
            Creates a new output that is shown on a new line
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ToolTips.ICodeToolTipCreator.Create">
            <summary>
            Creates the tooltip
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.ToolTips.ICodeToolTipWriter">
            <summary>
            Writes tooltips
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ToolTips.ICodeToolTipWriter.WriteXmlDoc(System.String)">
            <summary>
            Writes an XML doc comment. Returns true if it was written, false otherwise
            </summary>
            <param name="xmlDoc">XML doc</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ToolTips.ICodeToolTipWriter.WriteXmlDocParameter(System.String,System.String)">
            <summary>
            Writes an XML doc parameter. Returns true if it was written, false otherwise
            </summary>
            <param name="xmlDoc">XML doc</param>
            <param name="paramName">Name of parameter</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ToolTips.ICodeToolTipWriter.WriteXmlDocGeneric(System.String,System.String)">
            <summary>
            Writes an XML doc generic. Returns true if it was written, false otherwise
            </summary>
            <param name="xmlDoc">XML doc</param>
            <param name="gpName">Name of generic parameter</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.ToolTips.IToolTipContentCreator">
            <summary>
            Creates tooltips. Use <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.ToolTips.ExportToolTipContentCreatorAttribute"/> to export an
            instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ToolTips.IToolTipContentCreator.Create(dnSpy.Contracts.Files.Tabs.TextEditor.ToolTips.IToolTipContentCreatorContext,System.Object)">
            <summary>
            Creates a tooltip or returns null
            </summary>
            <param name="context">Context</param>
            <param name="ref">Reference</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.ToolTips.IToolTipContentCreatorMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.ToolTips.IToolTipContentCreatorMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Files.Tabs.TextEditor.ToolTips.ExportToolTipContentCreatorAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.ToolTips.ExportToolTipContentCreatorAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.ToolTips.IToolTipContentCreator"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ToolTips.ExportToolTipContentCreatorAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.ToolTips.ExportToolTipContentCreatorAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.Tabs.TextEditor.ToolTips.IToolTipContentCreatorContext">
            <summary>
            <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.ToolTips.IToolTipContentCreator"/> context
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.Tabs.TextEditor.ToolTips.IToolTipContentCreatorContext.Language">
            <summary>
            Language to use
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.Tabs.TextEditor.ToolTips.IToolTipContentCreatorContext.Create">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.ToolTips.ICodeToolTipCreator"/> instance that can be used to create the
            code tooltip
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.FileTreeNodeActivatedEventArgs">
            <summary>
            <see cref="T:dnSpy.Contracts.Files.TreeView.IFileTreeNodeData"/> activated event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.FileTreeNodeActivatedEventArgs.Node">
            <summary>
            Activated node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.FileTreeNodeActivatedEventArgs.Handled">
            <summary>
            Set it to true if the event was handled
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.FileTreeNodeActivatedEventArgs.#ctor(dnSpy.Contracts.Files.TreeView.IFileTreeNodeData)">
            <summary>
            Constructor
            </summary>
            <param name="node">Node</param>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.FileTreeNodeFilterResult">
            <summary>
            <see cref="T:dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter"/> result
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTreeNodeFilterResult.FilterType">
            <summary>
            Filter type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTreeNodeFilterResult.IsMatch">
            <summary>
            true if this is a node that can be returned as a result to the user
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.FileTreeNodeFilterResult.#ctor(dnSpy.Contracts.Files.TreeView.FilterType,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="filterType">Filter type</param>
            <param name="isMatch">True if it was a match</param>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.FileTreeNodeGroupType">
            <summary>
            Default <see cref="T:dnSpy.Contracts.TreeView.ITreeNodeGroup"/> instances
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.FileTVConstants">
            <summary>
            Treeview constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.DATAFORMAT_COPIED_ROOT_NODES">
            <summary>Drag and drop nodes DataFormat. It's an <see cref="T:System.Int32"/>[] of indexes of the nodes.</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ROOT_NODE_GUID">
            <summary>Guid of root node</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.MESSAGE_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Files.TreeView.IMessageNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.UNKNOWN_FILE_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Files.TreeView.IUnknownFileNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.PEFILE_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Files.TreeView.IPEFileNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ASSEMBLY_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Files.TreeView.IAssemblyFileNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.MODULE_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Files.TreeView.IModuleFileNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.RESOURCES_FOLDER_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Files.TreeView.IResourcesFolderNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.REFERENCES_FOLDER_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Files.TreeView.IReferencesFolderNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.NAMESPACE_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Files.TreeView.INamespaceNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ASSEMBLYREF_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Files.TreeView.IAssemblyReferenceNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.MODULEREF_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Files.TreeView.IModuleReferenceNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.BASETYPEFOLDER_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Files.TreeView.IBaseTypeFolderNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.DERIVEDTYPESFOLDER_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Files.TreeView.IDerivedTypesFolderNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.BASETYPE_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Files.TreeView.IBaseTypeNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.DERIVEDTYPE_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Files.TreeView.IDerivedTypeNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.TYPE_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Files.TreeView.ITypeNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.FIELD_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Files.TreeView.IFieldNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.METHOD_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Files.TreeView.IMethodNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.PROPERTY_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Files.TreeView.IPropertyNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.EVENT_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Files.TreeView.IEventNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.UNKNOWN_RESOURCE_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Files.TreeView.Resources.IUnknownResourceNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.RESOURCE_ELEMENT_SET_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Files.TreeView.Resources.IResourceElementSetNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.UNKNOWN_SERIALIZED_RESOURCE_ELEMENT_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Files.TreeView.Resources.IUnknownSerializedResourceElementNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.BUILT_IN_RESOURCE_ELEMENT_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Files.TreeView.Resources.IBuiltInResourceElementNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.IMAGE_RESOURCE_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Files.TreeView.Resources.IImageResourceNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.IMAGE_RESOURCE_ELEMENT_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Files.TreeView.Resources.IImageResourceElementNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.SERIALIZED_IMAGE_LIST_STREAMER_RESOURCE_ELEMENT_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Files.TreeView.Resources.ISerializedImageListStreamerResourceElementNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.SERIALIZED_IMAGE_RESOURCE_ELEMENT_NODE">
            <summary><see cref="T:dnSpy.Contracts.Files.TreeView.Resources.ISerializedImageResourceElementNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.BAML_RESOURCE_ELEMENT_NODE_GUID">
            <summary><c>BamlResourceElementNode</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.PE_NODE_GUID">
            <summary><c>PENode</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.IMGCOR20HEADER_NODE_GUID">
            <summary><c>ImageCor20HeaderNode</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.IMGDOSHEADER_NODE_GUID">
            <summary><c>ImageDosHeaderNode</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.IMGFILEHEADER_NODE_GUID">
            <summary><c>ImageFileHeaderNode</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.IMGOPTHEADER32_NODE_GUID">
            <summary><c>ImageOptionalHeader32Node</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.IMGOPTHEADER64_NODE_GUID">
            <summary><c>ImageOptionalHeader64Node</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.IMGSECTHEADER_NODE_GUID">
            <summary><c>ImageSectionHeaderNode</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.MDTBL_NODE_GUID">
            <summary><c>MetaDataTableNode</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.MDTBLREC_NODE_GUID">
            <summary><c>MetaDataTableRecordNode</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.STRGHEADER_NODE_GUID">
            <summary><c>StorageHeaderNode</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.STRGSIG_NODE_GUID">
            <summary><c>StorageSignatureNode</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.STRGSTREAM_NODE_GUID">
            <summary><c>StorageStreamNode</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.TBLSSTREAM_NODE_GUID">
            <summary><c>TablesStreamNode</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ORDER_MODULE_PE">
            <summary>Order of PE node</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ORDER_MODULE_REFERENCES_FOLDER">
            <summary>Order of <see cref="T:dnSpy.Contracts.Files.TreeView.IReferencesFolderNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ORDER_MODULE_RESOURCES_FOLDER">
            <summary>Order of <see cref="T:dnSpy.Contracts.Files.TreeView.IResourcesFolderNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ORDER_MODULE_NAMESPACE">
            <summary>Order of <see cref="T:dnSpy.Contracts.Files.TreeView.INamespaceNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ORDER_REFERENCES_ASSEMBLYREF">
            <summary>Order of <see cref="T:dnSpy.Contracts.Files.TreeView.IAssemblyReferenceNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ORDER_REFERENCES_MODULEREF">
            <summary>Order of <see cref="T:dnSpy.Contracts.Files.TreeView.IModuleReferenceNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ORDER_ASSEMBLYREF_ASSEMBLYREF">
            <summary>Order of <see cref="T:dnSpy.Contracts.Files.TreeView.IAssemblyReferenceNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ORDER_NAMESPACE_TYPE">
            <summary>Order of non-nested <see cref="T:dnSpy.Contracts.Files.TreeView.ITypeNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ORDER_TYPE_BASE">
            <summary>Order of <see cref="T:dnSpy.Contracts.Files.TreeView.IBaseTypeFolderNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ORDER_TYPE_DERIVED">
            <summary>Order of <see cref="T:dnSpy.Contracts.Files.TreeView.IDerivedTypesFolderNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ORDER_TYPE_METHOD">
            <summary>Order of nested <see cref="T:dnSpy.Contracts.Files.TreeView.IMethodNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ORDER_TYPE_PROPERTY">
            <summary>Order of nested <see cref="T:dnSpy.Contracts.Files.TreeView.IPropertyNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ORDER_TYPE_EVENT">
            <summary>Order of nested <see cref="T:dnSpy.Contracts.Files.TreeView.IEventNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ORDER_TYPE_FIELD">
            <summary>Order of nested <see cref="T:dnSpy.Contracts.Files.TreeView.IFieldNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ORDER_TYPE_TYPE">
            <summary>Order of nested <see cref="T:dnSpy.Contracts.Files.TreeView.ITypeNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ORDER_PROPERTY_METHOD">
            <summary>Order of <see cref="T:dnSpy.Contracts.Files.TreeView.IMethodNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ORDER_EVENT_METHOD">
            <summary>Order of <see cref="T:dnSpy.Contracts.Files.TreeView.IMethodNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ORDER_BASETYPEFOLDER_BASETYPE">
            <summary>Order of base type <see cref="T:dnSpy.Contracts.Files.TreeView.IBaseTypeNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ORDER_BASETYPEFOLDER_INTERFACE">
            <summary>Order of interface <see cref="T:dnSpy.Contracts.Files.TreeView.IBaseTypeNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ORDER_DERIVEDTYPES_TEXT">
            <summary>Order of <see cref="T:dnSpy.Contracts.Files.TreeView.IMessageNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ORDER_DERIVEDTYPES_TYPE">
            <summary>Order of interface <see cref="T:dnSpy.Contracts.Files.TreeView.IDerivedTypeNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ORDER_RESOURCE">
            <summary>Order of <see cref="T:dnSpy.Contracts.Files.TreeView.Resources.IResourceNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ORDER_RESOURCE_ELEM">
            <summary>Order of <see cref="T:dnSpy.Contracts.Files.TreeView.Resources.IResourceElementNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ORDER_RSRCCREATOR_RSRCELEMSET">
            <summary>Order of <see cref="T:dnSpy.Contracts.Files.TreeView.Resources.IResourceElementSetNode"/> creator</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ORDER_RSRCCREATOR_IMAGE_RESOURCE_NODE">
            <summary>Order of <see cref="T:dnSpy.Contracts.Files.TreeView.Resources.IImageResourceNode"/> and <see cref="T:dnSpy.Contracts.Files.TreeView.Resources.IImageResourceElementNode"/> creator</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ORDER_RSRCCREATOR_SERIALIZED_IMAGE_RESOURCE_ELEMENT_NODE">
            <summary>Order of <see cref="T:dnSpy.Contracts.Files.TreeView.Resources.ISerializedImageResourceElementNode"/> creator</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ORDER_RSRCCREATOR_BAML_NODE">
            <summary>Order of <c>BamlResourceElementNode</c> creator</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ORDER_RSRCCREATOR_SERIALIZED_IMAGE_LIST_STREAMER_RESOURCE_ELEMENT_NODE">
            <summary>Order of <see cref="T:dnSpy.Contracts.Files.TreeView.Resources.ISerializedImageListStreamerResourceElementNode"/> creator</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FileTVConstants.ORDER_RSRCCREATOR_UNKNOWNSERIALIZEDRSRCELEM">
            <summary>Order of <see cref="T:dnSpy.Contracts.Files.TreeView.Resources.IUnknownSerializedResourceElementNode"/> creator</summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.FilterType">
            <summary>
            Filter type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FilterType.Default">
            <summary>The node itself decides what to do</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FilterType.Visible">
            <summary>Node should be visible</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FilterType.Hide">
            <summary>Node should be hidden</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.FilterType.CheckChildren">
            <summary>Node should be hidden if all its children are hidden, else visible</summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IAssemblyFileNode">
            <summary>
            A .NET assembly file
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IAssemblyFileNode.DnSpyFile">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Files.IDnSpyFile"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IAssemblyFileNode.IsExe">
            <summary>
            true if it's an .exe file, false if it's a .dll or .netmodule
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IAssemblyReferenceNode">
            <summary>
            An assembly reference node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IAssemblyReferenceNode.AssemblyRef">
            <summary>
            Gets the assembly reference
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IBaseTypeFolderNode">
            <summary>
            Contains the base type (if any) and all interfaces the type implements
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IBaseTypeFolderNode.InvalidateChildren">
            <summary>
            Invalidates all children
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IBaseTypeNode">
            <summary>
            A base type or implemented interface node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IBaseTypeNode.TypeDefOrRef">
            <summary>
            Gets the type
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IDerivedTypeNode">
            <summary>
            A derived type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IDerivedTypeNode.TypeDef">
            <summary>
            Gets the type
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IDerivedTypesFolderNode">
            <summary>
            Contains all derived types
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IDnSpyFileNode">
            <summary>
            A file node, created from a <see cref="T:dnSpy.Contracts.Files.IDnSpyFile"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IDnSpyFileNode.DnSpyFile">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Files.IDnSpyFile"/> instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IDnSpyFileNodeCreator">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Files.TreeView.IDnSpyFileNode"/>s. Use <see cref="T:dnSpy.Contracts.Files.TreeView.ExportDnSpyFileNodeCreatorAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IDnSpyFileNodeCreator.Create(dnSpy.Contracts.Files.TreeView.IFileTreeView,dnSpy.Contracts.Files.TreeView.IDnSpyFileNode,dnSpy.Contracts.Files.IDnSpyFile)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Files.TreeView.IDnSpyFileNode"/> instance or returns null
            </summary>
            <param name="fileTreeView">File treeview</param>
            <param name="owner">Owner node or null if owner is the root node</param>
            <param name="file">New file</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IDnSpyFileNodeCreatorMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IDnSpyFileNodeCreatorMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Files.TreeView.ExportDnSpyFileNodeCreatorAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.ExportDnSpyFileNodeCreatorAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Files.TreeView.IDnSpyFileNodeCreator"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.ExportDnSpyFileNodeCreatorAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.ExportDnSpyFileNodeCreatorAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IEventNode">
            <summary>
            An event node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IEventNode.EventDef">
            <summary>
            Gets the event
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IEventNode.Create(dnlib.DotNet.MethodDef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.TreeView.IMethodNode"/>, an adder, remover, invoker, or an other method
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IFieldNode">
            <summary>
            A field node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFieldNode.FieldDef">
            <summary>
            Gets the field
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IFileTreeNodeCreator">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Files.TreeView.IFileTreeNodeData"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeCreator.CreateAssembly(dnSpy.Contracts.Files.IDnSpyDotNetFile)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.TreeView.IAssemblyFileNode"/>
            </summary>
            <param name="asmFile">Assembly</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeCreator.CreateModule(dnSpy.Contracts.Files.IDnSpyDotNetFile)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.TreeView.IModuleFileNode"/>
            </summary>
            <param name="modFile">Module</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeCreator.Create(dnlib.DotNet.AssemblyRef,dnlib.DotNet.ModuleDef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.TreeView.IAssemblyReferenceNode"/>
            </summary>
            <param name="asmRef">Assembly reference</param>
            <param name="ownerModule">Owner module</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeCreator.Create(dnlib.DotNet.ModuleRef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.TreeView.IModuleReferenceNode"/>
            </summary>
            <param name="modRef">Module reference</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeCreator.CreateEvent(dnlib.DotNet.MethodDef)">
            <summary>
            Creates an event <see cref="T:dnSpy.Contracts.Files.TreeView.IMethodNode"/>
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeCreator.CreateProperty(dnlib.DotNet.MethodDef)">
            <summary>
            Creates a property <see cref="T:dnSpy.Contracts.Files.TreeView.IMethodNode"/>
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeCreator.Create(System.String)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.TreeView.INamespaceNode"/>
            </summary>
            <param name="name">Name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeCreator.Create(dnlib.DotNet.TypeDef)">
            <summary>
            Creates a non-nested <see cref="T:dnSpy.Contracts.Files.TreeView.ITypeNode"/>
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeCreator.CreateNested(dnlib.DotNet.TypeDef)">
            <summary>
            Creates a nested <see cref="T:dnSpy.Contracts.Files.TreeView.ITypeNode"/>
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeCreator.Create(dnlib.DotNet.MethodDef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.TreeView.IMethodNode"/>
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeCreator.Create(dnlib.DotNet.PropertyDef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.TreeView.IPropertyNode"/>
            </summary>
            <param name="property">Property</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeCreator.Create(dnlib.DotNet.EventDef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.TreeView.IEventNode"/>
            </summary>
            <param name="event">Event</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeCreator.Create(dnlib.DotNet.FieldDef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.TreeView.IFieldNode"/>
            </summary>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IFileTreeNodeData">
            <summary>
            A node in the file treeview
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeNodeData.NodePathName">
            <summary>
            Gets the node path name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeNodeData.Context">
            <summary>
            Gets the context. Should only be set by the owner <see cref="T:dnSpy.Contracts.Files.TreeView.IFileTreeView"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeData.ToString(dnSpy.Contracts.Languages.ILanguage)">
            <summary>
            ToString()
            </summary>
            <param name="language">Language</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeData.Refilter">
            <summary>
            Called when <see cref="P:dnSpy.Contracts.Files.TreeView.IFileTreeNodeDataContext.Filter"/> has been changed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeNodeData.FilterVersion">
            <summary>
            The class (<c>FileTreeNodeData</c>) should call <see cref="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeData.Refilter"/> when updating
            this value.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeData.GetFilterType(dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter)">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Files.TreeView.FilterType"/> to filter this instance
            </summary>
            <param name="filter">Filter to call</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.FileTreeNodeDataExtensionMethods">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.FileTreeNodeDataExtensionMethods.GetAssemblyNode(dnSpy.Contracts.TreeView.ITreeNodeData)">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Files.TreeView.IAssemblyFileNode"/> owner or null if none was found
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.FileTreeNodeDataExtensionMethods.GetModuleNode(dnSpy.Contracts.TreeView.ITreeNodeData)">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Files.TreeView.IModuleFileNode"/> owner or null if none was found
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.FileTreeNodeDataExtensionMethods.GetDnSpyFileNode(dnSpy.Contracts.TreeView.ITreeNodeData)">
            <summary>
            Gets the first <see cref="T:dnSpy.Contracts.Files.TreeView.IDnSpyFileNode"/> owner or null if none was found
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.FileTreeNodeDataExtensionMethods.GetTopNode(dnSpy.Contracts.TreeView.ITreeNodeData)">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Files.TreeView.IDnSpyFileNode"/> top node or null if none was found
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.FileTreeNodeDataExtensionMethods.GetModule(dnSpy.Contracts.TreeView.ITreeNodeData)">
            <summary>
            Gets the <see cref="T:dnlib.DotNet.ModuleDef"/> instance or null
            </summary>
            <param name="self">This</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IFileTreeNodeDataContext">
            <summary>
            <see cref="T:dnSpy.Contracts.Files.TreeView.IFileTreeNodeData"/> context
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeNodeDataContext.FileTreeView">
            <summary>
            Owner <see cref="T:dnSpy.Contracts.Files.TreeView.IFileTreeView"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeNodeDataContext.Language">
            <summary>
            Default language
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeNodeDataContext.ResourceNodeFactory">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Files.TreeView.Resources.IResourceNodeFactory"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeNodeDataContext.Filter">
            <summary>
            Gets the filter
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeNodeDataContext.FilterVersion">
            <summary>
            Filter version, gets incremented each time <see cref="P:dnSpy.Contracts.Files.TreeView.IFileTreeNodeDataContext.Filter"/> gets updated
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeNodeDataContext.SyntaxHighlight">
            <summary>
            true if it should be syntax highlighted
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeNodeDataContext.SingleClickExpandsChildren">
            <summary>
            true if single clicks expand children
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeNodeDataContext.ShowAssemblyVersion">
            <summary>
            Show assembly version
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeNodeDataContext.ShowAssemblyPublicKeyToken">
            <summary>
            Show assembly public key token
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeNodeDataContext.ShowToken">
            <summary>
            Show MD token
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeNodeDataContext.UseNewRenderer">
            <summary>
            true to use the new optimized renderer. It doesn't support all unicode chars or word wrapping
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeNodeDataContext.DeserializeResources">
            <summary>
            true to deserialize resources
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeNodeDataContext.CanDragAndDrop">
            <summary>
            true if drag and drop is allowed
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IFileTreeNodeDataFinder">
            <summary>
            Finds <see cref="T:dnSpy.Contracts.Files.TreeView.IFileTreeNodeData"/> nodes. Use <see cref="T:dnSpy.Contracts.Files.TreeView.ExportFileTreeNodeDataFinderAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeDataFinder.FindNode(dnSpy.Contracts.Files.TreeView.IFileTreeView,System.Object)">
            <summary>
            Returns an existing <see cref="T:dnSpy.Contracts.Files.TreeView.IFileTreeNodeData"/> node or null
            </summary>
            <param name="fileTreeView">Owner</param>
            <param name="ref">Reference</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IFileTreeNodeDataFinderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeNodeDataFinderMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Files.TreeView.ExportFileTreeNodeDataFinderAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.ExportFileTreeNodeDataFinderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Files.TreeView.IFileTreeNodeDataFinder"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.ExportFileTreeNodeDataFinderAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.ExportFileTreeNodeDataFinderAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter">
            <summary>
            Filters <see cref="T:dnSpy.Contracts.Files.TreeView.IFileTreeNodeData"/> instances
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter.GetResult(dnlib.DotNet.AssemblyDef)">
            <summary>
            Returns a filter result. Called if it's a <see cref="T:dnSpy.Contracts.Files.TreeView.IAssemblyFileNode"/>
            </summary>
            <param name="asm">Assembly</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter.GetResult(dnlib.DotNet.ModuleDef)">
            <summary>
            Returns a filter result. Called if it's a <see cref="T:dnSpy.Contracts.Files.TreeView.IModuleFileNode"/>
            </summary>
            <param name="mod">Module</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter.GetResult(dnSpy.Contracts.Files.IDnSpyFile)">
            <summary>
            Returns a filter result. Called if it's a <see cref="T:dnSpy.Contracts.Files.TreeView.IDnSpyFileNode"/> but not a
            <see cref="T:dnSpy.Contracts.Files.TreeView.IAssemblyFileNode"/> or a <see cref="T:dnSpy.Contracts.Files.TreeView.IModuleFileNode"/>.
            </summary>
            <param name="file">File</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter.GetResult(System.String,dnSpy.Contracts.Files.IDnSpyFile)">
            <summary>
            Returns a filter result. Called if it's a <see cref="T:dnSpy.Contracts.Files.TreeView.INamespaceNode"/>
            </summary>
            <param name="ns">Namespace</param>
            <param name="owner">Owner file</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter.GetResult(dnlib.DotNet.TypeDef)">
            <summary>
            Returns a filter result. Called if it's a <see cref="T:dnSpy.Contracts.Files.TreeView.ITypeNode"/>
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter.GetResult(dnlib.DotNet.FieldDef)">
            <summary>
            Returns a filter result. Called if it's a <see cref="T:dnSpy.Contracts.Files.TreeView.IFieldNode"/>
            </summary>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter.GetResult(dnlib.DotNet.MethodDef)">
            <summary>
            Returns a filter result. Called if it's a <see cref="T:dnSpy.Contracts.Files.TreeView.IMethodNode"/>
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter.GetResult(dnlib.DotNet.PropertyDef)">
            <summary>
            Returns a filter result. Called if it's a <see cref="T:dnSpy.Contracts.Files.TreeView.IPropertyNode"/>
            </summary>
            <param name="prop">Property</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter.GetResult(dnlib.DotNet.EventDef)">
            <summary>
            Returns a filter result. Called if it's a <see cref="T:dnSpy.Contracts.Files.TreeView.IEventNode"/>
            </summary>
            <param name="evt">Event</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter.GetResultBody(dnlib.DotNet.MethodDef)">
            <summary>
            Returns a filter result for a method's body
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter.GetResultParamDefs(dnlib.DotNet.MethodDef)">
            <summary>
            Returns a filter result for a method's <see cref="T:dnlib.DotNet.ParamDef"/>s
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter.GetResult(dnlib.DotNet.MethodDef,dnlib.DotNet.ParamDef)">
            <summary>
            Returns a filter result for a method's <see cref="T:dnlib.DotNet.ParamDef"/>
            </summary>
            <param name="method">Method</param>
            <param name="param">Parameter</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter.GetResultLocals(dnlib.DotNet.MethodDef)">
            <summary>
            Returns a filter result for a method's <see cref="T:dnlib.DotNet.Emit.Local"/>s
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter.GetResult(dnlib.DotNet.MethodDef,dnlib.DotNet.Emit.Local)">
            <summary>
            Returns a filter result for a method's <see cref="T:dnlib.DotNet.Emit.Local"/>
            </summary>
            <param name="method">Method</param>
            <param name="local">Local</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter.GetResult(dnlib.DotNet.AssemblyRef)">
            <summary>
            Returns a filter result. Called if it's a <see cref="T:dnSpy.Contracts.Files.TreeView.IAssemblyReferenceNode"/>
            </summary>
            <param name="asmRef">Assembly reference</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter.GetResult(dnlib.DotNet.ModuleRef)">
            <summary>
            Returns a filter result. Called if it's a <see cref="T:dnSpy.Contracts.Files.TreeView.IModuleReferenceNode"/>
            </summary>
            <param name="modRef">Module reference</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter.GetResult(dnSpy.Contracts.Files.TreeView.IBaseTypeNode)">
            <summary>
            Returns a filter result. The input can be null.
            </summary>
            <param name="node">Node, can be null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter.GetResult(dnSpy.Contracts.Files.TreeView.IBaseTypeFolderNode)">
            <summary>
            Returns a filter result. The input can be null.
            </summary>
            <param name="node">Node, can be null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter.GetResult(dnSpy.Contracts.Files.TreeView.IDerivedTypeNode)">
            <summary>
            Returns a filter result. The input can be null.
            </summary>
            <param name="node">Node, can be null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter.GetResult(dnSpy.Contracts.Files.TreeView.IDerivedTypesFolderNode)">
            <summary>
            Returns a filter result. The input can be null.
            </summary>
            <param name="node">Node, can be null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter.GetResult(dnSpy.Contracts.Files.TreeView.IReferencesFolderNode)">
            <summary>
            Returns a filter result. The input can be null.
            </summary>
            <param name="node">Node, can be null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter.GetResult(dnSpy.Contracts.Files.TreeView.IResourcesFolderNode)">
            <summary>
            Returns a filter result. The input can be null.
            </summary>
            <param name="node">Node, can be null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter.GetResult(dnSpy.Contracts.Files.TreeView.Resources.IResourceNode)">
            <summary>
            Returns a filter result. The input can be null.
            </summary>
            <param name="node">Node, can be null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter.GetResult(dnSpy.Contracts.Files.TreeView.Resources.IResourceElementNode)">
            <summary>
            Returns a filter result. The input can be null.
            </summary>
            <param name="node">Node, can be null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter.GetResult(dnSpy.Contracts.Files.TreeView.IFileTreeNodeData)">
            <summary>
            Returns a filter result if it's any other <see cref="T:dnSpy.Contracts.Files.TreeView.IFileTreeNodeData"/> instance
            </summary>
            <param name="node">Node, can't be null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter.GetResultAttributes(dnlib.DotNet.IHasCustomAttribute)">
            <summary>
            Returns a filter result
            </summary>
            <param name="hca">Object with custom attributes</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IFileTreeNodeGroups">
            <summary>
            Contains default <see cref="T:dnSpy.Contracts.TreeView.ITreeNodeGroup"/> instances
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeNodeGroups.GetGroup(dnSpy.Contracts.Files.TreeView.FileTreeNodeGroupType)">
            <summary>
            Gets a <see cref="T:dnSpy.Contracts.TreeView.ITreeNodeGroup"/> instance
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IFileTreeView">
            <summary>
            File treeview
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeView.FileManager">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Files.IFileManager"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeView.TreeView">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.TreeView.ITreeView"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeView.DotNetImageManager">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Images.IDotNetImageManager"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeView.WpfCommands">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Controls.IWpfCommands"/> instance
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Files.TreeView.IFileTreeView.CollectionChanged">
            <summary>
            Raised when the collection gets changed
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Files.TreeView.IFileTreeView.NodesTextChanged">
            <summary>
            Raised when the node's text has changed
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Files.TreeView.IFileTreeView.NodeActivated">
            <summary>
            Raised when a node gets activated (eg. double clicked)
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Files.TreeView.IFileTreeView.SelectionChanged">
            <summary>
            Raised when selection has changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeView.RaiseNodeActivated(dnSpy.Contracts.Files.TreeView.IFileTreeNodeData)">
            <summary>
            Should only be called by the node that gets activated. Returns true if someone handled it.
            </summary>
            <param name="node">The activated node (should be the caller)</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeView.CreateNode(dnSpy.Contracts.Files.TreeView.IDnSpyFileNode,dnSpy.Contracts.Files.IDnSpyFile)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Files.TreeView.IDnSpyFileNode"/> instance. This will internally call all
            <see cref="T:dnSpy.Contracts.Files.TreeView.IDnSpyFileNodeCreator"/>s it can find.
            </summary>
            <param name="owner">Owner node or null if owner is the root node</param>
            <param name="file">New file</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeView.Remove(System.Collections.Generic.IEnumerable{dnSpy.Contracts.Files.TreeView.IDnSpyFileNode})">
            <summary>
            Removes <paramref name="nodes"/>. They must be top nodes (eg. <see cref="T:dnSpy.Contracts.Files.TreeView.IAssemblyFileNode"/>s)
            </summary>
            <param name="nodes">Nodes</param>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeView.FindNode(System.Object)">
            <summary>
            Returns a node or null if none could be found
            </summary>
            <param name="ref">Reference, eg. a <see cref="T:dnlib.DotNet.IMemberRef"/></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeView.FindNode(dnSpy.Contracts.Files.IDnSpyFile)">
            <summary>
            Returns a <see cref="T:dnSpy.Contracts.Files.TreeView.IDnSpyFileNode"/> node or null if none could be found
            </summary>
            <param name="file">File</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeView.FindNode(dnlib.DotNet.AssemblyDef)">
            <summary>
            Returns a <see cref="T:dnSpy.Contracts.Files.TreeView.IAssemblyFileNode"/> node or null if none could be found
            </summary>
            <param name="assembly">Assembly</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeView.FindNode(dnlib.DotNet.ModuleDef)">
            <summary>
            Returns a <see cref="T:dnSpy.Contracts.Files.TreeView.IModuleFileNode"/> node or null if none could be found
            </summary>
            <param name="module">Module</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeView.FindNode(dnlib.DotNet.TypeDef)">
            <summary>
            Returns a <see cref="T:dnSpy.Contracts.Files.TreeView.ITypeNode"/> node or null if none could be found
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeView.FindNode(dnlib.DotNet.MethodDef)">
            <summary>
            Returns a <see cref="T:dnSpy.Contracts.Files.TreeView.IMethodNode"/> node or null if none could be found
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeView.FindNode(dnlib.DotNet.FieldDef)">
            <summary>
            Returns a <see cref="T:dnSpy.Contracts.Files.TreeView.IFieldNode"/> node or null if none could be found
            </summary>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeView.FindNode(dnlib.DotNet.PropertyDef)">
            <summary>
            Returns a <see cref="T:dnSpy.Contracts.Files.TreeView.IPropertyNode"/> node or null if none could be found
            </summary>
            <param name="property">Property</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeView.FindNode(dnlib.DotNet.EventDef)">
            <summary>
            Returns a <see cref="T:dnSpy.Contracts.Files.TreeView.IEventNode"/> node or null if none could be found
            </summary>
            <param name="event">Event</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeView.FindNamespaceNode(dnSpy.Contracts.Files.IDnSpyFile,System.String)">
            <summary>
            Returns a <see cref="T:dnSpy.Contracts.Files.TreeView.INamespaceNode"/> node or null if none could be found
            </summary>
            <param name="module">Owner module</param>
            <param name="namespace">Namespace</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeView.FileTreeNodeGroups">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Files.TreeView.IFileTreeNodeGroups"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeView.GetAllModuleNodes">
            <summary>
            Gets all <see cref="T:dnSpy.Contracts.Files.TreeView.IModuleFileNode"/>s
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeView.GetAllCreatedDnSpyFileNodes">
            <summary>
            Gets all created <see cref="T:dnSpy.Contracts.Files.TreeView.IDnSpyFileNode"/>s
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeView.AddNode(dnSpy.Contracts.Files.TreeView.IDnSpyFileNode,System.Int32)">
            <summary>
            Adds <paramref name="fileNode"/> to the list
            </summary>
            <param name="fileNode">Node</param>
            <param name="index">Index or -1</param>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeView.SetLanguage(dnSpy.Contracts.Languages.ILanguage)">
            <summary>
            Sets language
            </summary>
            <param name="language"></param>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeView.Dispose">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeView.SortTopNodes">
            <summary>
            Sorts all files
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeView.CanSortTopNodes">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Files.TreeView.IFileTreeView.SortTopNodes"/> can be called
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IFileTreeViewCreator">
            <summary>
            <see cref="T:dnSpy.Contracts.Files.TreeView.IFileTreeView"/> creator
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IFileTreeViewCreator.Create(dnSpy.Contracts.Files.TreeView.IFileTreeNodeFilter)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Files.TreeView.IFileTreeView"/> instance
            </summary>
            <param name="filter">Filter or null</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IFileTreeViewSettings">
            <summary>
            <see cref="T:dnSpy.Contracts.Files.TreeView.IFileTreeView"/> settings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeViewSettings.SyntaxHighlight">
            <summary>
            true to syntax highlight the treeview
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeViewSettings.SingleClickExpandsTreeViewChildren">
            <summary>
            true causes single clicks to expand children, false requires a double click
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeViewSettings.ShowAssemblyVersion">
            <summary>
            true to show assembly version when printing assembly nodes
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeViewSettings.ShowAssemblyPublicKeyToken">
            <summary>
            true to show assembly public key token when printing assembly nodes
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeViewSettings.ShowToken">
            <summary>
            true to show tokens
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeViewSettings.DeserializeResources">
            <summary>
            true to deserialize resources
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeViewSettings.MemberKind0">
            <summary>Gets 0th member</summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeViewSettings.MemberKind1">
            <summary>Gets 1st member</summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeViewSettings.MemberKind2">
            <summary>Gets 2nd member</summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeViewSettings.MemberKind3">
            <summary>Gets 3rd member</summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IFileTreeViewSettings.MemberKind4">
            <summary>Gets 4th member</summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IMessageNode">
            <summary>
            A message node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IMessageNode.Message">
            <summary>
            Gets the message
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IMethodNode">
            <summary>
            A method node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IMethodNode.MethodDef">
            <summary>
            Gets the method
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IModuleFileNode">
            <summary>
            A .NET module file
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IModuleFileNode.DnSpyFile">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Files.IDnSpyFile"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IModuleFileNode.Create(System.String)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.TreeView.INamespaceNode"/>
            </summary>
            <param name="name">Name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IModuleFileNode.FindNode(System.String)">
            <summary>
            Returns an existing <see cref="T:dnSpy.Contracts.Files.TreeView.INamespaceNode"/> instance or null
            </summary>
            <param name="ns">Namespace</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IModuleReferenceNode">
            <summary>
            A module reference node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IModuleReferenceNode.ModuleRef">
            <summary>
            Gets the module reference
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.INamespaceNode">
            <summary>
            A namespace node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.INamespaceNode.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.INamespaceNode.Create(dnlib.DotNet.TypeDef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.TreeView.ITypeNode"/>
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IPEFileNode">
            <summary>
            A PE file (but not a .NET file)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IPEFileNode.IsExe">
            <summary>
            true if it's an .exe file, false if it's a .dll file
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IPropertyNode">
            <summary>
            A property node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.IPropertyNode.PropertyDef">
            <summary>
            Gets the property
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IPropertyNode.Create(dnlib.DotNet.MethodDef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.TreeView.IMethodNode"/>, a getter, setter, or an other property method
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IReferencesFolderNode">
            <summary>
            References node
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IReferencesFolderNode.Create(dnlib.DotNet.AssemblyRef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.TreeView.IAssemblyReferenceNode"/>
            </summary>
            <param name="asmRef">Assembly reference</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.IReferencesFolderNode.Create(dnlib.DotNet.ModuleRef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.TreeView.IModuleReferenceNode"/>
            </summary>
            <param name="modRef">Module reference</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IResourcesFolderNode">
            <summary>
            Resources node
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.ITypeNode">
            <summary>
            A type node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.ITypeNode.TypeDef">
            <summary>
            Gets the type
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.ITypeNode.Create(dnlib.DotNet.MethodDef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.TreeView.IMethodNode"/>
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.ITypeNode.Create(dnlib.DotNet.PropertyDef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.TreeView.IPropertyNode"/>
            </summary>
            <param name="property">Property</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.ITypeNode.Create(dnlib.DotNet.EventDef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.TreeView.IEventNode"/>
            </summary>
            <param name="event">Event</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.ITypeNode.Create(dnlib.DotNet.FieldDef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.TreeView.IFieldNode"/>
            </summary>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.ITypeNode.Create(dnlib.DotNet.TypeDef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.TreeView.ITypeNode"/>
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.IUnknownFileNode">
            <summary>
            Unknown file (not a PE or .NET file)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.MemberKind">
            <summary>
            Order of members in the treeview
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.MemberKind.NestedTypes">
            <summary>Nested types</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.MemberKind.Fields">
            <summary>Fields</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.MemberKind.Events">
            <summary>Events</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.MemberKind.Properties">
            <summary>Properties</summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.MemberKind.Methods">
            <summary>Methods</summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.NodePathName">
            <summary>
            Node path name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.NodePathName.Guid">
            <summary>
            Gets the guid
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.NodePathName.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.NodePathName.#ctor(System.Guid,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="guid">Guid of node (<see cref="P:dnSpy.Contracts.TreeView.ITreeNodeData.Guid"/>)</param>
            <param name="name">Extra data if needed or null</param>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.NodePathName.Equals(dnSpy.Contracts.Files.TreeView.NodePathName)">
            <summary>
            Equals()
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.NodePathName.Equals(System.Object)">
            <summary>
            Equals()
            </summary>
            <param name="obj">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.NodePathName.GetHashCode">
            <summary>
            GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.NodePathName.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.NotifyFileTreeViewCollection">
            <summary>
            Event type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.NotifyFileTreeViewCollection.Clear">
            <summary>
            All file nodes have been cleared
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.NotifyFileTreeViewCollection.Add">
            <summary>
            A new file node was added
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.NotifyFileTreeViewCollection.Remove">
            <summary>
            A file node was removed
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.NotifyFileTreeViewCollectionChangedEventArgs">
            <summary>
            Event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.NotifyFileTreeViewCollectionChangedEventArgs.Type">
            <summary>
            Event type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.NotifyFileTreeViewCollectionChangedEventArgs.Nodes">
            <summary>
            All file nodes
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.NotifyFileTreeViewCollectionChangedEventArgs.CreateClear(dnSpy.Contracts.Files.TreeView.IDnSpyFileNode[])">
            <summary>
            Creates a <see cref="F:dnSpy.Contracts.Files.TreeView.NotifyFileTreeViewCollection.Clear"/> instance
            </summary>
            <param name="clearedFiles">All cleared files</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.NotifyFileTreeViewCollectionChangedEventArgs.CreateAdd(dnSpy.Contracts.Files.TreeView.IDnSpyFileNode)">
            <summary>
            Creates a <see cref="F:dnSpy.Contracts.Files.TreeView.NotifyFileTreeViewCollection.Add"/> instance
            </summary>
            <param name="file">Added file</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.NotifyFileTreeViewCollectionChangedEventArgs.CreateRemove(dnSpy.Contracts.Files.TreeView.IDnSpyFileNode[])">
            <summary>
            Creates a <see cref="F:dnSpy.Contracts.Files.TreeView.NotifyFileTreeViewCollection.Remove"/> instance
            </summary>
            <param name="files">Removed files</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.Resources.IBuiltInResourceElementNode">
            <summary>
            A resource created from a <see cref="T:dnlib.DotNet.Resources.ResourceElement"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.Resources.IImageResourceElementNode">
            <summary>
            A resource node created from an image
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.Resources.IImageResourceNode">
            <summary>
            A resource node created from an image
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.Resources.ImageListOptions">
            <summary>
            <see cref="T:System.Windows.Forms.ImageList"/> options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.Resources.ImageListOptions.Name">
            <summary>
            Gets/sets the name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.Resources.ImageListOptions.ColorDepth">
            <summary>
            Gets/sets the color depth
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.Resources.ImageListOptions.ImageSize">
            <summary>
            Gets/sets the image size
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.Resources.ImageListOptions.TransparentColor">
            <summary>
            Gets/sets the transparent color
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.Resources.ImageListOptions.ImageSources">
            <summary>
            Gets the images
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.Resources.ImageListOptions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.Resources.ImageListOptions.#ctor(dnSpy.Contracts.Files.TreeView.Resources.ImageListOptions)">
            <summary>
            Constructor
            </summary>
            <param name="other">Other instance</param>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.Resources.IResourceDataProvider">
            <summary>
            Implemented by all resource nodes, and contains all raw data, RVA, and size
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.Resources.IResourceDataProvider.RVA">
            <summary>
            RVA of resource or 0
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.Resources.IResourceDataProvider.FileOffset">
            <summary>
            File offset of resource or 0
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.Resources.IResourceDataProvider.Length">
            <summary>
            Length of the resource
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.Resources.IResourceDataProvider.GetResourceData(dnSpy.Contracts.Files.TreeView.Resources.ResourceDataType)">
            <summary>
            Gets the resource data
            </summary>
            <param name="type">Type of data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.Resources.IResourceDataProvider.WriteShort(dnSpy.Decompiler.Shared.ITextOutput,dnSpy.Contracts.Languages.ILanguage,System.Boolean)">
            <summary>
            Write a short string (typically one line) to <paramref name="output"/>
            </summary>
            <param name="output">Output</param>
            <param name="language">Language</param>
            <param name="showOffset">true to write offset and size of resource in the PE image, if
            that info is available</param>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.Resources.IResourceDataProvider.ToString(System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Used by the searcher. Should only return a string if the data is text or compiled text.
            I.e., null should be returned if it's an <see cref="T:System.Int32"/>, but a string if it's eg. an
            XML doc.
            </summary>
            <param name="token">Cancellation token</param>
            <param name="canDecompile">true if the callee can decompile (eg. XAML), false otherwise</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.Resources.IResourceElementNode">
            <summary>
            A resource created from a <see cref="P:dnSpy.Contracts.Files.TreeView.Resources.IResourceElementNode.ResourceElement"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.Resources.IResourceElementNode.ResourceElement">
            <summary>
            Gets the resource element
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.Resources.IResourceElementNode.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.Resources.IResourceElementNode.CheckCanUpdateData(dnlib.DotNet.Resources.ResourceElement)">
            <summary>
            Checks whether <see cref="M:dnSpy.Contracts.Files.TreeView.Resources.IResourceElementNode.UpdateData(dnlib.DotNet.Resources.ResourceElement)"/> can execute. Used by the
            assembly editor. Returns null or an empty string if the data can be updated, else an
            error string that can be shown to the user.
            </summary>
            <param name="newResElem">New data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.Resources.IResourceElementNode.UpdateData(dnlib.DotNet.Resources.ResourceElement)">
            <summary>
            Updates the internal resource data. Must only be called if
            <see cref="M:dnSpy.Contracts.Files.TreeView.Resources.IResourceElementNode.CheckCanUpdateData(dnlib.DotNet.Resources.ResourceElement)"/> returned true. Used by the assembly
            editor.
            </summary>
            <param name="newResElem">New data</param>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.Resources.IResourceElementSetNode">
            <summary>
            A resource node created from a <see cref="T:dnlib.DotNet.Resources.ResourceElementSet"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.Resources.IResourceElementSetNode.RegenerateEmbeddedResource">
            <summary>
            Regenerate the <see cref="T:dnlib.DotNet.EmbeddedResource"/>. Used by the assembly editor.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.Resources.IResourceNode">
            <summary>
            A resource created from a <see cref="P:dnSpy.Contracts.Files.TreeView.Resources.IResourceNode.Resource"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.Resources.IResourceNode.Resource">
            <summary>
            Gets the resource
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.Resources.IResourceNode.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.Resources.IResourceNodeCreator">
            <summary>
            Creates resource nodes. Use <see cref="T:dnSpy.Contracts.Files.TreeView.Resources.ExportResourceNodeCreatorAttribute"/> to export an
            instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.Resources.IResourceNodeCreator.Create(dnlib.DotNet.ModuleDef,dnlib.DotNet.Resource,dnSpy.Contracts.TreeView.ITreeNodeGroup)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.TreeView.Resources.IResourceNode"/> instance or returns null
            </summary>
            <param name="module">Owner module</param>
            <param name="resource">Resource</param>
            <param name="treeNodeGroup">Group</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.Resources.IResourceNodeCreator.Create(dnlib.DotNet.ModuleDef,dnlib.DotNet.Resources.ResourceElement,dnSpy.Contracts.TreeView.ITreeNodeGroup)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.TreeView.Resources.IResourceElementNode"/> instance or returns null
            </summary>
            <param name="module">Owner module</param>
            <param name="resourceElement">Resource</param>
            <param name="treeNodeGroup">Group</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.Resources.IResourceNodeCreatorMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.Resources.IResourceNodeCreatorMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Files.TreeView.Resources.ExportResourceNodeCreatorAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.Resources.ExportResourceNodeCreatorAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Files.TreeView.Resources.IResourceNodeCreator"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.Resources.ExportResourceNodeCreatorAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.Resources.ExportResourceNodeCreatorAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.Resources.IResourceNodeFactory">
            <summary>
            Creates resource nodes
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.Resources.IResourceNodeFactory.Create(dnlib.DotNet.ModuleDef,dnlib.DotNet.Resource,dnSpy.Contracts.TreeView.ITreeNodeGroup)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.TreeView.Resources.IResourceNode"/> instance. Pass it to <see cref="M:dnSpy.Contracts.TreeView.ITreeView.Create(dnSpy.Contracts.TreeView.ITreeNodeData)"/>
            </summary>
            <param name="module">Owner module</param>
            <param name="resource">Resource</param>
            <param name="treeNodeGroup">Group</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.Resources.IResourceNodeFactory.Create(dnlib.DotNet.ModuleDef,dnlib.DotNet.Resources.ResourceElement,dnSpy.Contracts.TreeView.ITreeNodeGroup)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Files.TreeView.Resources.IResourceElementNode"/> instance. Pass it to <see cref="M:dnSpy.Contracts.TreeView.ITreeView.Create(dnSpy.Contracts.TreeView.ITreeNodeData)"/>
            </summary>
            <param name="module">Owner module</param>
            <param name="resourceElement">Resource</param>
            <param name="treeNodeGroup">Group</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.Resources.ISerializedImageListStreamerResourceElementNode">
            <summary>
            A resource node created from a serialized <see cref="T:System.Windows.Forms.ImageListStreamer"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.Resources.ISerializedImageListStreamerResourceElementNode.ImageListOptions">
            <summary>
            Gets the <see cref="T:System.Windows.Forms.ImageList"/> options
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.Resources.ISerializedImageResourceElementNode">
            <summary>
            A resource node created from a serialized image (BMP or ICO)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.Resources.ISerializedImageResourceElementNode.GetAsRawImage">
            <summary>
            Gets the raw <see cref="T:dnlib.DotNet.Resources.ResourceElement"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.Resources.ISerializedResourceElementNode">
            <summary>
            A serialized <see cref="T:dnSpy.Contracts.Files.TreeView.Resources.IResourceElementNode"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.Resources.ISerializedResourceElementNode.CanDeserialize">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Files.TreeView.Resources.ISerializedResourceElementNode.Deserialize"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.Resources.ISerializedResourceElementNode.Deserialize">
            <summary>
            Deserializes the data
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.Resources.IUnknownResourceNode">
            <summary>
            A <see cref="T:dnSpy.Contracts.Files.TreeView.Resources.IResourceNode"/> created from an unknown resource
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.Resources.IUnknownSerializedResourceElementNode">
            <summary>
            Unknown serialized <see cref="T:dnSpy.Contracts.Files.TreeView.Resources.IResourceElementNode"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.Resources.ResourceData">
            <summary>
            Raw resource data
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Files.TreeView.Resources.ResourceData.Name">
            <summary>
            Name of resource
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.Resources.ResourceData.GetStream(System.Threading.CancellationToken)">
            <summary>
            Gets the stream. Can be called in any thread.
            </summary>
            <param name="token">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Files.TreeView.Resources.ResourceData.#ctor(System.String,System.Func{System.Threading.CancellationToken,System.IO.Stream})">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
            <param name="getStream">Returns the stream. It can be called in any thread.</param>
        </member>
        <member name="T:dnSpy.Contracts.Files.TreeView.Resources.ResourceDataType">
            <summary>
            <see cref="T:dnSpy.Contracts.Files.TreeView.Resources.ResourceData"/> type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.Resources.ResourceDataType.Deserialized">
            <summary>
            Deserialized data
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Files.TreeView.Resources.ResourceDataType.Serialized">
            <summary>
            Serialized data
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Highlighting.ISyntaxHighlightOutput">
            <summary>
            Syntax highlight output
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Highlighting.ISyntaxHighlightOutput.Write(System.String,dnSpy.Decompiler.Shared.TextTokenKind)">
            <summary>
            Writes a string
            </summary>
            <param name="s">String</param>
            <param name="tokenKind">Type</param>
        </member>
        <member name="T:dnSpy.Contracts.Images.BackgroundType">
            <summary>
            Image background
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Images.IDotNetImageManager">
            <summary>
            Image manager for .NET fields, types, etc
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageManager.GetImageReference(dnlib.DotNet.ModuleDef)">
            <summary>
            Gets an image
            </summary>
            <param name="mod">Module</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageManager.GetImageReference(dnlib.DotNet.TypeDef)">
            <summary>
            Gets an image
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageManager.GetImageReference(dnlib.DotNet.FieldDef)">
            <summary>
            Gets an image
            </summary>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageManager.GetImageReference(dnlib.DotNet.MethodDef)">
            <summary>
            Gets an image
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageManager.GetImageReference(dnlib.DotNet.EventDef)">
            <summary>
            Gets an image
            </summary>
            <param name="event">Event</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageManager.GetImageReference(dnlib.DotNet.PropertyDef)">
            <summary>
            Gets an image
            </summary>
            <param name="property">Property</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageManager.GetImageReferenceModuleRef">
            <summary>
            Gets a module reference image
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageManager.GetImageReference(dnlib.DotNet.AssemblyDef)">
            <summary>
            Gets an image
            </summary>
            <param name="assembly">Assembly</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageManager.GetImageReferenceAssemblyRef">
            <summary>
            Gets an assembly reference image
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageManager.GetImageReferenceGenericParameter">
            <summary>
            Gets a generic parameter image
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageManager.GetImageReferenceLocal">
            <summary>
            Gets a local image
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageManager.GetImageReferenceParameter">
            <summary>
            Gets a parameter image
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageManager.GetImageReferenceType">
            <summary>
            Gets a type image
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageManager.GetImageReferenceMethod">
            <summary>
            Gets a method image
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageManager.GetImageReferenceField">
            <summary>
            Gets a field image
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageManager.GetImageReference(dnlib.PE.IPEImage)">
            <summary>
            Gets an image
            </summary>
            <param name="peImage">PE image</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageManager.GetNamespaceImageReference">
            <summary>
            Gets a namespace image
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Images.IImageManager">
            <summary>
            Image manager
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Images.IImageManager.GetImage(System.Reflection.Assembly,System.String,dnSpy.Contracts.Images.BackgroundType)">
            <summary>
            Returns an image
            </summary>
            <param name="asm">Assembly of image</param>
            <param name="icon">Name of image, without the .png extension. Must be in the images/ folder</param>
            <param name="bgType">Background type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IImageManager.GetImage(System.Reflection.Assembly,System.String,System.Windows.Media.Color)">
            <summary>
            Returns an image
            </summary>
            <param name="asm">Assembly of image</param>
            <param name="icon">Name of image, without the .png extension. Must be in the images/ folder</param>
            <param name="bgColor">Background color</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Images.ImageReference">
            <summary>
            Image reference
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Images.ImageReference.Assembly">
            <summary>
            Assembly of image
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Images.ImageReference.Name">
            <summary>
            Name of image
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Images.ImageReference.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="asm">Assembly of image</param>
            <param name="name">Name of image</param>
        </member>
        <member name="T:dnSpy.Contracts.Languages.BamlDecompilerOptions">
            <summary>
            Baml decompiler options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.BamlDecompilerOptions.InternalClassModifier">
            <summary>
            x:ClassModifier value string when type is internal
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Languages.BamlDecompilerOptions.Create(dnSpy.Contracts.Languages.ILanguage)">
            <summary>
            Creates a new instance
            </summary>
            <param name="language">Language</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Languages.BamlDecompilerOptions.CreateCSharp">
            <summary>
            Creates a new instance with C# values
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Languages.BamlDecompilerOptions.CreateVB">
            <summary>
            Creates a new instance with VB values
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Languages.BamlDecompilerOptions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Languages.DecompilationContext">
            <summary>
            Decompilation options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.DecompilationContext.CancellationToken">
            <summary />
        </member>
        <member name="P:dnSpy.Contracts.Languages.DecompilationContext.IsBodyModified">
            <summary>
            Returns true if the method body has been modified
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.DecompilationContext.GetDisableAssemblyLoad">
            <summary>
            Disables assembly loading until Dispose() gets called
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.DecompilationContext.CalculateILRanges">
            <summary>
            true to calculate ILRanges. Used when debugging
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Languages.DecompilationContext.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Languages.DecompilationContext.DisableAssemblyLoad">
            <summary />
        </member>
        <member name="M:dnSpy.Contracts.Languages.DecompilationContext.GetOrCreate``1">
            <summary>
            Gets or creates a cached object
            </summary>
            <typeparam name="T">Type</typeparam>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Languages.DecompilationContext.GetOrCreate``1(System.Func{``0})">
            <summary>
            Gets or creates a cached object
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="creator">Creates the object if necessary</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Languages.DecompilationType">
            <summary>
            Decompilation type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilationType.PartialType">
            <summary>
            Decompile a partial type, data is a <see cref="T:dnSpy.Contracts.Languages.DecompilePartialType"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilationType.AssemblyInfo">
            <summary>
            Decompiles AssemblyInfo.{cs,vb}, data is a <see cref="T:dnSpy.Contracts.Languages.DecompileAssemblyInfo"/> instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Languages.DecompileAssemblyInfo">
            <summary>
            Decompiles AssemblyInfo.{cs,vb}
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.DecompileAssemblyInfo.Module">
            <summary>
            Gets the module
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Languages.DecompileAssemblyInfo.#ctor(dnlib.DotNet.ModuleDef,dnSpy.Decompiler.Shared.ITextOutput,dnSpy.Contracts.Languages.DecompilationContext)">
            <summary>
            Constructor
            </summary>
            <param name="module">Type</param>
            <param name="output">Output</param>
            <param name="ctx">Context</param>
        </member>
        <member name="T:dnSpy.Contracts.Languages.DecompilePartialType">
            <summary>
            Decompiles a partial type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.DecompilePartialType.Type">
            <summary>
            Type to decompile
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.DecompilePartialType.AddPartialKeyword">
            <summary>
            true to add the 'partial' keyword. It's true by default.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.DecompilePartialType.Definitions">
            <summary>
            All definitions that must be hidden or shown must be added here
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.DecompilePartialType.ShowDefinitions">
            <summary>
            true if members in <see cref="P:dnSpy.Contracts.Languages.DecompilePartialType.Definitions"/> should be shown, false if they should be removed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.DecompilePartialType.UseUsingDeclarations">
            <summary>
            true to use using declarations, false to use full namespaces (eg. useful when decompiling
            WinForms designer files)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.DecompilePartialType.InterfacesToRemove">
            <summary>
            Interfaces to remove from the type
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Languages.DecompilePartialType.#ctor(dnlib.DotNet.TypeDef,dnSpy.Decompiler.Shared.ITextOutput,dnSpy.Contracts.Languages.DecompilationContext)">
            <summary>
            Constructor
            </summary>
            <param name="type">Type</param>
            <param name="output">Output</param>
            <param name="ctx">Context</param>
        </member>
        <member name="T:dnSpy.Contracts.Languages.DecompilerOptionConstants">
            <summary>
            <see cref="T:dnSpy.Contracts.Languages.IDecompilerOption"/> constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.ShowILComments_GUID">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.ShowILComments_NAME">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.ShowXmlDocumentation_GUID">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.ShowXmlDocumentation_NAME">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.ShowTokenAndRvaComments_GUID">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.ShowTokenAndRvaComments_NAME">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.ShowILBytes_GUID">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.ShowILBytes_NAME">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.SortMembers_GUID">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.SortMembers_NAME">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.MemberOrder_GUID">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.MemberOrder_NAME">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.AnonymousMethods_GUID">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.AnonymousMethods_NAME">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.ExpressionTrees_GUID">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.ExpressionTrees_NAME">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.YieldReturn_GUID">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.YieldReturn_NAME">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.AsyncAwait_GUID">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.AsyncAwait_NAME">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.AutomaticProperties_GUID">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.AutomaticProperties_NAME">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.AutomaticEvents_GUID">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.AutomaticEvents_NAME">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.UsingStatement_GUID">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.UsingStatement_NAME">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.ForEachStatement_GUID">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.ForEachStatement_NAME">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.LockStatement_GUID">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.LockStatement_NAME">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.SwitchStatementOnString_GUID">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.SwitchStatementOnString_NAME">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.UsingDeclarations_GUID">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.UsingDeclarations_NAME">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.QueryExpressions_GUID">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.QueryExpressions_NAME">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.FullyQualifyAmbiguousTypeNames_GUID">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.FullyQualifyAmbiguousTypeNames_NAME">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.FullyQualifyAllTypes_GUID">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.FullyQualifyAllTypes_NAME">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.UseDebugSymbols_GUID">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.UseDebugSymbols_NAME">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.ObjectOrCollectionInitializers_GUID">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.ObjectOrCollectionInitializers_NAME">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.RemoveEmptyDefaultConstructors_GUID">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.RemoveEmptyDefaultConstructors_NAME">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.IntroduceIncrementAndDecrement_GUID">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.IntroduceIncrementAndDecrement_NAME">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.MakeAssignmentExpressions_GUID">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.MakeAssignmentExpressions_NAME">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.AlwaysGenerateExceptionVariableForCatchBlocks_GUID">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.AlwaysGenerateExceptionVariableForCatchBlocks_NAME">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.ForceShowAllMembers_GUID">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.ForceShowAllMembers_NAME">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.SortSystemUsingStatementsFirst_GUID">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.SortSystemUsingStatementsFirst_NAME">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.MaxArrayElements_GUID">
            <summary />
        </member>
        <member name="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.MaxArrayElements_NAME">
            <summary />
        </member>
        <member name="T:dnSpy.Contracts.Languages.DecompileTypeBase">
            <summary>
            Base class of <see cref="T:dnSpy.Contracts.Languages.DecompilationType"/> data
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.DecompileTypeBase.Output">
            <summary>
            Output
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.DecompileTypeBase.Context">
            <summary>
            Options
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Languages.DecompileTypeBase.#ctor(dnSpy.Decompiler.Shared.ITextOutput,dnSpy.Contracts.Languages.DecompilationContext)">
            <summary>
            Constructor
            </summary>
            <param name="output">Output</param>
            <param name="ctx">Context</param>
        </member>
        <member name="T:dnSpy.Contracts.Languages.IBamlDecompiler">
            <summary>
            Baml to xaml decompiler
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Languages.IBamlDecompiler.Decompile(dnlib.DotNet.ModuleDef,System.Byte[],System.Threading.CancellationToken,dnSpy.Contracts.Languages.BamlDecompilerOptions,System.IO.Stream)">
            <summary>
            Decompiles baml to xaml. Returns all assembly references.
            </summary>
            <param name="module">Module</param>
            <param name="data">Baml data</param>
            <param name="token">Cancellation token</param>
            <param name="bamlDecompilerOptions">Options</param>
            <param name="output">Output stream</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Languages.IDecompilerOption">
            <summary>
            Decompiler option
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.IDecompilerOption.Guid">
            <summary>
            Guid, eg. <see cref="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.ShowILComments_GUID"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.IDecompilerOption.Name">
            <summary>
            Name or null, eg. <see cref="F:dnSpy.Contracts.Languages.DecompilerOptionConstants.ShowILComments_NAME"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.IDecompilerOption.Description">
            <summary>
            Description or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.IDecompilerOption.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.IDecompilerOption.Value">
            <summary>
            Gets/sets the value
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Languages.IDecompilerSettings">
            <summary>
            Decompiler settings. The class must override <see cref="M:System.Object.GetHashCode"/> and
            <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Languages.IDecompilerSettings.Clone">
            <summary>
            Clones the settings
            </summary>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Languages.IDecompilerSettings.Options">
            <summary>
            Gets all options
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Languages.DecomplierSettingsExtensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Languages.DecomplierSettingsExtensions.TryGetOption(dnSpy.Contracts.Languages.IDecompilerSettings,System.Guid)">
            <summary>
            Returns an option or null
            </summary>
            <param name="self">This</param>
            <param name="guid">Guid</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Languages.DecomplierSettingsExtensions.TryGetOption(dnSpy.Contracts.Languages.IDecompilerSettings,System.String)">
            <summary>
            Returns an option or null
            </summary>
            <param name="self">This</param>
            <param name="name">Name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Languages.DecomplierSettingsExtensions.GetBoolean(dnSpy.Contracts.Languages.IDecompilerSettings,System.Guid)">
            <summary>
            Returns a boolean or false if the option doesn't exist
            </summary>
            <param name="self">This</param>
            <param name="guid">Guid</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Languages.DecomplierSettingsExtensions.GetBoolean(dnSpy.Contracts.Languages.IDecompilerSettings,System.String)">
            <summary>
            Returns a boolean or false if the option doesn't exist
            </summary>
            <param name="self">This</param>
            <param name="name">Name</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Languages.IDecompilerSettingsTab">
            <summary>
            Decompiler settings shown in the Decompiler tab
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.IDecompilerSettingsTab.Order">
            <summary>
            Gets the order, eg. <see cref="F:dnSpy.Contracts.Languages.LanguageConstants.ORDER_DECOMPILER_SETTINGS_ILSPY_CSHARP"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.IDecompilerSettingsTab.Name">
            <summary>
            Gets the name shown in the combobox, eg. "C# / VB" or "IL"
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.IDecompilerSettingsTab.UIObject">
            <summary>
            Gets the UI object
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Languages.IDecompilerSettingsTab.OnClosed(System.Boolean,dnSpy.Contracts.Settings.Dialog.IAppRefreshSettings)">
            <summary>
            Called when the dialog box has been closed
            </summary>
            <param name="saveSettings">true to save the settings, false to cancel any changes</param>
            <param name="appRefreshSettings">Used if <paramref name="saveSettings"/> is true. Add
            anything that needs to be refreshed, eg. re-decompile code</param>
        </member>
        <member name="T:dnSpy.Contracts.Languages.IDecompilerSettingsTabCreator">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Languages.IDecompilerSettingsTab"/> instances
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Languages.IDecompilerSettingsTabCreator.Create">
            <summary>
            Creates new <see cref="T:dnSpy.Contracts.Languages.IDecompilerSettingsTab"/> instances
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Languages.ILanguage">
            <summary>
            A language
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.ILanguage.Settings">
            <summary>
            Gets the settings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.ILanguage.GenericNameUI">
            <summary>
            Real name of the language, eg. "C#" if it's C#. See also <see cref="P:dnSpy.Contracts.Languages.ILanguage.UniqueNameUI"/>.
            It's used when the real language name must be shown to the user.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.ILanguage.UniqueNameUI">
            <summary>
            Language name shown to the user, and can contain extra info eg. "C# XYZ", see also
            <see cref="P:dnSpy.Contracts.Languages.ILanguage.GenericNameUI"/>.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.ILanguage.OrderUI">
            <summary>
            Order of language when shown to the user, eg. <see cref="F:dnSpy.Contracts.Languages.LanguageConstants.CSHARP_ILSPY_ORDERUI"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.ILanguage.GenericGuid">
            <summary>
            Language guid, eg. <see cref="F:dnSpy.Contracts.Languages.LanguageConstants.LANGUAGE_CSHARP"/>, see also <see cref="P:dnSpy.Contracts.Languages.ILanguage.UniqueGuid"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.ILanguage.UniqueGuid">
            <summary>
            Unique language guid, see also <see cref="P:dnSpy.Contracts.Languages.ILanguage.GenericGuid"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.ILanguage.FileExtension">
            <summary>
            File extension, eg. .cs, can't be null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.ILanguage.ProjectFileExtension">
            <summary>
            Project file extension, eg. .csproj or null if it's not supported
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Languages.ILanguage.WriteName(dnSpy.Contracts.Highlighting.ISyntaxHighlightOutput,dnlib.DotNet.TypeDef)">
            <summary>
            Writes a type name
            </summary>
            <param name="output">Output</param>
            <param name="type">Type</param>
        </member>
        <member name="M:dnSpy.Contracts.Languages.ILanguage.WriteName(dnSpy.Contracts.Highlighting.ISyntaxHighlightOutput,dnlib.DotNet.PropertyDef,System.Nullable{System.Boolean})">
            <summary>
            Writes a property name
            </summary>
            <param name="output">Output</param>
            <param name="property">Type</param>
            <param name="isIndexer">true if it's an indexer</param>
        </member>
        <member name="M:dnSpy.Contracts.Languages.ILanguage.WriteType(dnSpy.Contracts.Highlighting.ISyntaxHighlightOutput,dnlib.DotNet.ITypeDefOrRef,System.Boolean,dnlib.DotNet.ParamDef)">
            <summary>
            Writes a type name
            </summary>
            <param name="output">Output</param>
            <param name="type">Type</param>
            <param name="includeNamespace">true to include namespace</param>
            <param name="pd"><see cref="T:dnlib.DotNet.ParamDef"/> or null</param>
        </member>
        <member name="M:dnSpy.Contracts.Languages.ILanguage.Decompile(dnlib.DotNet.MethodDef,dnSpy.Decompiler.Shared.ITextOutput,dnSpy.Contracts.Languages.DecompilationContext)">
            <summary>
            Decompiles a method
            </summary>
            <param name="method">Method</param>
            <param name="output">Output</param>
            <param name="ctx">Context</param>
        </member>
        <member name="M:dnSpy.Contracts.Languages.ILanguage.Decompile(dnlib.DotNet.PropertyDef,dnSpy.Decompiler.Shared.ITextOutput,dnSpy.Contracts.Languages.DecompilationContext)">
            <summary>
            Decompiles a property
            </summary>
            <param name="property">Property</param>
            <param name="output">Output</param>
            <param name="ctx">Context</param>
        </member>
        <member name="M:dnSpy.Contracts.Languages.ILanguage.Decompile(dnlib.DotNet.FieldDef,dnSpy.Decompiler.Shared.ITextOutput,dnSpy.Contracts.Languages.DecompilationContext)">
            <summary>
            Decompiles a field
            </summary>
            <param name="field">Field</param>
            <param name="output">Output</param>
            <param name="ctx">Context</param>
        </member>
        <member name="M:dnSpy.Contracts.Languages.ILanguage.Decompile(dnlib.DotNet.EventDef,dnSpy.Decompiler.Shared.ITextOutput,dnSpy.Contracts.Languages.DecompilationContext)">
            <summary>
            Decompiles an event
            </summary>
            <param name="ev">Event</param>
            <param name="output">Output</param>
            <param name="ctx">Context</param>
        </member>
        <member name="M:dnSpy.Contracts.Languages.ILanguage.Decompile(dnlib.DotNet.TypeDef,dnSpy.Decompiler.Shared.ITextOutput,dnSpy.Contracts.Languages.DecompilationContext)">
            <summary>
            Decompiles a type
            </summary>
            <param name="type">Type</param>
            <param name="output">Output</param>
            <param name="ctx">Context</param>
        </member>
        <member name="M:dnSpy.Contracts.Languages.ILanguage.DecompileNamespace(System.String,System.Collections.Generic.IEnumerable{dnlib.DotNet.TypeDef},dnSpy.Decompiler.Shared.ITextOutput,dnSpy.Contracts.Languages.DecompilationContext)">
            <summary>
            Decompiles a namespace
            </summary>
            <param name="namespace">Namespace</param>
            <param name="types">Types in namespace</param>
            <param name="output">Output</param>
            <param name="ctx">Context</param>
        </member>
        <member name="M:dnSpy.Contracts.Languages.ILanguage.Decompile(dnlib.DotNet.AssemblyDef,dnSpy.Decompiler.Shared.ITextOutput,dnSpy.Contracts.Languages.DecompilationContext)">
            <summary>
            Decompiles an assembly
            </summary>
            <param name="asm">Assembly</param>
            <param name="output">Output</param>
            <param name="ctx">Context</param>
        </member>
        <member name="M:dnSpy.Contracts.Languages.ILanguage.Decompile(dnlib.DotNet.ModuleDef,dnSpy.Decompiler.Shared.ITextOutput,dnSpy.Contracts.Languages.DecompilationContext)">
            <summary>
            Decompiles a module
            </summary>
            <param name="mod">Module</param>
            <param name="output">Output</param>
            <param name="ctx">Context</param>
        </member>
        <member name="M:dnSpy.Contracts.Languages.ILanguage.WriteToolTip(dnSpy.Contracts.Highlighting.ISyntaxHighlightOutput,dnlib.DotNet.IMemberRef,dnlib.DotNet.IHasCustomAttribute)">
            <summary>
            Writes a tooltip
            </summary>
            <param name="output">Output</param>
            <param name="member">Member</param>
            <param name="typeAttributes">Type containing attributes, used to detect the dynamic types and out/ref params</param>
        </member>
        <member name="M:dnSpy.Contracts.Languages.ILanguage.WriteToolTip(dnSpy.Contracts.Highlighting.ISyntaxHighlightOutput,dnlib.DotNet.IVariable,System.String)">
            <summary>
            Writes a tooltip
            </summary>
            <param name="output">Output</param>
            <param name="variable">Local or argument</param>
            <param name="name">Name or null</param>
        </member>
        <member name="M:dnSpy.Contracts.Languages.ILanguage.Write(dnSpy.Contracts.Highlighting.ISyntaxHighlightOutput,dnlib.DotNet.IMemberRef,dnSpy.Contracts.Languages.SimplePrinterFlags)">
            <summary>
            Writes <paramref name="member"/> to <paramref name="output"/>
            </summary>
            <param name="output">Output</param>
            <param name="member">Member</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Languages.ILanguage.WriteCommentBegin(dnSpy.Decompiler.Shared.ITextOutput,System.Boolean)">
            <summary>
            Writes a comment prefix
            </summary>
            <param name="output">Output</param>
            <param name="addSpace">true to add a space before the comment prefix</param>
        </member>
        <member name="M:dnSpy.Contracts.Languages.ILanguage.WriteCommentEnd(dnSpy.Decompiler.Shared.ITextOutput,System.Boolean)">
            <summary>
            Writes a comment suffix
            </summary>
            <param name="output">Output</param>
            <param name="addSpace">true to add a space before the comment suffix (if it's written)</param>
        </member>
        <member name="M:dnSpy.Contracts.Languages.ILanguage.ShowMember(dnlib.DotNet.IMemberRef)">
            <summary>
            Returns true if the member is visible. Can be used to hide compiler generated types, methods etc
            </summary>
            <param name="member">Member</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Languages.ILanguage.CanDecompile(dnSpy.Contracts.Languages.DecompilationType)">
            <summary>
            Returns true if <paramref name="decompilationType"/> is supported and
            <see cref="M:dnSpy.Contracts.Languages.ILanguage.Decompile(dnSpy.Contracts.Languages.DecompilationType,System.Object)"/> can be called.
            </summary>
            <param name="decompilationType">Decompilation type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Languages.ILanguage.Decompile(dnSpy.Contracts.Languages.DecompilationType,System.Object)">
            <summary>
            Decompiles some data. Should only be called if <see cref="M:dnSpy.Contracts.Languages.ILanguage.CanDecompile(dnSpy.Contracts.Languages.DecompilationType)"/>
            returns true
            </summary>
            <param name="decompilationType">Decompilation type</param>
            <param name="data">Data, see <see cref="T:dnSpy.Contracts.Languages.DecompilationType"/></param>
        </member>
        <member name="T:dnSpy.Contracts.Languages.LanguageExtensionMethods">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Languages.LanguageExtensionMethods.WriteCommentLine(dnSpy.Contracts.Languages.ILanguage,dnSpy.Decompiler.Shared.ITextOutput,System.String)">
            <summary>
            Writes a comment and a new line
            </summary>
            <param name="self">This</param>
            <param name="output">Output</param>
            <param name="comment">Comment</param>
        </member>
        <member name="M:dnSpy.Contracts.Languages.LanguageExtensionMethods.GetHighlightingDefinition(dnSpy.Contracts.Languages.ILanguage)">
            <summary>
            Gets the <see cref="T:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition"/> instance to use for this language
            </summary>
            <param name="self">This</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Languages.ILanguageCreator">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Languages.ILanguage"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Languages.ILanguageCreator.Create">
            <summary>
            Creates all languages
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Languages.ILanguageManager">
            <summary>
            Language manager
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.ILanguageManager.AllLanguages">
            <summary>
            Gets all languages
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.ILanguageManager.Language">
            <summary>
            Current default language
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Languages.ILanguageManager.LanguageChanged">
            <summary>
            Raised when <see cref="P:dnSpy.Contracts.Languages.ILanguageManager.Language"/> has been updated
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Languages.ILanguageManager.Find(System.Guid)">
            <summary>
            Finds a <see cref="T:dnSpy.Contracts.Languages.ILanguage"/> instance. null is returned if it wasn't found
            </summary>
            <param name="guid">Language guid, see <see cref="P:dnSpy.Contracts.Languages.ILanguage.UniqueGuid"/> and <see cref="P:dnSpy.Contracts.Languages.ILanguage.GenericGuid"/></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Languages.ILanguageManager.FindOrDefault(System.Guid)">
            <summary>
            Finds a <see cref="T:dnSpy.Contracts.Languages.ILanguage"/> instance. Returns the first one if the language wasn't found
            </summary>
            <param name="guid">Language guid, see <see cref="P:dnSpy.Contracts.Languages.ILanguage.UniqueGuid"/> and <see cref="P:dnSpy.Contracts.Languages.ILanguage.GenericGuid"/></param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Languages.ILanguageProvider">
            <summary>
            Returns languages. It must have a default constructor.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.ILanguageProvider.Languages">
            <summary>
            Creates all languages it can create
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Languages.ISimpleILPrinter">
            <summary>
            Simple IL printer. Only used by the asm editor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Languages.ISimpleILPrinter.Order">
            <summary>
            Gets the order
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Languages.ISimpleILPrinter.Write(dnSpy.Decompiler.Shared.ITextOutput,dnlib.DotNet.IMemberRef)">
            <summary>
            Writes a line to <paramref name="output"/>
            </summary>
            <param name="output">Output</param>
            <param name="member">Member</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Languages.ISimpleILPrinter.Write(dnSpy.Decompiler.Shared.ITextOutput,dnlib.DotNet.MethodSig)">
            <summary>
            Writes a method signature
            </summary>
            <param name="output">Output</param>
            <param name="sig">Signature</param>
        </member>
        <member name="M:dnSpy.Contracts.Languages.ISimpleILPrinter.Write(dnSpy.Decompiler.Shared.ITextOutput,dnlib.DotNet.TypeSig)">
            <summary>
            Writes a type
            </summary>
            <param name="output">Output</param>
            <param name="type">Type</param>
        </member>
        <member name="T:dnSpy.Contracts.Languages.LanguageConstants">
            <summary>
            Language constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Languages.LanguageConstants.CSHARP_ILSPY_ORDERUI">
            <summary>Order of C# language</summary>
        </member>
        <member name="F:dnSpy.Contracts.Languages.LanguageConstants.VB_ILSPY_ORDERUI">
            <summary>Order of VB language</summary>
        </member>
        <member name="F:dnSpy.Contracts.Languages.LanguageConstants.IL_ILSPY_ORDERUI">
            <summary>Order of IL language</summary>
        </member>
        <member name="F:dnSpy.Contracts.Languages.LanguageConstants.CSHARP_ILSPY_DEBUG_ORDERUI">
            <summary>Order of C# debug languages</summary>
        </member>
        <member name="F:dnSpy.Contracts.Languages.LanguageConstants.ILAST_ILSPY_DEBUG_ORDERUI">
            <summary>Order of ILAst debug languages</summary>
        </member>
        <member name="F:dnSpy.Contracts.Languages.LanguageConstants.LANGUAGE_IL">
            <summary>IL language</summary>
        </member>
        <member name="F:dnSpy.Contracts.Languages.LanguageConstants.LANGUAGE_IL_ILSPY">
            <summary>IL language (ILSpy)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Languages.LanguageConstants.LANGUAGE_ILAST_ILSPY">
            <summary>ILAst language (ILSpy)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Languages.LanguageConstants.LANGUAGE_CSHARP">
            <summary>C# language</summary>
        </member>
        <member name="F:dnSpy.Contracts.Languages.LanguageConstants.LANGUAGE_CSHARP_ILSPY">
            <summary>C# language (ILSpy)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Languages.LanguageConstants.LANGUAGE_VB">
            <summary>VB language</summary>
        </member>
        <member name="F:dnSpy.Contracts.Languages.LanguageConstants.LANGUAGE_VB_ILSPY">
            <summary>VB language (ILSpy)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Languages.LanguageConstants.GENERIC_NAMEUI_IL">
            <summary>Name of IL language returned by <see cref="P:dnSpy.Contracts.Languages.ILanguage.GenericNameUI"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Languages.LanguageConstants.GENERIC_NAMEUI_CSHARP">
            <summary>Name of C# language returned by <see cref="P:dnSpy.Contracts.Languages.ILanguage.GenericNameUI"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Languages.LanguageConstants.GENERIC_NAMEUI_VB">
            <summary>Name of VB language returned by <see cref="P:dnSpy.Contracts.Languages.ILanguage.GenericNameUI"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Languages.LanguageConstants.ORDER_DECOMPILER_SETTINGS_ILSPY_CSHARP">
            <summary>
            Order of ILSpy C#/VB decompiler settings
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Languages.LanguageConstants.ORDER_DECOMPILER_SETTINGS_ILSPY_IL">
            <summary>
            Order of ILSpy IL disassembler settings
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Languages.SimplePrinterFlags">
            <summary>
            Printer flags
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Languages.SyntaxHighlightOutputToTextOutput">
            <summary>
            Converts a <see cref="T:dnSpy.Contracts.Highlighting.ISyntaxHighlightOutput"/> to a <see cref="T:dnSpy.Decompiler.Shared.ITextOutput"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Languages.SyntaxHighlightOutputToTextOutput.Create(dnSpy.Contracts.Highlighting.ISyntaxHighlightOutput)">
            <summary>
            Creates a new <see cref="T:dnSpy.Decompiler.Shared.ITextOutput"/> instance
            </summary>
            <param name="output">Output to use</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Menus.CreatedMenuItem">
            <summary>
            <see cref="P:dnSpy.Contracts.Menus.CreatedMenuItem.MenuItem"/> info
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.CreatedMenuItem.Metadata">
            <summary>
            Metadata, eg. an <see cref="T:dnSpy.Contracts.Menus.ExportMenuItemAttribute"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.CreatedMenuItem.MenuItem">
            <summary>
            Menu item
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.CreatedMenuItem.#ctor(dnSpy.Contracts.Menus.IMenuItemMetadata,dnSpy.Contracts.Menus.IMenuItem)">
            <summary>
            Constructor
            </summary>
            <param name="md">Metadata, eg. an <see cref="T:dnSpy.Contracts.Menus.ExportMenuItemAttribute"/> instance</param>
            <param name="menuItem">Menu item</param>
        </member>
        <member name="T:dnSpy.Contracts.Menus.ExportMenuAttribute">
            <summary>
            Exports a menu (<see cref="T:dnSpy.Contracts.Menus.IMenu"/>)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.ExportMenuAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.ExportMenuAttribute.OwnerGuid">
            <summary>
            Guid of menu or null to use <see cref="F:dnSpy.Contracts.Menus.MenuConstants.APP_MENU_GUID"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.ExportMenuAttribute.Guid">
            <summary>
            Guid of this item
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.ExportMenuAttribute.Order">
            <summary>
            Order within the menu, eg. <see cref="F:dnSpy.Contracts.Menus.MenuConstants.ORDER_APP_MENU_FILE"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.ExportMenuAttribute.Header">
            <summary>
            Menu header, eg. "_File"
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Menus.ExportMenuItemAttribute">
            <summary>
            Exports a menu item (<see cref="T:dnSpy.Contracts.Menus.IMenuItem"/>)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.ExportMenuItemAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.OwnerGuid">
            <summary>
            Guid of owner menu or menu item. <c>null</c> if it's a context menu (<see cref="F:dnSpy.Contracts.Menus.MenuConstants.CTX_MENU_GUID"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.Guid">
            <summary>
            Guid of this item or null if it can't contain any child items
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.Group">
            <summary>
            Group name, must be of the format "order,name" where order is a decimal number and the
            order of the group in this menu.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.Order">
            <summary>
            Order within the menu group (<see cref="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.Group"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.Header">
            <summary>
            (Optional) menu item header property value. If not set, you should implement
            <see cref="T:dnSpy.Contracts.Menus.IMenuItem2"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.InputGestureText">
            <summary>
            (Optional) menu item input gesture text property value. If not set, you should implement
            <see cref="T:dnSpy.Contracts.Menus.IMenuItem2"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.Icon">
            <summary>
            (Optional) icon name. If not set, you should implement <see cref="T:dnSpy.Contracts.Menus.IMenuItem2"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Menus.GuidObject">
            <summary>
            Object with a <see cref="T:System.Guid"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.GuidObject.Object">
            <summary>Object</summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.GuidObject.Guid">
            <summary>Guid of object</summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.GuidObject.#ctor(System.String,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="guid">Guid of object (eg. <see cref="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_HEXBOX_GUID"/>)</param>
            <param name="obj">Object</param>
        </member>
        <member name="M:dnSpy.Contracts.Menus.GuidObject.#ctor(System.Guid,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="guid">Guid of object (eg. <see cref="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_HEXBOX_GUID"/>)</param>
            <param name="obj">Object</param>
        </member>
        <member name="T:dnSpy.Contracts.Menus.IContextMenuCreator">
            <summary>
            Shows context menus
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IContextMenuCreator.Show(System.Windows.FrameworkElement)">
            <summary>
            Shows the context menu
            </summary>
            <param name="elem">Element</param>
        </member>
        <member name="T:dnSpy.Contracts.Menus.IContextMenuInitializer">
            <summary>
            Implement it to change where the context menu should appear inside of a control
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IContextMenuInitializer.Initialize(dnSpy.Contracts.Menus.IMenuItemContext,System.Windows.Controls.ContextMenu)">
            <summary>
            Initializes a context menu
            </summary>
            <param name="context">Context</param>
            <param name="menu">Context menu</param>
        </member>
        <member name="T:dnSpy.Contracts.Menus.IGuidObjectsCreator">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Menus.GuidObject"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IGuidObjectsCreator.GetGuidObjects(dnSpy.Contracts.Menus.GuidObject,System.Boolean)">
            <summary>
            Gets extra <see cref="T:dnSpy.Contracts.Menus.GuidObject"/>s to add to <see cref="P:dnSpy.Contracts.Menus.IMenuItemContext.GuidObjects"/>
            </summary>
            <param name="creatorObject">The owner object (<see cref="P:dnSpy.Contracts.Menus.IMenuItemContext.CreatorObject"/>)</param>
            <param name="openedFromKeyboard">true if it was opened from the keyboard</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Menus.IMenu">
            <summary>
            A menu
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Menus.IMenuItem">
            <summary>
            A menu item command. See also <see cref="T:dnSpy.Contracts.Menus.IMenuItem2"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IMenuItem.IsVisible(dnSpy.Contracts.Menus.IMenuItemContext)">
            <summary>
            Returns true if the menu item is visible in the menu
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IMenuItem.IsEnabled(dnSpy.Contracts.Menus.IMenuItemContext)">
            <summary>
            Returns true if the menu item is enabled and its <see cref="M:dnSpy.Contracts.Menus.IMenuItem.Execute(dnSpy.Contracts.Menus.IMenuItemContext)"/>
            method can be called.
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IMenuItem.Execute(dnSpy.Contracts.Menus.IMenuItemContext)">
            <summary>
            Executes the command
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="T:dnSpy.Contracts.Menus.IMenuItem2">
            <summary>
            Extends <see cref="T:dnSpy.Contracts.Menus.IMenuItem"/> with optional methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IMenuItem2.GetHeader(dnSpy.Contracts.Menus.IMenuItemContext)">
            <summary>
            Gets the menu item header or null if the default header from the attribute should be
            used.
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IMenuItem2.GetInputGestureText(dnSpy.Contracts.Menus.IMenuItemContext)">
            <summary>
            Gets the menu item input gesture text or null if the default input gesture text from the
            attribute should be used.
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IMenuItem2.GetIcon(dnSpy.Contracts.Menus.IMenuItemContext)">
            <summary>
            Gets the menu item icon name or null if the default icon name from the attribute should
            be used.
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IMenuItem2.IsChecked(dnSpy.Contracts.Menus.IMenuItemContext)">
            <summary>
            Returns true if the menu item is checked
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Menus.IMenuItemContext">
            <summary>
            <see cref="T:dnSpy.Contracts.Menus.IMenuItem"/> context
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuItemContext.MenuGuid">
            <summary>
            Gets the guid of the top-level menu, eg. <see cref="F:dnSpy.Contracts.Menus.MenuConstants.CTX_MENU_GUID"/> or
            <see cref="F:dnSpy.Contracts.Menus.MenuConstants.APP_MENU_GUID"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuItemContext.OpenedFromKeyboard">
            <summary>
            true if it was opened from the keyboard, else mouse. If it's the main menu (and not
            a context menu), this will always be true.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuItemContext.CreatorObject">
            <summary>
            Creator object
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuItemContext.GuidObjects">
            <summary>
            All objects. <see cref="P:dnSpy.Contracts.Menus.IMenuItemContext.CreatorObject"/> is always the first one
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IMenuItemContext.GetOrCreateState``1(System.Object,System.Func{``0})">
            <summary>
            Gets or creates user state that can be saved in the context to prevent re-generating the
            same state when various <see cref="T:dnSpy.Contracts.Menus.IMenuItem"/> or <see cref="T:dnSpy.Contracts.Menus.IMenuItem2"/> methods get
            called.
            </summary>
            <typeparam name="T">State type</typeparam>
            <param name="key">Key, eg. a guid or a static key in some base command class</param>
            <param name="createState">Delegate that creates a new value if it hasn't been created yet</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IMenuItemContext.Find``1">
            <summary>
            Finds the first object of a certain type. Returns default({T}) if none was found
            </summary>
            <typeparam name="T">Type</typeparam>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Menus.IMenuItemCreator">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Menus.IMenuItem"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IMenuItemCreator.Create(dnSpy.Contracts.Menus.IMenuItemContext)">
            <summary>
            Returns an enumerable of <see cref="T:dnSpy.Contracts.Menus.IMenuItem"/>s
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Menus.IMenuItemMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuItemMetadata.OwnerGuid">
            <summary>See <see cref="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.OwnerGuid"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuItemMetadata.Guid">
            <summary>See <see cref="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.Guid"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuItemMetadata.Group">
            <summary>See <see cref="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.Group"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuItemMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.Order"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuItemMetadata.Header">
            <summary>See <see cref="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.Header"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuItemMetadata.InputGestureText">
            <summary>See <see cref="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.InputGestureText"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuItemMetadata.Icon">
            <summary>See <see cref="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.Icon"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Menus.IMenuManager">
            <summary>
            Menu manager
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IMenuManager.InitializeContextMenu(System.Windows.FrameworkElement,System.Guid,dnSpy.Contracts.Menus.IGuidObjectsCreator,dnSpy.Contracts.Menus.IContextMenuInitializer,System.Nullable{System.Guid})">
            <summary>
            Initializes a context menu. Should be called when <paramref name="elem"/> has been created.
            </summary>
            <param name="elem">Element that needs a context menu</param>
            <param name="guid">Guid of <paramref name="elem"/></param>
            <param name="creator">A <see cref="T:dnSpy.Contracts.Menus.IGuidObjectsCreator"/> instance or null</param>
            <param name="initCtxMenu">A <see cref="T:dnSpy.Contracts.Menus.IContextMenuInitializer"/> instance or null</param>
            <param name="ctxMenuGuid">Guid of context menu, default is <see cref="F:dnSpy.Contracts.Menus.MenuConstants.CTX_MENU_GUID"/></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IMenuManager.InitializeContextMenu(System.Windows.FrameworkElement,System.String,dnSpy.Contracts.Menus.IGuidObjectsCreator,dnSpy.Contracts.Menus.IContextMenuInitializer,System.String)">
            <summary>
            Initializes a context menu. Should be called when <paramref name="elem"/> has been created.
            </summary>
            <param name="elem">Element that needs a context menu</param>
            <param name="guid">Guid of <paramref name="elem"/></param>
            <param name="creator">A <see cref="T:dnSpy.Contracts.Menus.IGuidObjectsCreator"/> instance or null</param>
            <param name="initCtxMenu">A <see cref="T:dnSpy.Contracts.Menus.IContextMenuInitializer"/> instance or null</param>
            <param name="ctxMenuGuid">Guid of context menu, default is <see cref="F:dnSpy.Contracts.Menus.MenuConstants.CTX_MENU_GUID"/></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IMenuManager.CreateMenu(System.Guid,System.Windows.IInputElement)">
            <summary>
            Creates a <see cref="T:System.Windows.Controls.Menu"/>
            </summary>
            <param name="menuGuid">Guid of menu, eg. <see cref="F:dnSpy.Contracts.Menus.MenuConstants.APP_MENU_GUID"/></param>
            <param name="commandTarget">Command target for menu items, eg. the owner window, or null</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Menus.IMenuMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuMetadata.OwnerGuid">
            <summary>See <see cref="P:dnSpy.Contracts.Menus.ExportMenuAttribute.OwnerGuid"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuMetadata.Guid">
            <summary>See <see cref="P:dnSpy.Contracts.Menus.ExportMenuAttribute.Guid"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Menus.ExportMenuAttribute.Order"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuMetadata.Header">
            <summary>See <see cref="P:dnSpy.Contracts.Menus.ExportMenuAttribute.Header"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Menus.MenuConstants">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.CTX_MENU_GUID">
            <summary>Guid of context menu</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.APP_MENU_GUID">
            <summary>Guid of app menu</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.APP_MENU_FILE_GUID">
            <summary>Guid of app menu: File</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.APP_MENU_EDIT_GUID">
            <summary>Guid of app menu: Edit</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.APP_MENU_VIEW_GUID">
            <summary>Guid of app menu: View</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.APP_MENU_THEMES_GUID">
            <summary>Guid of app menu: Themes</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.APP_MENU_DEBUG_GUID">
            <summary>Guid of app menu: Debug</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.APP_MENU_WINDOW_GUID">
            <summary>Guid of app menu: Window</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.APP_MENU_HELP_GUID">
            <summary>Guid of app menu: Help</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.TEXTEDITOR_ICONBAR_GUID">
            <summary>Guid of text editor icon bar</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.ORDER_APP_MENU_FILE">
            <summary>App menu order: File</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.ORDER_APP_MENU_EDIT">
            <summary>App menu order: Edit</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.ORDER_APP_MENU_VIEW">
            <summary>App menu order: View</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.ORDER_APP_MENU_THEMES">
            <summary>App menu order: Themes</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.ORDER_APP_MENU_DEBUG">
            <summary>App menu order: Debug</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.ORDER_APP_MENU_WINDOW">
            <summary>App menu order: Window</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.ORDER_APP_MENU_HELP">
            <summary>App menu order: Help</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_UNKNOWN_GUID">
            <summary>An unknown object</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_FILES_TREEVIEW_GUID">
            <summary>Files treeview</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_ANALYZER_TREEVIEW_GUID">
            <summary>Analyzer's treeview</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_SEARCH_GUID">
            <summary>Search ListBox</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_TREEVIEW_NODES_ARRAY_GUID">
            <summary>Treeview nodes array (<see cref="T:dnSpy.Contracts.TreeView.ITreeNodeData"/>[])</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_SEARCHRESULT_GUID">
            <summary><see cref="T:dnSpy.Contracts.Search.ISearchResult"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_CODE_REFERENCE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.CodeReference"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_FILES_TABCONTROL_GUID">
            <summary>Files <see cref="T:System.Windows.Controls.TabControl"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_TABGROUP_GUID">
            <summary><see cref="T:dnSpy.Contracts.Tabs.ITabGroup"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_TOOLWINDOWGROUP_GUID">
            <summary><see cref="T:dnSpy.Contracts.ToolWindows.IToolWindowGroup"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_TOOLWINDOW_TABCONTROL_GUID">
            <summary>Tool window <see cref="T:System.Windows.Controls.TabControl"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_TEXTEDITORCONTROL_GUID">
            <summary>Text editor control</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_TEXTEDITORUICONTEXT_GUID">
            <summary><see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.ITextEditorUIContext"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_TEXTEDITORLOCATION_GUID">
            <summary><see cref="T:dnSpy.Contracts.TextEditor.TextEditorLocation"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_HEXBOX_GUID">
            <summary><c>HexBox</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_TEXTEDITOR_ICONBAR_GUID">
            <summary>Text editor icon bar</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_IICONBAROBJECT_GUID">
            <summary><see cref="T:dnSpy.Contracts.Files.Tabs.TextEditor.IIconBarObject"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_REPL_TEXTEDITORCONTROL_GUID">
            <summary>REPL text editor control</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_REPL_EDITOR_GUID">
            <summary><see cref="T:dnSpy.Contracts.TextEditor.IReplEditorUI"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_FILE_SAVE">
            <summary>Group: App Menu: File, Group: Save</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_FILE_OPEN">
            <summary>Group: App Menu: File, Group: Open</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_FILE_EXIT">
            <summary>Group: App Menu: File, Group: Exit</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_EDIT_UNDO">
            <summary>Group: App Menu: Edit, Group: Undo/Redo</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_EDIT_FIND">
            <summary>Group: App Menu: Edit, Group: Find</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_EDIT_ASMED_DELETE">
            <summary>Group: App Menu: Edit, Group: AsmEditor Delete</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_EDIT_ASMED_MISC">
            <summary>Group: App Menu: Edit, Group: AsmEditor Misc</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_EDIT_ASMED_NEW">
            <summary>Group: App Menu: Edit, Group: AsmEditor New</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_EDIT_ASMED_SETTINGS">
            <summary>Group: App Menu: Edit, Group: AsmEditor Settings</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_EDIT_HEX">
            <summary>Group: App Menu: Edit, Group: Hex</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_EDIT_HEX_MD">
            <summary>Group: App Menu: Edit, Group: Hex MD</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_EDIT_HEX_GOTO_MD">
            <summary>Group: App Menu: Edit, Group: Hex MD Go To</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_EDIT_HEX_COPY">
            <summary>Group: App Menu: Edit, Group: Hex Copy</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_VIEW_OPTS">
            <summary>Group: App Menu: View, Group: Options</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_VIEW_WINDOWS">
            <summary>Group: App Menu: View, Group: Tool Windows</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_VIEW_OPTSDLG">
            <summary>Group: App Menu: View, Group: Options dlg</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_THEMES_THEMES">
            <summary>Group: App Menu: Themes, Group: Themes</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_DEBUG_START">
            <summary>Group: App Menu: Debug, Group: Start</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_DEBUG_CONTINUE">
            <summary>Group: App Menu: Debug, Group: Continue/Stop/etc commands</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_DEBUG_STEP">
            <summary>Group: App Menu: Debug, Group: Step commands</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_DEBUG_BREAKPOINTS">
            <summary>Group: App Menu: Debug, Group: Breakpoint commands</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_DEBUG_SHOW">
            <summary>Group: App Menu: Debug, Group: Show Debug Windows</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_WINDOW_WINDOW">
            <summary>Group: App Menu: Window, Group: Window</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_WINDOW_TABGROUPS">
            <summary>Group: App Menu: Window, Group: Tab Groups</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_WINDOW_TABGROUPSCLOSE">
            <summary>Group: App Menu: Window, Group: Tab Groups Close commands</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_WINDOW_TABGROUPSVERT">
            <summary>Group: App Menu: Window, Group: Tab Groups Vert/Horiz commands</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_WINDOW_ALLWINDOWS">
            <summary>Group: App Menu: Window, Group: All Windows</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_HELP_LINKS">
            <summary>Group: App Menu: Help, Group: Links</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_HELP_ABOUT">
            <summary>Group: App Menu: Help, Group: About</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_CODE_TABS">
            <summary>Group: Context Menu, Type: Code, Group: Tabs</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_CODE_DEBUG">
            <summary>Group: Context Menu, Type: Code, Group: Debug</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_CODE_ASMED_SAVE">
            <summary>Group: Context Menu, Type: Code, Group: AsmEditor Save</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_CODE_ASMED_DELETE">
            <summary>Group: Context Menu, Type: Code, Group: AsmEditor Delete</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_CODE_ASMED_NEW">
            <summary>Group: Context Menu, Type: Code, Group: AsmEditor New</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_CODE_ASMED_SETTINGS">
            <summary>Group: Context Menu, Type: Code, Group: AsmEditor Settings</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_CODE_ASMED_ILED">
            <summary>Group: Context Menu, Type: Code, Group: AsmEditor IL ED</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_CODE_TOKENS">
            <summary>Group: Context Menu, Type: Code, Group: Tokens</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_CODE_HEX">
            <summary>Group: Context Menu, Type: Code, Group: Hex</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_CODE_HEX_MD">
            <summary>Group: Context Menu, Type: Code, Group: Hex MD</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_CODE_HEX_COPY">
            <summary>Group: Context Menu, Type: Code, Group: Hex Copy</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_CODE_DEBUGRT">
            <summary>Group: Context Menu, Type: Code, Group: Debug RT</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_CODE_OTHER">
            <summary>Group: Context Menu, Type: Code, Group: Other</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_CODE_EDITOR">
            <summary>Group: Context Menu, Type: Code, Group: Editor</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_HEXBOX_SHOW">
            <summary>Group: Context Menu, Type: HexBox, Group: Show commands</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_HEXBOX_EDIT">
            <summary>Group: Context Menu, Type: HexBox, Group: Edit</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_HEXBOX_OPTS">
            <summary>Group: Context Menu, Type: HexBox, Group: Options</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_HEXBOX_COPY">
            <summary>Group: Context Menu, Type: HexBox, Group: Copy</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_TABS_CLOSE">
            <summary>Group: Context Menu, Type: Tabs, Group: Close/New commands</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_TABS_GROUPS">
            <summary>Group: Context Menu, Type: Tabs, Group: Tab Groups</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_TABS_GROUPSCLOSE">
            <summary>Group: Context Menu, Type: Tabs, Group: Tab Groups Close commands</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_TABS_GROUPSVERT">
            <summary>Group: Context Menu, Type: Tabs, Group: Tab Groups Vert/Horiz commands</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_TOOLWINS_CLOSE">
            <summary>Group: Context Menu, Type: Tool Windows, Group: Close commands</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_TOOLWINS_GROUPS">
            <summary>Group: Context Menu, Type: Tool Windows, Group: Tab Groups</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_TOOLWINS_GROUPSCLOSE">
            <summary>Group: Context Menu, Type: Tool Windows, Group: Tab Groups Close commands</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_TOOLWINS_GROUPSVERT">
            <summary>Group: Context Menu, Type: Tool Windows, Group: Tab Groups Vert/Horiz commands</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_SEARCH_TABS">
            <summary>Group: Context Menu, Type: Search, Group: Tabs</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_SEARCH_TOKENS">
            <summary>Group: Context Menu, Type: Search, Group: Tokens</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_SEARCH_OTHER">
            <summary>Group: Context Menu, Type: Search, Group: Other</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_SEARCH_OPTIONS">
            <summary>Group: Context Menu, Type: Search, Group: Options</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_ANALYZER_TABS">
            <summary>Group: Context Menu, Type: Analyzer, Group: Tabs</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_ANALYZER_TOKENS">
            <summary>Group: Context Menu, Type: Analyzer, Group: Tokens</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_ANALYZER_OTHER">
            <summary>Group: Context Menu, Type: Analyzer, Group: Other</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_ANALYZER_OPTIONS">
            <summary>Group: Context Menu, Type: Analyzer, Group: Options</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_FILES_TABS">
            <summary>Group: Context Menu, Type: Files, Group: Tabs</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_FILES_ASMED_SAVE">
            <summary>Group: Context Menu, Type: Files, Group: AsmEditor Save</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_FILES_ASMED_DELETE">
            <summary>Group: Context Menu, Type: Files, Group: AsmEditor Delete</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_FILES_ASMED_MISC">
            <summary>Group: Context Menu, Type: Files, Group: AsmEditor Misc</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_FILES_ASMED_NEW">
            <summary>Group: Context Menu, Type: Files, Group: AsmEditor New</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_FILES_ASMED_SETTINGS">
            <summary>Group: Context Menu, Type: Files, Group: AsmEditor Settings</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_FILES_ASMED_ILED">
            <summary>Group: Context Menu, Type: Files, Group: AsmEditor IL ED</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_FILES_TOKENS">
            <summary>Group: Context Menu, Type: Files, Group: Tokens</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_FILES_DEBUGRT">
            <summary>Group: Context Menu, Type: Files, Group: Debug RT</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_FILES_DEBUG">
            <summary>Group: Context Menu, Type: Files, Group: Debug</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_FILES_OTHER">
            <summary>Group: Context Menu, Type: Files, Group: Other</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_BPS_COPY">
            <summary>Group: Context Menu, Type: Debugger/Breakpoints, Group: Copy</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_BPS_CODE">
            <summary>Group: Context Menu, Type: Debugger/Breakpoints, Group: Code</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_BPS_OPTS">
            <summary>Group: Context Menu, Type: Debugger/Breakpoints, Group: Options</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_CALLSTACK_COPY">
            <summary>Group: Context Menu, Type: Debugger/CallStack, Group: Copy</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_CALLSTACK_FRAME">
            <summary>Group: Context Menu, Type: Debugger/CallStack, Group: Frame</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_CALLSTACK_HEXOPTS">
            <summary>Group: Context Menu, Type: Debugger/CallStack, Group: Hex Options</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_CALLSTACK_OPTS">
            <summary>Group: Context Menu, Type: Debugger/CallStack, Group: Options</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_EXCEPTIONS_COPY">
            <summary>Group: Context Menu, Type: Debugger/Exceptions, Group: Copy</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_EXCEPTIONS_ADD">
            <summary>Group: Context Menu, Type: Debugger/Exceptions, Group: Add</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_LOCALS_COPY">
            <summary>Group: Context Menu, Type: Debugger/Locals, Group: Copy</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_LOCALS_VALUES">
            <summary>Group: Context Menu, Type: Debugger/Locals, Group: Values</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_LOCALS_HEXOPTS">
            <summary>Group: Context Menu, Type: Debugger/Locals, Group: Hex Options</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_LOCALS_TREE">
            <summary>Group: Context Menu, Type: Debugger/Locals, Group: Tree</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_LOCALS_OPTS">
            <summary>Group: Context Menu, Type: Debugger/Locals, Group: Options</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_MODULES_COPY">
            <summary>Group: Context Menu, Type: Debugger/Modules, Group: Copy</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_MODULES_GOTO">
            <summary>Group: Context Menu, Type: Debugger/Modules, Group: Go To</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_MODULES_HEXOPTS">
            <summary>Group: Context Menu, Type: Debugger/Modules, Group: Hex Options</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_MODULES_DIRS">
            <summary>Group: Context Menu, Type: Debugger/Modules, Group: Directories</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_MODULES_SAVE">
            <summary>Group: Context Menu, Type: Debugger/Modules, Group: Save</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_THREADS_COPY">
            <summary>Group: Context Menu, Type: Debugger/Threads, Group: Copy</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_THREADS_HEXOPTS">
            <summary>Group: Context Menu, Type: Debugger/Threads, Group: Hex Options</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_THREADS_CMDS">
            <summary>Group: Context Menu, Type: Debugger/Threads, Group: Commands</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_REPL_RESET">
            <summary>Group: Context Menu, Type: REPL text editor, Group: Reset</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_REPL_COPY">
            <summary>Group: Context Menu, Type: REPL text editor, Group: Copy</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_REPL_CLEAR">
            <summary>Group: Context Menu, Type: REPL text editor, Group: Clear</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_TEXTEDITOR_ICONBAR_DEBUG_BPS">
            <summary>Group: Text Editor Icon Bar, Type: Debugger, Group: Breakpoints</summary>
        </member>
        <member name="T:dnSpy.Contracts.Plugin.IAutoLoaded">
            <summary>
            All classes that export this type automatically get loaded at startup.
            Use <see cref="T:dnSpy.Contracts.Plugin.ExportAutoLoadedAttribute"/> to export it.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Plugin.AutoLoadedLoadType">
            <summary>
            <see cref="T:dnSpy.Contracts.Plugin.IAutoLoaded"/> load type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Plugin.AutoLoadedLoadType.BeforePlugins">
            <summary>
            Loaded before plugins are created
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Plugin.AutoLoadedLoadType.AfterPlugins">
            <summary>
            Loaded after plugins have been created
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Plugin.AutoLoadedLoadType.AfterPluginsLoaded">
            <summary>
            Loaded after all plugins have been created and loaded
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Plugin.AutoLoadedLoadType.AppLoaded">
            <summary>
            Loaded when the app has been loaded
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Plugin.IAutoLoadedMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Plugin.IAutoLoadedMetadata.LoadType">
            <summary>See <see cref="P:dnSpy.Contracts.Plugin.ExportAutoLoadedAttribute.LoadType"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Plugin.IAutoLoadedMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Plugin.ExportAutoLoadedAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Plugin.ExportAutoLoadedAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Plugin.IAutoLoaded"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Plugin.ExportAutoLoadedAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Plugin.ExportAutoLoadedAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Plugin.ExportAutoLoadedAttribute.LoadType">
            <summary>
            Default is <see cref="F:dnSpy.Contracts.Plugin.AutoLoadedLoadType.AppLoaded"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Plugin.IPlugin">
            <summary>
            All plugins should export exactly one type that implements this interface. Use
            <see cref="T:dnSpy.Contracts.Plugin.ExportPluginAttribute"/> to export a plugin.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Plugin.IPlugin.OnEvent(dnSpy.Contracts.Plugin.PluginEvent,System.Object)">
            <summary>
            Called at various times
            </summary>
            <param name="event">Event</param>
            <param name="obj">Data, see <see cref="T:dnSpy.Contracts.Plugin.PluginEvent"/></param>
        </member>
        <member name="P:dnSpy.Contracts.Plugin.IPlugin.PluginInfo">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Plugin.PluginInfo"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Plugin.IPlugin.MergedResourceDictionaries">
            <summary>
            Gets relative paths of all resource dictionaries that will be added to the app's resources
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Plugin.IPluginMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Plugin.IPluginMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Plugin.ExportPluginAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Plugin.ExportPluginAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Plugin.IPlugin"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Plugin.ExportPluginAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Plugin.ExportPluginAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Plugin.PluginEvent">
            <summary>
            Plugin event
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Plugin.PluginEvent.Loaded">
            <summary>
            All plugins have been loaded
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Plugin.PluginEvent.AppLoaded">
            <summary>
            The app has been loaded
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Plugin.PluginEvent.AppExit">
            <summary>
            The app is closing
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Plugin.PluginInfo">
            <summary>
            Plugin information
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Plugin.PluginInfo.ShortDescription">
            <summary>
            Short description or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Plugin.PluginInfo.Copyright">
            <summary>
            Copyright message or null to get it from the assembly's <see cref="T:System.Reflection.AssemblyCopyrightAttribute"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.AttachOptions">
            <summary>
            Attach options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.AttachOptions.ProcessId">
            <summary>
            Process ID
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.Box">
            <summary>
            Boxed value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.Box.Value">
            <summary>
            Get the value
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.Box.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.BreakpointKind">
            <summary>
            Breakpoint kind
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.BreakpointKind.IL">
            <summary>
            IL code breakpoint (<see cref="T:dnSpy.Contracts.Scripting.Debugger.IILBreakpoint"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.BreakpointKind.Native">
            <summary>
            Native code breakpoint (<see cref="T:dnSpy.Contracts.Scripting.Debugger.INativeBreakpoint"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.BreakpointKind.Event">
            <summary>
            Debug event breakpoint (<see cref="T:dnSpy.Contracts.Scripting.Debugger.IEventBreakpoint"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.BreakpointKind.AnyEvent">
            <summary>
            Any debug event breakpoint (<see cref="T:dnSpy.Contracts.Scripting.Debugger.IAnyEventBreakpoint"/>)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.BreakProcessKind">
            <summary>
            When to break the debugged process
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.BreakProcessKind.None">
            <summary>
            Don't break
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.BreakProcessKind.CreateProcess">
            <summary>
            Break at the first CreateProcess event
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.BreakProcessKind.CreateAppDomain">
            <summary>
            Break at the first CreateAppDomain event
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.BreakProcessKind.LoadModule">
            <summary>
            Break at the first LoadModule event
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.BreakProcessKind.LoadClass">
            <summary>
            Break at the first LoadClass event
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.BreakProcessKind.CreateThread">
            <summary>
            Break at the first CreateThread event
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.BreakProcessKind.ExeLoadModule">
            <summary>
            Break at the debugged executable's LoadModule event
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.BreakProcessKind.ExeLoadClass">
            <summary>
            Break at the debugged executable's first LoadClass event
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.BreakProcessKind.ModuleCctorOrEntryPoint">
            <summary>
            Break at the module .cctor or entry point if there's no module .cctor
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.BreakProcessKind.EntryPoint">
            <summary>
            Break at the entry point
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.ChainReason">
            <summary>
            Chain reason
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ChainReason.None">
            <summary>
            No call chain has been initiated.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ChainReason.ClassInit">
            <summary>
            The chain was initiated by a constructor.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ChainReason.ExceptionFilter">
            <summary>
            The chain was initiated by an exception filter.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ChainReason.Security">
            <summary>
            The chain was initiated by code that enforces security.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ChainReason.ContextPolicy">
            <summary>
            The chain was initiated by a context policy.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ChainReason.Interception">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ChainReason.ProcessStart">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ChainReason.ThreadStart">
            <summary>
            The chain was initiated by the start of a thread execution.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ChainReason.EnterManaged">
            <summary>
            The chain was initiated by entry into managed code.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ChainReason.EnterUnmanaged">
            <summary>
            The chain was initiated by entry into unmanaged code.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ChainReason.DebuggerEval">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ChainReason.ContextSwitch">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ChainReason.FuncEval">
            <summary>
            The chain was initiated by a function evaluation.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.CodeChunkInfo">
            <summary>
            Code chunk info
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.CodeChunkInfo.StartAddr">
            <summary>
            Start address
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.CodeChunkInfo.Length">
            <summary>
            Length
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.CodeChunkInfo.#ctor(System.UInt64,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="addr">Address</param>
            <param name="length">Length</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.CodeChunkInfo.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.CoreCLRDebugOptions">
            <summary>
            Debug options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.CoreCLRDebugOptions.Options">
            <summary>
            Debug options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.CoreCLRDebugOptions.DbgShimFilename">
            <summary>
            dbgshim.dll filename or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.CoreCLRDebugOptions.HostFilename">
            <summary>
            Host filename, eg. path to <c>CoreRun.exe</c>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.CoreCLRDebugOptions.HostCommandLine">
            <summary>
            Host command line
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.CoreCLRDebugOptions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.CorElementType">
            <summary>
            Element type, identical to <see cref="T:dnlib.DotNet.ElementType"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.DebugEventKind">
            <summary>
            Debug event kind
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.DebuggerEventArgs">
            <summary>
            Debugger event args
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebuggerEventArgs.Empty">
            <summary>
            Empty instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.PauseReason">
            <summary>
            Pause reason
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.PauseReason.Other">
            <summary>
            Some unknown reason
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.PauseReason.UnhandledException">
            <summary>
            An unhandled exception
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.PauseReason.Exception">
            <summary>
            An exception
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.PauseReason.DebugEventBreakpoint">
            <summary>
            A <see cref="T:dnSpy.Contracts.Scripting.Debugger.IEventBreakpoint"/> breakpoint got triggered
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.PauseReason.AnyDebugEventBreakpoint">
            <summary>
            A <see cref="T:dnSpy.Contracts.Scripting.Debugger.IAnyEventBreakpoint"/> breakpoint got triggered
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.PauseReason.Break">
            <summary>
            A 'break' IL instruction was executed
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.PauseReason.ILCodeBreakpoint">
            <summary>
            An <see cref="T:dnSpy.Contracts.Scripting.Debugger.IILBreakpoint"/> breakpoint got triggered
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.PauseReason.NativeCodeBreakpoint">
            <summary>
            A <see cref="T:dnSpy.Contracts.Scripting.Debugger.INativeBreakpoint"/> breakpoint got triggered
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.PauseReason.Step">
            <summary>
            A step in, step out or step over command has completed
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.PauseReason.UserBreak">
            <summary>
            TryBreakProcesses() was called
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.PauseReason.Eval">
            <summary>
            Evaluation completed
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.PauseReason.Terminated">
            <summary>
            The process has been terminated
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.DebuggerPauseState">
            <summary>
            Pause state
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.DebuggerPauseState.Reason">
            <summary>
            Reason
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.DebuggerPauseState.#ctor(dnSpy.Contracts.Scripting.Debugger.PauseReason)">
            <summary>
            Constructor
            </summary>
            <param name="reason">Reason</param>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.EventBreakpointPauseState">
            <summary>
            Debug event breakpoint
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.EventBreakpointPauseState.Breakpoint">
            <summary>
            Breakpoint
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.EventBreakpointPauseState.#ctor(dnSpy.Contracts.Scripting.Debugger.IEventBreakpoint)">
            <summary>
            Constructor
            </summary>
            <param name="bp">Breakpoint</param>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.AnyEventBreakpointPauseState">
            <summary>
            Any debug event breakpoint
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.AnyEventBreakpointPauseState.Breakpoint">
            <summary>
            Breakpoint
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.AnyEventBreakpointPauseState.#ctor(dnSpy.Contracts.Scripting.Debugger.IAnyEventBreakpoint)">
            <summary>
            Constructor
            </summary>
            <param name="bp">Breakpoint</param>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.ILBreakpointPauseState">
            <summary>
            IL code breakpoint
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILBreakpointPauseState.Breakpoint">
            <summary>
            Breakpoint
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ILBreakpointPauseState.#ctor(dnSpy.Contracts.Scripting.Debugger.IILBreakpoint)">
            <summary>
            Constructor
            </summary>
            <param name="bp">Breakpoint</param>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.NativeBreakpointPauseState">
            <summary>
            Native code breakpoint
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.NativeBreakpointPauseState.Breakpoint">
            <summary>
            Breakpoint
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.NativeBreakpointPauseState.#ctor(dnSpy.Contracts.Scripting.Debugger.INativeBreakpoint)">
            <summary>
            Constructor
            </summary>
            <param name="bp">Breakpoint</param>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.StepPauseState">
            <summary>
            Step in / out / over
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.StepPauseState.StepReason">
            <summary>
            Step reason
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.StepPauseState.#ctor(dnSpy.Contracts.Scripting.Debugger.DebugStepReason)">
            <summary>
            Constructor
            </summary>
            <param name="stepReason">Step reason</param>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.DebuggerProcessState">
            <summary>
            Debugger process state
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebuggerProcessState.Starting">
            <summary>
            Creating the first process
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebuggerProcessState.Continuing">
            <summary>
            Process is about to run after having been stopped
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebuggerProcessState.Running">
            <summary>
            Process is running
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebuggerProcessState.Paused">
            <summary>
            Process is temporarily stopped
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebuggerProcessState.Terminated">
            <summary>
            All processes have terminated
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.DebugHandleType">
            <summary>
            Handle type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebugHandleType.Strong">
            <summary>
            The handle is strong, which prevents an object from being reclaimed by garbage collection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebugHandleType.WeakTrackResurrection">
            <summary>
            The handle is weak, which does not prevent an object from being reclaimed by garbage collection.
            
            The handle becomes invalid when the object is collected.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.DebugOptions">
            <summary>
            Debug options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.DebugOptions.Filename">
            <summary>
            File to debug
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.DebugOptions.CommandLine">
            <summary>
            Command line to pass to debugged program
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.DebugOptions.CurrentDirectory">
            <summary>
            Current directory of debugged program or null to use the debugger's cwd
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.DebugOptions.BreakProcessKind">
            <summary>
            Break process kind
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.DebugStepReason">
            <summary>
            Step reason
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebugStepReason.Normal">
            <summary>
            Stepping completed normally, within the same function.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebugStepReason.Return">
            <summary>
            Stepping continued normally, after the function returned.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebugStepReason.Call">
            <summary>
            Stepping continued normally, at the beginning of a newly called function.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebugStepReason.ExceptionFilter">
            <summary>
            An exception was generated and control was passed to an exception filter.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebugStepReason.ExceptionHandler">
            <summary>
            An exception was generated and control was passed to an exception handler.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebugStepReason.Intercept">
            <summary>
            Control was passed to an interceptor.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebugStepReason.Exit">
            <summary>
            The thread exited before the step was completed.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.ExceptionObjectStackFrame">
            <summary>
            Exception object stack frame
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ExceptionObjectStackFrame.Module">
            <summary>
            Module
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ExceptionObjectStackFrame.IP">
            <summary>
            Instruction pointer
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ExceptionObjectStackFrame.Token">
            <summary>
            Method token
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ExceptionObjectStackFrame.IsLastForeignExceptionFrame">
            <summary>
            true if it's last foreign exception frame
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ExceptionObjectStackFrame.#ctor(dnSpy.Contracts.Scripting.Debugger.IDebuggerModule,System.UInt64,System.UInt32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="module">Module</param>
            <param name="ip">IP</param>
            <param name="token">Method token</param>
            <param name="isLastForeignExceptionFrame">true if it's last foreign exception frame</param>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IAnyEventBreakpoint">
            <summary>
            Any debug event breakpoint
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IAppDomain">
            <summary>
            An AppDomain in the debugged process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Id">
            <summary>
            AppDomain Id
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.IsAttached">
            <summary>
            true if the debugger is attached to the AppDomain
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.IsRunning">
            <summary>
            true if the threads are running freely
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Name">
            <summary>
            AppDomain name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.HasExited">
            <summary>
            true if the AppDomain has exited
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Threads">
            <summary>
            Gets all threads
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Assemblies">
            <summary>
            Gets all assemblies
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Modules">
            <summary>
            Gets all modules
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.CorLib">
            <summary>
            Gets the core module (mscorlib)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetModule(System.Reflection.Module)">
            <summary>
            Finds a module
            </summary>
            <param name="module">Module</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetModule(dnSpy.Contracts.Scripting.Debugger.ModuleName)">
            <summary>
            Finds a module
            </summary>
            <param name="name">Module name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetModuleByName(System.String)">
            <summary>
            Finds a module
            </summary>
            <param name="name">Full path, filename, or filename without extension of module</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetAssembly(System.Reflection.Assembly)">
            <summary>
            Finds an assembly
            </summary>
            <param name="asm">Assembly</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetAssembly(System.String)">
            <summary>
            Finds an assembly
            </summary>
            <param name="name">Full path, filename, or filename without extension of assembly, or
            assembly simple name or assembly full name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetClass(System.String,System.String)">
            <summary>
            Finds a class
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetMethod(System.String,System.String,System.String)">
            <summary>
            Finds a method
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <param name="methodName">Method name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetField(System.String,System.String,System.String)">
            <summary>
            Finds a field
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <param name="fieldName">Field name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetProperty(System.String,System.String,System.String)">
            <summary>
            Finds a property
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <param name="propertyName">Property name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetEvent(System.String,System.String,System.String)">
            <summary>
            Finds an event
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <param name="eventName">Event name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetMethod(System.String,System.UInt32)">
            <summary>
            Finds a method
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="token">Method token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetField(System.String,System.UInt32)">
            <summary>
            Finds a field
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="token">Field token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetProperty(System.String,System.UInt32)">
            <summary>
            Finds a property
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="token">Property token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetEvent(System.String,System.UInt32)">
            <summary>
            Finds an event
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="token">Event token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetType(System.String,System.String)">
            <summary>
            Finds a type
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetType(System.String,System.String,dnSpy.Contracts.Scripting.Debugger.IDebuggerType[])">
            <summary>
            Finds a type
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <param name="genericArguments">Generic arguments</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetType(System.Type)">
            <summary>
            Finds a type
            </summary>
            <param name="type">A type that must exist in one of the loaded assemblies in the
            debugged process.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetField(System.Reflection.FieldInfo)">
            <summary>
            Gets a field
            </summary>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetMethod(System.Reflection.MethodBase)">
            <summary>
            Gets a method
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetProperty(System.Reflection.PropertyInfo)">
            <summary>
            Gets a property
            </summary>
            <param name="prop">Property</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetEvent(System.Reflection.EventInfo)">
            <summary>
            Gets an event
            </summary>
            <param name="evt">Event</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.CreateFnPtr(dnSpy.Contracts.Scripting.Debugger.IDebuggerType[])">
            <summary>
            Creates a function pointer type
            </summary>
            <param name="types">Function types. The first type is the return type.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.CreateFunctionPointer(dnSpy.Contracts.Scripting.Debugger.IDebuggerType[])">
            <summary>
            Creates a function pointer type
            </summary>
            <param name="types">Function types. The first type is the return type.</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Void">
            <summary>
            Gets type <see cref="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Void"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Boolean">
            <summary>
            Gets type <see cref="T:System.Boolean"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Char">
            <summary>
            Gets type <see cref="T:System.Char"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.SByte">
            <summary>
            Gets type <see cref="T:System.SByte"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Byte">
            <summary>
            Gets type <see cref="T:System.Byte"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Int16">
            <summary>
            Gets type <see cref="T:System.Int16"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.UInt16">
            <summary>
            Gets type <see cref="T:System.UInt16"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Int32">
            <summary>
            Gets type <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.UInt32">
            <summary>
            Gets type <see cref="T:System.UInt32"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Int64">
            <summary>
            Gets type <see cref="T:System.Int64"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.UInt64">
            <summary>
            Gets type <see cref="T:System.UInt64"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Single">
            <summary>
            Gets type <see cref="T:System.Single"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Double">
            <summary>
            Gets type <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.String">
            <summary>
            Gets type <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.TypedReference">
            <summary>
            Gets type <see cref="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.TypedReference"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.IntPtr">
            <summary>
            Gets type <see cref="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.IntPtr"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.UIntPtr">
            <summary>
            Gets type <see cref="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.UIntPtr"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Object">
            <summary>
            Gets type <see cref="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Object"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Decimal">
            <summary>
            Gets type <see cref="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Decimal"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.CLRObject">
            <summary>
            Gets the CLR AppDomain object or null if it hasn't been constructed yet
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.SetAllThreadsDebugState(dnSpy.Contracts.Scripting.Debugger.ThreadState,dnSpy.Contracts.Scripting.Debugger.IDebuggerThread)">
            <summary>
            Sets the debug state of all managed threads
            </summary>
            <param name="state">New state</param>
            <param name="thread">Thread to exempt from the new state or null</param>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IBreakpoint">
            <summary>
            Breakpoint
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IBreakpoint.Kind">
            <summary>
            Gets the breakpoint kind
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IBreakpoint.IsEnabled">
            <summary>
            true if the breakpoint is enabled
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IBreakpoint.Tag">
            <summary>
            The user can set this property to any value. It's not used by the debugger.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IBreakpoint.Remove">
            <summary>
            Removes the breakpoint
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.ICodeBreakpoint">
            <summary>
            A code breakpoint (IL or native)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ICodeBreakpoint.IsIL">
            <summary>
            true if it's an IL breakpoint (<see cref="T:dnSpy.Contracts.Scripting.Debugger.IILBreakpoint"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ICodeBreakpoint.IsNative">
            <summary>
            true if it's a native breakpoint (<see cref="T:dnSpy.Contracts.Scripting.Debugger.INativeBreakpoint"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ICodeBreakpoint.Module">
            <summary>
            Gets the module name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ICodeBreakpoint.Token">
            <summary>
            Gets the method token
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ICodeBreakpoint.Offset">
            <summary>
            Gets the offset of the breakpoint relative to the start of the method
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IDebugEventContext">
            <summary>
            Debug event context
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugEventContext.Kind">
            <summary>
            Gets the event kind
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IProcessEventContext">
            <summary>
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.CreateProcess"/> and <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.ExitProcess"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IThreadEventContext">
            <summary>
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.CreateThread"/> and <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.ExitThread"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IThreadEventContext.AppDomain">
            <summary>
            Gets the AppDomain or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IThreadEventContext.Thread">
            <summary>
            Gets the thread
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IModuleEventContext">
            <summary>
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.LoadModule"/> and <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.UnloadModule"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IModuleEventContext.AppDomain">
            <summary>
            Gets the AppDomain
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IModuleEventContext.Module">
            <summary>
            Gets the module
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IClassEventContext">
            <summary>
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.LoadClass"/> and <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.UnloadClass"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IClassEventContext.AppDomain">
            <summary>
            Gets the AppDomain
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IClassEventContext.Class">
            <summary>
            Gets the class
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IAppDomainEventContext">
            <summary>
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.CreateAppDomain"/> and <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.ExitAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomainEventContext.AppDomain">
            <summary>
            Gets the AppDomain
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IAssemblyEventContext">
            <summary>
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.LoadAssembly"/> and <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.UnloadAssembly"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAssemblyEventContext.AppDomain">
            <summary>
            Gets the AppDomain
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAssemblyEventContext.Assembly">
            <summary>
            Gets the assembly
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.ILogMessageEventContext">
            <summary>
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.LogMessage"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILogMessageEventContext.AppDomain">
            <summary>
            Gets the AppDomain
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILogMessageEventContext.Thread">
            <summary>
            Gets the thread
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILogMessageEventContext.Level">
            <summary>
            Gets the logging level
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILogMessageEventContext.LowSwitchName">
            <summary>
            Gets the low switch name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILogMessageEventContext.Message">
            <summary>
            Gets the message
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.LoggingLevel">
            <summary>
            Logging level
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.LogSwitchCallReason">
            <summary>
            Log switch call reason
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.ILogSwitchEventContext">
            <summary>
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.LogMessage"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILogSwitchEventContext.AppDomain">
            <summary>
            Gets the AppDomain
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILogSwitchEventContext.Thread">
            <summary>
            Gets the thread
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILogSwitchEventContext.Level">
            <summary>
            Gets the logging level
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILogSwitchEventContext.Reason">
            <summary>
            Gets the reason
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILogSwitchEventContext.LowSwitchName">
            <summary>
            Gets the low switch name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILogSwitchEventContext.ParentName">
            <summary>
            Gets the parent name
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IControlCTrapEventContext">
            <summary>
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.ControlCTrap"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.INameChangeEventContext">
            <summary>
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.NameChange"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.INameChangeEventContext.AppDomain">
            <summary>
            Gets the AppDomain or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.INameChangeEventContext.Thread">
            <summary>
            Gets the thread or null
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IUpdateModuleSymbolsEventContext">
            <summary>
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.UpdateModuleSymbols"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IUpdateModuleSymbolsEventContext.AppDomain">
            <summary>
            Gets the AppDomain
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IUpdateModuleSymbolsEventContext.Module">
            <summary>
            Gets the assembly
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.MDAFlags">
            <summary>
            MDA flags
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.MDAFlags.Slip">
            <summary>
            The thread on which the MDA was fired has slipped since the MDA was fired.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IMDANotificationEventContext">
            <summary>
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.MDANotification"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IMDANotificationEventContext.Thread">
            <summary>
            Gets the thread or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IMDANotificationEventContext.ThreadSlipped">
            <summary>
            true if the thread on which the MDA was fired has slipped since the MDA was fired.
            
            When the call stack no longer describes where the MDA was originally raised, the thread
            is considered to have slipped. This is an unusual circumstance brought about by the
            thread's execution of an invalid operation upon exiting.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IMDANotificationEventContext.Flags">
            <summary>
            Gets the flags
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IMDANotificationEventContext.OSThreadId">
            <summary>
            Gets the OS thread ID. This could be a non-managed thread ID.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IMDANotificationEventContext.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IMDANotificationEventContext.Description">
            <summary>
            Gets the description
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IMDANotificationEventContext.XML">
            <summary>
            Gets the XML
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.ICustomNotificationEventContext">
            <summary>
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.CustomNotification"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ICustomNotificationEventContext.AppDomain">
            <summary>
            Gets the AppDomain
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ICustomNotificationEventContext.Thread">
            <summary>
            Gets the thread
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IDebugger">
            <summary>
            Script access to the debugger plugin
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Scripting.Debugger.IDebugger.OnProcessStateChanged">
            <summary>
            Notified when <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.State"/> gets changed. This gets notified on the main UI
            thread.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.State">
            <summary>
            Gets the debugger process state
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.PauseStates">
            <summary>
            Gets all <see cref="T:dnSpy.Contracts.Scripting.Debugger.DebuggerPauseState"/>s
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.PauseReason">
            <summary>
            Gets the first <see cref="T:dnSpy.Contracts.Scripting.Debugger.PauseReason"/> from <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.PauseStates"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.IsStarting">
            <summary>
            true if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.State"/> equals <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebuggerProcessState.Starting"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.IsContinuing">
            <summary>
            true if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.State"/> equals <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebuggerProcessState.Continuing"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.IsRunning">
            <summary>
            true if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.State"/> equals <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebuggerProcessState.Running"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.IsPaused">
            <summary>
            true if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.State"/> equals <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebuggerProcessState.Paused"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.IsTerminated">
            <summary>
            true if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.State"/> equals <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebuggerProcessState.Terminated"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.IsDebugging">
            <summary>
            true if we're debugging
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.HasAttached">
            <summary>
            true if we attached to the debugged process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.IsEvaluating">
            <summary>
            true if we're evaluating (eg. a property in the debugged process is being called by the
            debugger)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.EvalCompleted">
            <summary>
            true if an eval has completed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitAsync(System.Int32)">
            <summary>
            Waits until the debugged process is paused or terminated. Returns true if the wait didn't time out.
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitRunAsync(System.Int32)">
            <summary>
            Waits until the debugged process is not paused. Returns true if the wait didn't time out.
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Int32)">
            <summary>
            Waits until the debugged process is paused or terminated. Returns true if the wait didn't time out.
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Threading.CancellationToken,System.Int32)">
            <summary>
            Waits until the debugged process is paused or terminated. Returns true if the wait didn't time out.
            </summary>
            <param name="token">Cancellation token</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitRun(System.Int32)">
            <summary>
            Waits until the debugged process is not paused. Returns true if the wait didn't time out.
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitRun(System.Threading.CancellationToken,System.Int32)">
            <summary>
            Waits until the debugged process is not paused. Returns true if the wait didn't time out.
            </summary>
            <param name="token">Cancellation token</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Start">
            <summary>
            Shows a dialog box and debugs the selected process
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Start(dnSpy.Contracts.Scripting.Debugger.DebugOptions)">
            <summary>
            Debug a program
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Start(System.String,System.String,System.String,dnSpy.Contracts.Scripting.Debugger.BreakProcessKind)">
            <summary>
            Debug a program
            </summary>
            <param name="filename">Filename</param>
            <param name="cmdLine">Command line</param>
            <param name="cwd">Working directory</param>
            <param name="breakKind">Break kind</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StartCoreCLR">
            <summary>
            Shows a dialog box and debugs the selected CoreCLR process
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StartCoreCLR(dnSpy.Contracts.Scripting.Debugger.CoreCLRDebugOptions)">
            <summary>
            Debug a CoreCLR program
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StartCoreCLR(System.String,System.String,System.String,dnSpy.Contracts.Scripting.Debugger.BreakProcessKind,System.String,System.String)">
            <summary>
            Debug a CoreCLR program
            </summary>
            <param name="filename">Filename</param>
            <param name="cmdLine">Command line</param>
            <param name="cwd">Working directory</param>
            <param name="breakKind">Break kind</param>
            <param name="hostFilename">Host filename, eg. path to <c>CoreRun.exe</c></param>
            <param name="hostCommandLine">Host command line</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Attach">
            <summary>
            Shows a dialog box and attaches to the selected process
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Attach(dnSpy.Contracts.Scripting.Debugger.AttachOptions)">
            <summary>
            Attach to a process
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Attach(System.Int32)">
            <summary>
            Attach to a process
            </summary>
            <param name="pid">Process id</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Restart">
            <summary>
            Restart the debugged process
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Break">
            <summary>
            Break the process
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Stop">
            <summary>
            Stop and kill the process
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Detach">
            <summary>
            Detach
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Continue">
            <summary>
            Let the debugged program run
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ContinueAsync(System.Int32)">
            <summary>
            Let the debugged program run and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitAsync(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ContinueWait(System.Int32)">
            <summary>
            Let the debugged program run and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ContinueWait(System.Threading.CancellationToken,System.Int32)">
            <summary>
            Let the debugged program run and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="token">Cancellation token</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepInto">
            <summary>
            Step into the method
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepInto(dnSpy.Contracts.Scripting.Debugger.IStackFrame)">
            <summary>
            Step into the method
            </summary>
            <param name="frame">Frame</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepIntoAsync(System.Int32)">
            <summary>
            Step into the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitAsync(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepIntoWait(System.Int32)">
            <summary>
            Step into the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepIntoWait(System.Threading.CancellationToken,System.Int32)">
            <summary>
            Step into the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="token">Cancellation token</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepIntoAsync(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.Int32)">
            <summary>
            Step into the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitAsync(System.Int32)"/>
            </summary>
            <param name="frame">Frame</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepIntoWait(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.Int32)">
            <summary>
            Step into the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Int32)"/>
            </summary>
            <param name="frame">Frame</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepIntoWait(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Step into the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="frame">Frame</param>
            <param name="token">Cancellation token</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOver">
            <summary>
            Step over the method
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOver(dnSpy.Contracts.Scripting.Debugger.IStackFrame)">
            <summary>
            Step over the method
            </summary>
            <param name="frame">Frame</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOverAsync(System.Int32)">
            <summary>
            Step over the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitAsync(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOverWait(System.Int32)">
            <summary>
            Step over the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOverWait(System.Threading.CancellationToken,System.Int32)">
            <summary>
            Step over the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="token">Cancellation token</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOverAsync(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.Int32)">
            <summary>
            Step over the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitAsync(System.Int32)"/>
            </summary>
            <param name="frame">Frame</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOverWait(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.Int32)">
            <summary>
            Step over the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Int32)"/>
            </summary>
            <param name="frame">Frame</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOverWait(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Step over the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="frame">Frame</param>
            <param name="token">Cancellation token</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOut">
            <summary>
            Step out of the method
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOut(dnSpy.Contracts.Scripting.Debugger.IStackFrame)">
            <summary>
            Step out of the method
            </summary>
            <param name="frame">Frame</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOutAsync(System.Int32)">
            <summary>
            Step out of the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitAsync(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOutWait(System.Int32)">
            <summary>
            Step out of the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOutWait(System.Threading.CancellationToken,System.Int32)">
            <summary>
            Step out of the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="token">Cancellation token</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOutAsync(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.Int32)">
            <summary>
            Step out of the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitAsync(System.Int32)"/>
            </summary>
            <param name="frame">Frame</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOutWait(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.Int32)">
            <summary>
            Step out of the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Int32)"/>
            </summary>
            <param name="frame">Frame</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOutWait(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Step out of the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="frame">Frame</param>
            <param name="token">Cancellation token</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.RunTo(dnSpy.Contracts.Scripting.Debugger.IStackFrame)">
            <summary>
            Let the program execute until it returns to <paramref name="frame"/>
            </summary>
            <param name="frame">Frame</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.RunToAsync(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.Int32)">
            <summary>
            Let the program execute until it returns to <paramref name="frame"/> and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitAsync(System.Int32)"/>
            </summary>
            <param name="frame">Frame</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.RunToWait(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.Int32)">
            <summary>
            Let the program execute until it returns to <paramref name="frame"/> and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Int32)"/>
            </summary>
            <param name="frame">Frame</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.RunToWait(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Let the program execute until it returns to <paramref name="frame"/> and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="frame">Frame</param>
            <param name="token">Cancellation token</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.SetOffset(System.Int32)">
            <summary>
            Set next instruction to execute. All <see cref="T:dnSpy.Contracts.Scripting.Debugger.IStackFrame"/> and <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>
            instances will be neutered and can't be used after this method returns.
            </summary>
            <param name="offset">New offset within the current method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.SetOffset(System.UInt32)">
            <summary>
            Set next instruction to execute. All <see cref="T:dnSpy.Contracts.Scripting.Debugger.IStackFrame"/> and <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>
            instances will be neutered and can't be used after this method returns.
            </summary>
            <param name="offset">New offset within the current method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.SetNativeOffset(System.Int32)">
            <summary>
            Set next instruction to execute. All <see cref="T:dnSpy.Contracts.Scripting.Debugger.IStackFrame"/> and <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>
            instances will be neutered and can't be used after this method returns.
            </summary>
            <param name="offset">New offset within the current method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.SetNativeOffset(System.UInt32)">
            <summary>
            Set next instruction to execute. All <see cref="T:dnSpy.Contracts.Scripting.Debugger.IStackFrame"/> and <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>
            instances will be neutered and can't be used after this method returns.
            </summary>
            <param name="offset">New offset within the current method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.SetOffset(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.Int32)">
            <summary>
            Set next instruction to execute. All <see cref="T:dnSpy.Contracts.Scripting.Debugger.IStackFrame"/> and <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>
            instances will be neutered and can't be used after this method returns.
            </summary>
            <param name="frame">Frame</param>
            <param name="offset">New offset within the current method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.SetOffset(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.UInt32)">
            <summary>
            Set next instruction to execute. All <see cref="T:dnSpy.Contracts.Scripting.Debugger.IStackFrame"/> and <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>
            instances will be neutered and can't be used after this method returns.
            </summary>
            <param name="frame">Frame</param>
            <param name="offset">New offset within the current method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.SetNativeOffset(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.Int32)">
            <summary>
            Set next instruction to execute. All <see cref="T:dnSpy.Contracts.Scripting.Debugger.IStackFrame"/> and <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>
            instances will be neutered and can't be used after this method returns.
            </summary>
            <param name="frame">Frame</param>
            <param name="offset">New offset within the current method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.SetNativeOffset(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.UInt32)">
            <summary>
            Set next instruction to execute. All <see cref="T:dnSpy.Contracts.Scripting.Debugger.IStackFrame"/> and <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>
            instances will be neutered and can't be used after this method returns.
            </summary>
            <param name="frame">Frame</param>
            <param name="offset">New offset within the current method</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Threads">
            <summary>
            Gets all threads
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.ActiveThread">
            <summary>
            Gets/sets the active thread shown in the UI
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.ActiveFrame">
            <summary>
            Gets/sets the active stack frame of the active thread shown in the UI. See also
            <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.ActiveILFrame"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.ActiveILFrame">
            <summary>
            Gets the active IL frame. This is the first IL frame in the active thread, and is usually
            <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.ActiveFrame"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.ActiveFrameIndex">
            <summary>
            Gets/sets the active stack frame index of the active thread shown in the UI
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.AppDomains">
            <summary>
            Gets all AppDomains
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain">
            <summary>
            Gets the first <see cref="T:dnSpy.Contracts.Scripting.Debugger.IAppDomain"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.AppDomains"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Assemblies">
            <summary>
            Gets all assemblies in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Modules">
            <summary>
            Gets all modules in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.CorLib">
            <summary>
            Gets the core module (mscorlib) in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetModule(System.Reflection.Module)">
            <summary>
            Finds a module in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
            <param name="module">Module</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetModule(dnSpy.Contracts.Scripting.Debugger.ModuleName)">
            <summary>
            Finds a module in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
            <param name="name">Module name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetModuleByName(System.String)">
            <summary>
            Finds a module in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
            <param name="name">Full path, filename, or filename without extension of module</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetAssembly(System.Reflection.Assembly)">
            <summary>
            Finds an assembly in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
            <param name="asm">Assembly</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetAssembly(System.String)">
            <summary>
            Finds an assembly in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
            <param name="name">Full path, filename, or filename without extension of assembly, or
            assembly simple name or assembly full name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetClass(System.String,System.String)">
            <summary>
            Finds a class in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetMethod(System.String,System.String,System.String)">
            <summary>
            Finds a method in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <param name="methodName">Method name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetField(System.String,System.String,System.String)">
            <summary>
            Finds a field in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <param name="fieldName">Field name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetProperty(System.String,System.String,System.String)">
            <summary>
            Finds a property in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <param name="propertyName">Property name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetEvent(System.String,System.String,System.String)">
            <summary>
            Finds an event in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <param name="eventName">Event name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetType(System.String,System.String)">
            <summary>
            Finds a type in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetType(System.String,System.String,dnSpy.Contracts.Scripting.Debugger.IDebuggerType[])">
            <summary>
            Finds a type in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <param name="genericArguments">Generic arguments</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetType(System.Type)">
            <summary>
            Finds a type in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
            <param name="type">A type that must exist in one of the loaded assemblies in the
            debugged process.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetField(System.Reflection.FieldInfo)">
            <summary>
            Gets a field
            </summary>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetMethod(System.Reflection.MethodBase)">
            <summary>
            Gets a method
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetProperty(System.Reflection.PropertyInfo)">
            <summary>
            Gets a property
            </summary>
            <param name="prop">Property</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetEvent(System.Reflection.EventInfo)">
            <summary>
            Gets an event
            </summary>
            <param name="evt">Event</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Void">
            <summary>
            Gets type <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Void"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Boolean">
            <summary>
            Gets type <see cref="T:System.Boolean"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Char">
            <summary>
            Gets type <see cref="T:System.Char"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.SByte">
            <summary>
            Gets type <see cref="T:System.SByte"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Byte">
            <summary>
            Gets type <see cref="T:System.Byte"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Int16">
            <summary>
            Gets type <see cref="T:System.Int16"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.UInt16">
            <summary>
            Gets type <see cref="T:System.UInt16"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Int32">
            <summary>
            Gets type <see cref="T:System.Int32"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.UInt32">
            <summary>
            Gets type <see cref="T:System.UInt32"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Int64">
            <summary>
            Gets type <see cref="T:System.Int64"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.UInt64">
            <summary>
            Gets type <see cref="T:System.UInt64"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Single">
            <summary>
            Gets type <see cref="T:System.Single"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Double">
            <summary>
            Gets type <see cref="T:System.Double"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.String">
            <summary>
            Gets type <see cref="T:System.String"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.TypedReference">
            <summary>
            Gets type <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.TypedReference"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.IntPtr">
            <summary>
            Gets type <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.IntPtr"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.UIntPtr">
            <summary>
            Gets type <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.UIntPtr"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Object">
            <summary>
            Gets type <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Object"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Decimal">
            <summary>
            Gets type <see cref="T:System.Decimal"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.CreateBreakpoint(dnSpy.Contracts.Scripting.Debugger.ModuleName,System.UInt32,System.UInt32,System.Func{dnSpy.Contracts.Scripting.Debugger.IILBreakpoint,System.Boolean})">
            <summary>
            Creates an IL code breakpoint that's only valid for the current debugging session (or
            the next one if we're not debugging). The breakpoint is not added to the breakpoints
            shown in the UI.
            </summary>
            <param name="module">Module</param>
            <param name="token">Method token</param>
            <param name="offset">IL code offset in method</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.CreateBreakpoint(dnSpy.Contracts.Scripting.Debugger.ModuleName,System.UInt32,System.Int32,System.Func{dnSpy.Contracts.Scripting.Debugger.IILBreakpoint,System.Boolean})">
            <summary>
            Creates an IL code breakpoint that's only valid for the current debugging session (or
            the next one if we're not debugging). The breakpoint is not added to the breakpoints
            shown in the UI.
            </summary>
            <param name="module">Module</param>
            <param name="token">Method token</param>
            <param name="offset">IL code offset in method</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.CreateNativeBreakpoint(dnSpy.Contracts.Scripting.Debugger.ModuleName,System.UInt32,System.UInt32,System.Func{dnSpy.Contracts.Scripting.Debugger.INativeBreakpoint,System.Boolean})">
            <summary>
            Creates a native code breakpoint that's only valid for the current debugging session.
            The breakpoint is not added to the breakpoints shown in the UI. The method must have
            been jitted or setting the breakpoint will fail.
            </summary>
            <param name="module">Module</param>
            <param name="token">Method token</param>
            <param name="offset">Native code offset in method</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.CreateNativeBreakpoint(dnSpy.Contracts.Scripting.Debugger.ModuleName,System.UInt32,System.Int32,System.Func{dnSpy.Contracts.Scripting.Debugger.INativeBreakpoint,System.Boolean})">
            <summary>
            Creates a native code breakpoint that's only valid for the current debugging session.
            The breakpoint is not added to the breakpoints shown in the UI. The method must have
            been jitted or setting the breakpoint will fail.
            </summary>
            <param name="module">Module</param>
            <param name="token">Method token</param>
            <param name="offset">Native code offset in method</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.CreateNativeBreakpoint(dnSpy.Contracts.Scripting.Debugger.IDebuggerCode,System.UInt32,System.Func{dnSpy.Contracts.Scripting.Debugger.INativeBreakpoint,System.Boolean})">
            <summary>
            Creates a native code breakpoint that's only valid for the current debugging session (or
            the next one if we're not debugging). The breakpoint is not added to the breakpoints
            shown in the UI. The method must have been jitted or setting the breakpoint will fail.
            </summary>
            <param name="code">Native code</param>
            <param name="offset">Native code offset in method</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.CreateNativeBreakpoint(dnSpy.Contracts.Scripting.Debugger.IDebuggerCode,System.Int32,System.Func{dnSpy.Contracts.Scripting.Debugger.INativeBreakpoint,System.Boolean})">
            <summary>
            Creates a native code breakpoint that's only valid for the current debugging session (or
            the next one if we're not debugging). The breakpoint is not added to the breakpoints
            shown in the UI. The method must have been jitted or setting the breakpoint will fail.
            </summary>
            <param name="code">Native code</param>
            <param name="offset">Native code offset in method</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.CreateBreakpoint(dnSpy.Contracts.Scripting.Debugger.DebugEventKind,System.Func{dnSpy.Contracts.Scripting.Debugger.IEventBreakpoint,dnSpy.Contracts.Scripting.Debugger.IDebugEventContext,System.Boolean})">
            <summary>
            Creates an event breakpoint that's only valid for the current debugging session (or
            the next one if we're not debugging). The breakpoint is not added to the breakpoints
            shown in the UI.
            </summary>
            <param name="eventKind">Event</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.CreateLoadModuleBreakpoint(System.Func{dnSpy.Contracts.Scripting.Debugger.IEventBreakpoint,dnSpy.Contracts.Scripting.Debugger.IModuleEventContext,System.Boolean})">
            <summary>
            Creates a <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.LoadModule"/> debug event breakpoint
            </summary>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.CreateAnyEventBreakpoint(System.Func{dnSpy.Contracts.Scripting.Debugger.IAnyEventBreakpoint,dnSpy.Contracts.Scripting.Debugger.IDebugEventContext,System.Boolean})">
            <summary>
            Creates an any-event breakpoint that's only valid for the current debugging session (or
            the next one if we're not debugging). The breakpoint is not added to the breakpoints
            shown in the UI.
            </summary>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.BreakOnLoad(System.String,System.Action{dnSpy.Contracts.Scripting.Debugger.IDebuggerModule})">
            <summary>
            Breaks when a module gets loaded
            </summary>
            <param name="name">Module name. Can be the full path or just the filename or filename
            without the extension</param>
            <param name="action">Called (on the UI thread) when the module gets loaded</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.BreakOnLoadAssembly(System.String,System.Action{dnSpy.Contracts.Scripting.Debugger.IDebuggerAssembly},dnlib.DotNet.AssemblyNameComparerFlags)">
            <summary>
            Breaks when an assembly gets loaded
            </summary>
            <param name="assemblyName">Assembly name or just part of the full name</param>
            <param name="action">Called (on the UI thread) when the module gets loaded</param>
            <param name="flags">Assembly name comparer flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.BreakOnLoadAssembly(dnlib.DotNet.IAssembly,System.Action{dnSpy.Contracts.Scripting.Debugger.IDebuggerAssembly},dnlib.DotNet.AssemblyNameComparerFlags)">
            <summary>
            Breaks when an assembly gets loaded
            </summary>
            <param name="assembly">Assembly</param>
            <param name="action">Called (on the UI thread) when the module gets loaded</param>
            <param name="flags">Assembly name comparer flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Remove(dnSpy.Contracts.Scripting.Debugger.IBreakpoint)">
            <summary>
            Removes a breakpoint
            </summary>
            <param name="bp">Breakpoint</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Read(System.UInt64,System.Byte[],System.Int64,System.UInt32)">
            <summary>
            Reads memory from the debugged process. Unmapped memory is read as 0s.
            </summary>
            <param name="address">Address</param>
            <param name="array">Destination</param>
            <param name="index">Index in <paramref name="array"/></param>
            <param name="count">Number of bytes to read</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Read(System.UInt64,System.Byte[],System.Int64,System.Int32)">
            <summary>
            Reads memory from the debugged process. Unmapped memory is read as 0s.
            </summary>
            <param name="address">Address</param>
            <param name="array">Destination</param>
            <param name="index">Index in <paramref name="array"/></param>
            <param name="count">Number of bytes to read</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Read(System.UInt64,System.UInt32)">
            <summary>
            Reads memory from the debugged process. Unmapped memory is read as 0s.
            </summary>
            <param name="address">Address</param>
            <param name="count">Number of bytes to read</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Read(System.UInt64,System.Int32)">
            <summary>
            Reads memory from the debugged process. Unmapped memory is read as 0s.
            </summary>
            <param name="address">Address</param>
            <param name="count">Number of bytes to read</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.Byte[],System.Int64,System.UInt32)">
            <summary>
            Writes data to memory in the debugged process. Returns the number of bytes written.
            </summary>
            <param name="address">Address</param>
            <param name="array">Source</param>
            <param name="index">Index in <paramref name="array"/></param>
            <param name="count">Number of bytes to write</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.Byte[],System.Int64,System.Int32)">
            <summary>
            Writes data to memory in the debugged process. Returns the number of bytes written.
            </summary>
            <param name="address">Address</param>
            <param name="array">Source</param>
            <param name="index">Index in <paramref name="array"/></param>
            <param name="count">Number of bytes to write</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.Byte[])">
            <summary>
            Writes data to memory in the debugged process. Throws if all bytes couldn't be written.
            </summary>
            <param name="address">Address</param>
            <param name="array">Source</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ReadBoolean(System.UInt64)">
            <summary>
            Reads a <see cref="T:System.Boolean"/> from an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ReadChar(System.UInt64)">
            <summary>
            Reads a <see cref="T:System.Char"/> from an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ReadSByte(System.UInt64)">
            <summary>
            Reads a <see cref="T:System.SByte"/> from an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ReadByte(System.UInt64)">
            <summary>
            Reads a <see cref="T:System.Byte"/> from an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ReadInt16(System.UInt64)">
            <summary>
            Reads a <see cref="T:System.Int16"/> from an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ReadUInt16(System.UInt64)">
            <summary>
            Reads a <see cref="T:System.UInt16"/> from an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ReadInt32(System.UInt64)">
            <summary>
            Reads a <see cref="T:System.Int32"/> from an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ReadUInt32(System.UInt64)">
            <summary>
            Reads a <see cref="T:System.UInt32"/> from an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ReadInt64(System.UInt64)">
            <summary>
            Reads a <see cref="T:System.Int64"/> from an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ReadUInt64(System.UInt64)">
            <summary>
            Reads a <see cref="T:System.UInt64"/> from an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ReadSingle(System.UInt64)">
            <summary>
            Reads a <see cref="T:System.Single"/> from an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ReadDouble(System.UInt64)">
            <summary>
            Reads a <see cref="T:System.Double"/> from an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ReadDecimal(System.UInt64)">
            <summary>
            Reads a <see cref="T:System.Decimal"/> from an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> to an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> to an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> to an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> to an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> to an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> to an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> to an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> to an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> to an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> to an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> to an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> to an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> to an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <param name="value">Value</param>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerAssembly">
            <summary>
            An assembly in the debugged process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerAssembly.UniqueId">
            <summary>
            Unique id per debugger
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerAssembly.AppDomain">
            <summary>
            Gets the AppDomain
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerAssembly.Modules">
            <summary>
            Gets the modules
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerAssembly.IsFullyTrusted">
            <summary>
            true if the assembly has been granted full trust by the runtime security system
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerAssembly.Name">
            <summary>
            Assembly name, and is usually the full path to the manifest (first) module on disk
            (the EXE or DLL file).
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerAssembly.FullName">
            <summary>
            Gets the full name, identical to the dnlib assembly full name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerAssembly.ManifestModule">
            <summary>
            Gets the manifest module or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerAssembly.HasUnloaded">
            <summary>
            true if the assembly has been unloaded
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass">
            <summary>
            A non-instantiated type (see <c>ICorDebugClass</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.Namespace">
            <summary>
            Gets the namespace or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.FullName">
            <summary>
            Gets the full name, which is the same as calling <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.Attributes">
            <summary>
            Gets the type attributes
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.Visibility">
            <summary>
            Gets the visibility
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsNotPublic">
            <summary>
            true if not public
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsPublic">
            <summary>
            true if public
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsNestedPublic">
            <summary>
            true if nested public
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsNestedPrivate">
            <summary>
            true if nested private
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsNestedFamily">
            <summary>
            true if nested family
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsNestedAssembly">
            <summary>
            true if nested assembly
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsNestedFamilyAndAssembly">
            <summary>
            true if nested family and assembly
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsNestedFamilyOrAssembly">
            <summary>
            true if nested family or assembly
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.Layout">
            <summary>
            Gets the layout
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsAutoLayout">
            <summary>
            true if auto layout
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsSequentialLayout">
            <summary>
            true if sequential layout
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsExplicitLayout">
            <summary>
            true if explicit layout
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsInterface">
            <summary>
            true if it's an interface
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsClass">
            <summary>
            true if it's a class or struct
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsAbstract">
            <summary>
            true if it's abstract
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsSealed">
            <summary>
            true if it's sealed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsSpecialName">
            <summary>
            true if's special name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsImport">
            <summary>
            true if it's an import
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsSerializable">
            <summary>
            true if it's serializable
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsWindowsRuntime">
            <summary>
            true if it's windows runtime
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.StringFormat">
            <summary>
            Gets the string format
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsAnsiClass">
            <summary>
            true if it's an ANSI string class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsUnicodeClass">
            <summary>
            true if it's a unicode string class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsAutoClass">
            <summary>
            true if it's an auto string class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsCustomFormatClass">
            <summary>
            true if it's a custom string format class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsBeforeFieldInit">
            <summary>
            true if it's before field init
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsForwarder">
            <summary>
            true if it's a forwarder
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsRuntimeSpecialName">
            <summary>
            true if it's a runtime special name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.HasSecurity">
            <summary>
            true if it has a security descriptor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.Token">
            <summary>
            Gets the token
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.Module">
            <summary>
            Gets the module
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.BaseType">
            <summary>
            Gets the base type or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsSystemEnum">
            <summary>
            true if this is <see cref="T:System.Enum"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsSystemValueType">
            <summary>
            true if this is <see cref="T:System.ValueType"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsSystemObject">
            <summary>
            true if this is <see cref="T:System.Object"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsSystem(System.String)">
            <summary>
            Returns true if it's a System.XXX type in the corlib (eg. mscorlib)
            </summary>
            <param name="name">Name (not including namespace)</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.SetJustMyCode(System.Boolean)">
            <summary>
            Mark all methods in the type as user code
            </summary>
            <param name="jmc">true to set user code</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.HasAttribute(System.String)">
            <summary>
            Returns true if an attribute is present
            </summary>
            <param name="attributeName">Full name of attribute type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.ToType(dnSpy.Contracts.Scripting.Debugger.IDebuggerType[])">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/>
            </summary>
            <param name="typeArgs">Generic type arguments or null</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.Methods">
            <summary>
            Gets all methods declared in this class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.Fields">
            <summary>
            Gets all fields declared in this class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.Properties">
            <summary>
            Gets all properties declared in this class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.Events">
            <summary>
            Gets all events declared in this class
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetMethods(System.Boolean)">
            <summary>
            Returns all methods
            </summary>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetMethods(System.String,System.Boolean)">
            <summary>
            Finds methods
            </summary>
            <param name="name">Method name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetMethod(System.String,System.Boolean)">
            <summary>
            Finds a method. If only one method is found, it's returned, else the method that takes
            no arguments is returned, or null if it doesn't exist.
            </summary>
            <param name="name">Method name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetMethod(System.String,System.Object[])">
            <summary>
            Finds a method with a certain signature. Base classes are also searched.
            </summary>
            <param name="name">Method name</param>
            <param name="argTypes">Argument types. This can be <see cref="T:System.Type"/>s or strings
            with the full name of the argument types</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetMethod(System.String,System.Boolean,System.Object[])">
            <summary>
            Finds a method with a certain signature.
            </summary>
            <param name="name">Method name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <param name="argTypes">Argument types. This can be <see cref="T:System.Type"/>s or strings
            with the full name of the argument types</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetConstructors">
            <summary>
            Returns all constructors
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetConstructor">
            <summary>
            Returns the default constructor or null if not found
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetConstructor(System.Object[])">
            <summary>
            Returns a constructor
            </summary>
            <param name="argTypes">Argument types. This can be <see cref="T:System.Type"/>s or strings
            with the full name of the argument types</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetFields(System.Boolean)">
            <summary>
            Returns all fields
            </summary>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetFields(System.String,System.Boolean)">
            <summary>
            Finds fields
            </summary>
            <param name="name">Field name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetField(System.String,System.Boolean)">
            <summary>
            Finds a field
            </summary>
            <param name="name">Field name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetProperties(System.Boolean)">
            <summary>
            Returns all properties
            </summary>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetProperties(System.String,System.Boolean)">
            <summary>
            Finds properties
            </summary>
            <param name="name">Property name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetProperty(System.String,System.Boolean)">
            <summary>
            Finds a property
            </summary>
            <param name="name">Property name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetEvents(System.Boolean)">
            <summary>
            Returns all events
            </summary>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetEvents(System.String,System.Boolean)">
            <summary>
            Finds events
            </summary>
            <param name="name">Event name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetEvent(System.String,System.Boolean)">
            <summary>
            Finds a event
            </summary>
            <param name="name">Event name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetField(System.Reflection.FieldInfo)">
            <summary>
            Gets a field
            </summary>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetMethod(System.Reflection.MethodBase)">
            <summary>
            Gets a method
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetProperty(System.Reflection.PropertyInfo)">
            <summary>
            Gets a property
            </summary>
            <param name="prop">Property</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetEvent(System.Reflection.EventInfo)">
            <summary>
            Gets an event
            </summary>
            <param name="evt">Event</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.Write(dnSpy.Contracts.Highlighting.ISyntaxHighlightOutput,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            Write this to <paramref name="output"/>
            </summary>
            <param name="output">Destination</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.ToString(dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            ToString()
            </summary>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.UInt32)">
            <summary>
            Reads a static field
            </summary>
            <param name="frame">Frame</param>
            <param name="token">Token of field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IStackFrame,dnSpy.Contracts.Scripting.Debugger.IDebuggerField)">
            <summary>
            Reads a static field
            </summary>
            <param name="frame">Frame</param>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.String,System.Boolean)">
            <summary>
            Reads a static field
            </summary>
            <param name="frame">Frame</param>
            <param name="name">Field name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode">
            <summary>
            Code in the debugged process (<c>ICorDebugCode</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.IsIL">
            <summary>
            true if it's IL code, false if native
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.Size">
            <summary>
            Gets the size of the code
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.Address">
            <summary>
            Gets the address of code (eg. IL instructions). If it's IL, it doesn't include the
            method header.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.VersionNumber">
            <summary>
            Gets the EnC (edit and continue) version number of this method
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.Method">
            <summary>
            Gets the method
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.GetCodeChunks">
            <summary>
            Gets all code chunks if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.IsIL"/> is <c>false</c>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.ReadCode">
            <summary>
            Reads the (IL or native) code at <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.Address"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.CreateBreakpoint(System.UInt32,System.Func{dnSpy.Contracts.Scripting.Debugger.IILBreakpoint,System.Boolean})">
            <summary>
            Creates an IL code breakpoint that's only valid for the current debugging session. The
            breakpoint is not added to the breakpoints shown in the UI.
            </summary>
            <param name="offset">IL code offset in method</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.CreateBreakpoint(System.Int32,System.Func{dnSpy.Contracts.Scripting.Debugger.IILBreakpoint,System.Boolean})">
            <summary>
            Creates an IL code breakpoint that's only valid for the current debugging session. The
            breakpoint is not added to the breakpoints shown in the UI.
            </summary>
            <param name="offset">IL code offset in method</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.CreateNativeBreakpoint(System.UInt32,System.Func{dnSpy.Contracts.Scripting.Debugger.INativeBreakpoint,System.Boolean})">
            <summary>
            Creates a native code breakpoint that's only valid for the current debugging session.
            The breakpoint is not added to the breakpoints shown in the UI. The method must have been
            jitted or setting the breakpoint will fail.
            </summary>
            <param name="offset">Native code offset in method</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.CreateNativeBreakpoint(System.Int32,System.Func{dnSpy.Contracts.Scripting.Debugger.INativeBreakpoint,System.Boolean})">
            <summary>
            Creates a native code breakpoint that's only valid for the current debugging session.
            The breakpoint is not added to the breakpoints shown in the UI. The method must have been
            jitted or setting the breakpoint will fail.
            </summary>
            <param name="offset">Native code offset in method</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.Write(dnSpy.Contracts.Highlighting.ISyntaxHighlightOutput,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            Write this to <paramref name="output"/>
            </summary>
            <param name="output">Destination</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.ToString(dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            ToString()
            </summary>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent">
            <summary>
            An event
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent.Attributes">
            <summary>
            Gets the attributes
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent.IsSpecialName">
            <summary>
            true if it's special name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent.IsRuntimeSpecialName">
            <summary>
            true if it's runtime special name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent.EventType">
            <summary>
            Gets the event type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent.Module">
            <summary>
            Owner module
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent.Class">
            <summary>
            Owner class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent.Token">
            <summary>
            Token of method
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent.Adder">
            <summary>
            Gets the adder method or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent.Invoker">
            <summary>
            Gets the invoker method or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent.Remover">
            <summary>
            Gets the remover method or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent.OtherMethods">
            <summary>
            Gets the other methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent.Write(dnSpy.Contracts.Highlighting.ISyntaxHighlightOutput,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            Write this to <paramref name="output"/>
            </summary>
            <param name="output">Destination</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent.ToString(dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            ToString()
            </summary>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerField">
            <summary>
            A field
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.Attributes">
            <summary>
            Gets the attributes
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.Access">
            <summary>
            Gets the access
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsCompilerControlled">
            <summary>
            true if compiler controlled / private scope
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsPrivateScope">
            <summary>
            true if compiler controlled / private scope
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsPrivate">
            <summary>
            true if private
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsFamilyAndAssembly">
            <summary>
            true if family and assembly
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsAssembly">
            <summary>
            true if assembly
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsFamily">
            <summary>
            treu if family
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsFamilyOrAssembly">
            <summary>
            true if family or assembly
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsPublic">
            <summary>
            true if public
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsStatic">
            <summary>
            true if static
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsInitOnly">
            <summary>
            true if init only
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsLiteral">
            <summary>
            true if literal
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsNotSerialized">
            <summary>
            true if not serialized
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsSpecialName">
            <summary>
            true if special name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsPinvokeImpl">
            <summary>
            true if P/Invoke implementation
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsRuntimeSpecialName">
            <summary>
            true if runtime special name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.HasFieldMarshal">
            <summary>
            true if it has a marshal attribute
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.HasDefault">
            <summary>
            true if it has a default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.HasFieldRVA">
            <summary>
            true if it has an RVA
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.FieldSig">
            <summary>
            Gets the method signature. It's currently using custom <see cref="T:dnlib.DotNet.TypeDef"/>,
            <see cref="T:dnlib.DotNet.TypeRef"/> and <see cref="T:dnlib.DotNet.TypeSpec"/> instances that don't reveal all
            information available in the metadata.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.Module">
            <summary>
            Owner module
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.Class">
            <summary>
            Owner class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.Token">
            <summary>
            Token of method
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.Constant">
            <summary>
            Gets the constant
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.ReadStatic(dnSpy.Contracts.Scripting.Debugger.IStackFrame,dnSpy.Contracts.Scripting.Debugger.IDebuggerType)">
            <summary>
            Reads a static field
            </summary>
            <param name="frame">Frame</param>
            <param name="type">Declaring type. Can be null if it's not a generic type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.Write(dnSpy.Contracts.Highlighting.ISyntaxHighlightOutput,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            Write this to <paramref name="output"/>
            </summary>
            <param name="output">Destination</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.ToString(dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            ToString()
            </summary>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod">
            <summary>
            A method in a module in the debugged process (<c>ICorDebugFunction</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.ImplAttributes">
            <summary>
            Gets the implementation attributes
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.Attributes">
            <summary>
            Gets the attributes
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.Access">
            <summary>
            Gets the access
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsCompilerControlled">
            <summary>
            true if compiler controlled / private scope
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsPrivateScope">
            <summary>
            true if compiler controlled / private scope
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsPrivate">
            <summary>
            true if private
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsFamilyAndAssembly">
            <summary>
            true if family and assembly
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsAssembly">
            <summary>
            true if assembly
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsFamily">
            <summary>
            true if family
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsFamilyOrAssembly">
            <summary>
            true if family or assembly
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsPublic">
            <summary>
            true if public
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsStatic">
            <summary>
            true if static
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsFinal">
            <summary>
            true if final
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsVirtual">
            <summary>
            true if virtual
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsHideBySig">
            <summary>
            true if hide by signature
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsNewSlot">
            <summary>
            true if new slot
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsReuseSlot">
            <summary>
            true if reuse slot
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsCheckAccessOnOverride">
            <summary>
            true if check access on override
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsAbstract">
            <summary>
            true if abstract
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsSpecialName">
            <summary>
            true if special name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsPinvokeImpl">
            <summary>
            true if P/Invoke implementation
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsUnmanagedExport">
            <summary>
            true if unmanaged export
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsRuntimeSpecialName">
            <summary>
            true if runtime special name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.HasSecurity">
            <summary>
            true if it has a security descriptor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsRequireSecObject">
            <summary>
            true if require security object
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.CodeType">
            <summary>
            Gets the code type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsIL">
            <summary>
            true if IL code
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsNative">
            <summary>
            true if native code
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsOPTIL">
            <summary>
            true if OPTIL code
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsRuntime">
            <summary>
            true if runtime code
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsUnmanaged">
            <summary>
            true if unmanaged code
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsManaged">
            <summary>
            true if managed code
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsForwardRef">
            <summary>
            true if forward reference
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsPreserveSig">
            <summary>
            true if preserve signature
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsInternalCall">
            <summary>
            true if internal call
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsSynchronized">
            <summary>
            true if synchronized
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsNoInlining">
            <summary>
            true if no inlining
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsAggressiveInlining">
            <summary>
            true if aggressive inlining
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsNoOptimization">
            <summary>
            true if no optimization
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.MethodSig">
            <summary>
            Gets the method signature. It's currently using custom <see cref="T:dnlib.DotNet.TypeDef"/>,
            <see cref="T:dnlib.DotNet.TypeRef"/> and <see cref="T:dnlib.DotNet.TypeSpec"/> instances that don't reveal all
            information available in the metadata.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.Module">
            <summary>
            Owner module
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.Class">
            <summary>
            Owner class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.Token">
            <summary>
            Token of method
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.JustMyCode">
            <summary>
            Gets/sets JMC (just my code) flag
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.CurrentVersionNumber">
            <summary>
            Gets EnC (edit and continue) version number of the latest edit, and might be greater
            than this method's version number. See <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.VersionNumber"/>.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.VersionNumber">
            <summary>
            Gets the EnC (edit and continue) version number of this method
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.LocalVarSigToken">
            <summary>
            Gets the local variables signature token or 0 if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.ILCode">
            <summary>
            Gets the IL code or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.NativeCode">
            <summary>
            Gets the native code or null. If it's a generic method that's been JITed more than once,
            the returned code could be any one of the JITed codes.
            </summary>
            <remarks><c>EnumerateNativeCode()</c> should be called but that method hasn't been
            implemented by the CLR debugger yet.</remarks>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.CreateBreakpoint(System.UInt32,System.Func{dnSpy.Contracts.Scripting.Debugger.IILBreakpoint,System.Boolean})">
            <summary>
            Creates an IL code breakpoint that's only valid for the current debugging session. The
            breakpoint is not added to the breakpoints shown in the UI.
            </summary>
            <param name="offset">IL code offset in method</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.CreateBreakpoint(System.Int32,System.Func{dnSpy.Contracts.Scripting.Debugger.IILBreakpoint,System.Boolean})">
            <summary>
            Creates an IL code breakpoint that's only valid for the current debugging session. The
            breakpoint is not added to the breakpoints shown in the UI.
            </summary>
            <param name="offset">IL code offset in method</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.CreateNativeBreakpoint(System.UInt32,System.Func{dnSpy.Contracts.Scripting.Debugger.INativeBreakpoint,System.Boolean})">
            <summary>
            Creates a native code breakpoint that's only valid for the current debugging session.
            The breakpoint is not added to the breakpoints shown in the UI. The method must have been
            jitted or setting the breakpoint will fail.
            </summary>
            <param name="offset">Native code offset in method</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.CreateNativeBreakpoint(System.Int32,System.Func{dnSpy.Contracts.Scripting.Debugger.INativeBreakpoint,System.Boolean})">
            <summary>
            Creates a native code breakpoint that's only valid for the current debugging session.
            The breakpoint is not added to the breakpoints shown in the UI. The method must have been
            jitted or setting the breakpoint will fail.
            </summary>
            <param name="offset">Native code offset in method</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.Write(dnSpy.Contracts.Highlighting.ISyntaxHighlightOutput,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            Write this to <paramref name="output"/>
            </summary>
            <param name="output">Destination</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.ToString(dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            ToString()
            </summary>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule">
            <summary>
            A module in the debugged process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ModuleName">
            <summary>
            Gets the module name instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.UniqueId">
            <summary>
            Unique id per debugger
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.AppDomain">
            <summary>
            Gets the owner AppDomain
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Assembly">
            <summary>
            Gets the assembly
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.IsManifestModule">
            <summary>
            true if this is the manifest module
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Name">
            <summary>
            For on-disk modules this is a full path. For dynamic modules this is just the filename
            if one was provided. Otherwise, and for other in-memory modules, this is just the simple
            name stored in the module's metadata.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.DnlibName">
            <summary>
            Gets the name from the MD, which is the same as <see cref="P:dnlib.DotNet.ModuleDef.Name"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.UniquerName">
            <summary>
            Gets the name of the module. If it's an in-memory module, the hash code is included to
            make it uniquer since <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Name"/> could have any value.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Address">
            <summary>
            Gets the base address of the module or 0
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Size">
            <summary>
            Gets the size of the module or 0
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.IsDynamic">
            <summary>
            true if it's a dynamic module that can add/remove types
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.IsInMemory">
            <summary>
            true if this is an in-memory module
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.HasUnloaded">
            <summary>
            true if the module has been unloaded
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ResolveAssembly(System.UInt32)">
            <summary>
            Resolves an assembly reference. If the assembly hasn't been loaded, or if
            <paramref name="asmRefToken"/> is invalid, null is returned.
            </summary>
            <param name="asmRefToken">Valid assembly reference token in this module</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetMethod(System.UInt32)">
            <summary>
            Gets a method in this module
            </summary>
            <param name="token"><c>Method</c> token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetField(System.UInt32)">
            <summary>
            Gets a field in this module
            </summary>
            <param name="token"><c>Field</c> token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetProperty(System.UInt32)">
            <summary>
            Gets a property in this module
            </summary>
            <param name="token"><c>Property</c> token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetEvent(System.UInt32)">
            <summary>
            Gets an event in this module
            </summary>
            <param name="token"><c>Event</c> token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetClass(System.UInt32)">
            <summary>
            Gets a type in this module
            </summary>
            <param name="token"><c>TypeDef</c> token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetType(System.UInt32)">
            <summary>
            Gets a type in this module
            </summary>
            <param name="token"><c>TypeDef</c> token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetGlobalVariableValue(System.UInt32)">
            <summary>
            Gets the value of a global field
            </summary>
            <param name="fdToken">Token of a global field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.SetJMCStatus(System.Boolean)">
            <summary>
            Set just my code flag
            </summary>
            <param name="isJustMyCode">true if it's user code</param>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.IsFileLayout">
            <summary>
            true if the memory layout is identical to file layout
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.IsMemoryLayout">
            <summary>
            true if the OS loader has mapped the executable in memory
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.InitializePE">
            <summary>
            Can be called to initialize cached PE data in case that data is destroyed by the program
            at runtime.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.RVAToAddress(System.UInt32)">
            <summary>
            Converts <paramref name="rva"/> to an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.OffsetToAddress(System.UInt32)">
            <summary>
            Converts <paramref name="offset"/> to an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.AddressToRVA(System.UInt64)">
            <summary>
            Converts <paramref name="address"/> to an RVA
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.AddressToOffset(System.UInt64)">
            <summary>
            Converts <paramref name="address"/> to a file offset
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.RVAToOffset(System.UInt32)">
            <summary>
            Converts <paramref name="rva"/> to a file offset
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.OffsetToRVA(System.UInt32)">
            <summary>
            Converts <paramref name="offset"/> to an RVA
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Read(System.UInt32,System.Byte[],System.Int64,System.UInt32)">
            <summary>
            Reads memory from the debugged process. Unmapped memory is read as 0s.
            </summary>
            <param name="rva">RVA</param>
            <param name="array">Destination</param>
            <param name="index">Index in <paramref name="array"/></param>
            <param name="count">Number of bytes to read</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Read(System.UInt32,System.Byte[],System.Int64,System.Int32)">
            <summary>
            Reads memory from the debugged process. Unmapped memory is read as 0s.
            </summary>
            <param name="rva">RVA</param>
            <param name="array">Destination</param>
            <param name="index">Index in <paramref name="array"/></param>
            <param name="count">Number of bytes to read</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Read(System.UInt32,System.UInt32)">
            <summary>
            Reads memory from the debugged process. Unmapped memory is read as 0s.
            </summary>
            <param name="rva">RVA</param>
            <param name="count">Number of bytes to read</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Read(System.UInt32,System.Int32)">
            <summary>
            Reads memory from the debugged process. Unmapped memory is read as 0s.
            </summary>
            <param name="rva">RVA</param>
            <param name="count">Number of bytes to read</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.Byte[],System.Int64,System.UInt32)">
            <summary>
            Writes data to memory in the debugged process. Returns the number of bytes written.
            </summary>
            <param name="rva">RVA</param>
            <param name="array">Source</param>
            <param name="index">Index in <paramref name="array"/></param>
            <param name="count">Number of bytes to write</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.Byte[],System.Int64,System.Int32)">
            <summary>
            Writes data to memory in the debugged process. Returns the number of bytes written.
            </summary>
            <param name="rva">RVA</param>
            <param name="array">Source</param>
            <param name="index">Index in <paramref name="array"/></param>
            <param name="count">Number of bytes to write</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.Byte[])">
            <summary>
            Writes data to memory in the debugged process. Throws if all bytes couldn't be written.
            </summary>
            <param name="rva">RVA</param>
            <param name="array">Source</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadBoolean(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Boolean"/> from an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadChar(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Char"/> from an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadSByte(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.SByte"/> from an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadByte(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Byte"/> from an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadInt16(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Int16"/> from an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadUInt16(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.UInt16"/> from an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadInt32(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Int32"/> from an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadUInt32(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.UInt32"/> from an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadInt64(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Int64"/> from an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadUInt64(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.UInt64"/> from an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadSingle(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Single"/> from an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadDouble(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Double"/> from an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadDecimal(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Decimal"/> from an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> to an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> to an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> to an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> to an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> to an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> to an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> to an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> to an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> to an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> to an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> to an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> to an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> to an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadOffset(System.UInt32,System.Byte[],System.Int64,System.UInt32)">
            <summary>
            Reads memory from the debugged process. Unmapped memory is read as 0s.
            </summary>
            <param name="offset">File offset</param>
            <param name="array">Destination</param>
            <param name="index">Index in <paramref name="array"/></param>
            <param name="count">Number of bytes to read</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadOffset(System.UInt32,System.Byte[],System.Int64,System.Int32)">
            <summary>
            Reads memory from the debugged process. Unmapped memory is read as 0s.
            </summary>
            <param name="offset">File offset</param>
            <param name="array">Destination</param>
            <param name="index">Index in <paramref name="array"/></param>
            <param name="count">Number of bytes to read</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadOffset(System.UInt32,System.UInt32)">
            <summary>
            Reads memory from the debugged process. Unmapped memory is read as 0s.
            </summary>
            <param name="offset">File offset</param>
            <param name="count">Number of bytes to read</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadOffset(System.UInt32,System.Int32)">
            <summary>
            Reads memory from the debugged process. Unmapped memory is read as 0s.
            </summary>
            <param name="offset">File offset</param>
            <param name="count">Number of bytes to read</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.Byte[],System.Int64,System.UInt32)">
            <summary>
            Writes data to memory in the debugged process. Returns the number of bytes written.
            </summary>
            <param name="offset">File offset</param>
            <param name="array">Source</param>
            <param name="index">Index in <paramref name="array"/></param>
            <param name="count">Number of bytes to write</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.Byte[],System.Int64,System.Int32)">
            <summary>
            Writes data to memory in the debugged process. Returns the number of bytes written.
            </summary>
            <param name="offset">File offset</param>
            <param name="array">Source</param>
            <param name="index">Index in <paramref name="array"/></param>
            <param name="count">Number of bytes to write</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.Byte[])">
            <summary>
            Writes data to memory in the debugged process. Throws if all bytes couldn't be written.
            </summary>
            <param name="offset">File offset</param>
            <param name="array">Source</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadBooleanOffset(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Boolean"/> from an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadCharOffset(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Char"/> from an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadSByteOffset(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.SByte"/> from an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadByteOffset(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Byte"/> from an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadInt16Offset(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Int16"/> from an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadUInt16Offset(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.UInt16"/> from an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadInt32Offset(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Int32"/> from an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadUInt32Offset(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.UInt32"/> from an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadInt64Offset(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Int64"/> from an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadUInt64Offset(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.UInt64"/> from an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadSingleOffset(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Single"/> from an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadDoubleOffset(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Double"/> from an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadDecimalOffset(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Decimal"/> from an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> to an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> to an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> to an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> to an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> to an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> to an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> to an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> to an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> to an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> to an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> to an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> to an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> to an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Save">
            <summary>
            Save the module to a byte[]. Can't be called if it's a dynamic assembly (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.IsDynamic"/> is true)
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Save(System.IO.Stream)">
            <summary>
            Save the module to a stream. Can't be called if it's a dynamic assembly (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.IsDynamic"/> is true)
            </summary>
            <param name="stream">Destination stream</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Save(System.String)">
            <summary>
            Save the module to a file. Can't be called if it's a dynamic assembly (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.IsDynamic"/> is true)
            </summary>
            <param name="filename">Filename</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetClass(System.String)">
            <summary>
            Finds a class
            </summary>
            <param name="className">Class name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetMethod(System.String,System.String)">
            <summary>
            Finds a method
            </summary>
            <param name="className">Class name</param>
            <param name="methodName">Method name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetField(System.String,System.String)">
            <summary>
            Finds a field
            </summary>
            <param name="className">Class name</param>
            <param name="fieldName">Field name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetProperty(System.String,System.String)">
            <summary>
            Finds a property
            </summary>
            <param name="className">Class name</param>
            <param name="propertyName">Property name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetEvent(System.String,System.String)">
            <summary>
            Finds an event
            </summary>
            <param name="className">Class name</param>
            <param name="eventName">Event name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetType(System.String)">
            <summary>
            Finds a type
            </summary>
            <param name="className">Class name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetType(System.String,dnSpy.Contracts.Scripting.Debugger.IDebuggerType[])">
            <summary>
            Finds a type
            </summary>
            <param name="className">Class name</param>
            <param name="genericArguments">Generic arguments</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetType(System.Type)">
            <summary>
            Finds a type
            </summary>
            <param name="type">A type that must exist in one of the loaded assemblies in the
            debugged process.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetField(System.Reflection.FieldInfo)">
            <summary>
            Gets a field
            </summary>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetMethod(System.Reflection.MethodBase)">
            <summary>
            Gets a method
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetProperty(System.Reflection.PropertyInfo)">
            <summary>
            Gets a property
            </summary>
            <param name="prop">Property</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetEvent(System.Reflection.EventInfo)">
            <summary>
            Gets an event
            </summary>
            <param name="evt">Event</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty">
            <summary>
            A property
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty.Attributes">
            <summary>
            Gets the attributes
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty.IsSpecialName">
            <summary>
            true if special name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty.IsRuntimeSpecialName">
            <summary>
            true if it has a special name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty.HasDefault">
            <summary>
            true if it has a default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty.PropertySig">
            <summary>
            Gets the property signature. It's currently using custom <see cref="T:dnlib.DotNet.TypeDef"/>,
            <see cref="T:dnlib.DotNet.TypeRef"/> and <see cref="T:dnlib.DotNet.TypeSpec"/> instances that don't reveal all
            information available in the metadata.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty.Module">
            <summary>
            Owner module
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty.Class">
            <summary>
            Owner class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty.Token">
            <summary>
            Token of method
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty.Getter">
            <summary>
            Gets the getter method or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty.Setter">
            <summary>
            Gets the setter method or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty.OtherMethods">
            <summary>
            Gets the other methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty.Write(dnSpy.Contracts.Highlighting.ISyntaxHighlightOutput,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            Write this to <paramref name="output"/>
            </summary>
            <param name="output">Destination</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty.ToString(dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            ToString()
            </summary>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread">
            <summary>
            A thread in the debugged process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.UniqueId">
            <summary>
            Unique id per debugger
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.ThreadId">
            <summary>
            Gets the thread ID (calls ICorDebugThread::GetID()). This is not necessarily the OS
            thread ID in V2 or later, see <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.VolatileThreadId"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.VolatileThreadId">
            <summary>
            Gets the OS thread ID (calls ICorDebugThread2::GetVolatileOSThreadID()) or -1. This value
            can change during execution of the thread.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.HasExited">
            <summary>
            true if the thread has exited
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.AppDomain">
            <summary>
            Gets the AppDomain or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Frames">
            <summary>
            Gets all stack frames
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.ActiveFrame">
            <summary>
            Gets the active stack frame. See also <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.ActiveILFrame"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.ActiveILFrame">
            <summary>
            Gets the active IL frame. This is the first IL frame in the active thread, and is usually
            <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.ActiveFrame"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Handle">
            <summary>
            Gets the current thread handle. It's owned by the CLR debugger. The handle may change as
            the process executes, and may be different for different parts of the thread.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.IsRunning">
            <summary>
            true if the thread is running
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.IsSuspended">
            <summary>
            true if the thread is suspended
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.State">
            <summary>
            Gets/sets the thread state
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.StopRequested">
            <summary>
            true if a termination of the thread has been requested.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.SuspendRequested">
            <summary>
            true if a suspension of the thread has been requested.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.IsBackground">
            <summary>
            true if the thread is running in the background.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.IsUnstarted">
            <summary>
            true if the thread has not started executing.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.IsStopped">
            <summary>
            true if the thread has been terminated.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.IsWaitSleepJoin">
            <summary>
            true if the thread is waiting for another thread to complete a task.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.IsUserStateSuspended">
            <summary>
            true if the thread has been suspended. Use <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.IsSuspended"/> instead of this property.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.IsUnsafePoint">
            <summary>
            true if the thread is at an unsafe point. That is, the thread is at a point in execution where it may block garbage collection.
            
            Debug events may be dispatched from unsafe points, but suspending a thread at an unsafe point will very likely cause a deadlock until the thread is resumed. The safe and unsafe points are determined by the just-in-time (JIT) and garbage collection implementation.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.IsThreadPool">
            <summary>
            true if the thread is from the thread pool.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.UserState">
            <summary>
            Gets the user state of this thread
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Object">
            <summary>
            Gets the CLR thread object
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.CurrentException">
            <summary>
            Gets the current exception or null
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.InterceptCurrentException(dnSpy.Contracts.Scripting.Debugger.IStackFrame)">
            <summary>
            Intercept the current exception on this thread
            </summary>
            <param name="frame">Frame</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.ActiveChain">
            <summary>
            Gets the active chain or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Chains">
            <summary>
            Gets all chains
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.CreateBox(System.Object)">
            <summary>
            Creates a reference to a boxed value that can be passed to the debugged process
            </summary>
            <param name="value">A primitive type (ints, doubles, string, null),
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>, <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/>, <see cref="T:System.Type"/></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.CreateBox(dnSpy.Contracts.Scripting.Debugger.IDebuggerType)">
            <summary>
            Creates a reference to a boxed type filled with 0s. The constructor isn't called.
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.CreateBox(System.Type)">
            <summary>
            Creates a reference to a boxed type filled with 0s. The constructor isn't called.
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Create(System.Object)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/> that can be passed to the debugged process
            </summary>
            <param name="value">A simple type (ints, doubles, string, null),
            arrays (<c>int[]</c>, <c>string[]</c>), <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>,
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/>, <see cref="T:System.Type"/>.
            Use <see cref="T:dnSpy.Contracts.Scripting.Debugger.Box"/> to box values or call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.CreateBox(System.Object)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Create(dnSpy.Contracts.Scripting.Debugger.IDebuggerType)">
            <summary>
            Creates a type filled with 0s. The constructor isn't called.
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Create(System.Type)">
            <summary>
            Creates a type filled with 0s. The constructor isn't called.
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.CreateArray(dnSpy.Contracts.Scripting.Debugger.IDebuggerType,System.Int32)">
            <summary>
            Creates an array. <paramref name="elementType"/> must be a primitive type (but not
            <see cref="T:System.IntPtr"/> or <see cref="T:System.UIntPtr"/>) or a reference type
            </summary>
            <param name="elementType">Array element type</param>
            <param name="length">Number of elements</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.CreateArray(System.Type,System.Int32)">
            <summary>
            Creates an array. <paramref name="elementType"/> must be a primitive type (but not
            <see cref="T:System.IntPtr"/> or <see cref="T:System.UIntPtr"/>) or a reference type
            </summary>
            <param name="elementType">Array element type</param>
            <param name="length">Number of elements</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Create(dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod,System.Object[])">
            <summary>
            Creates a new type instance. The returned type is a reference.
            If it's a value type, the returned type is a reference to a boxed value.
            </summary>
            <param name="ctor">Constructor to call</param>
            <param name="args">Arguments. Each argument is passed to <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Create(System.Object)"/>,
            see its documentation for more details.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Create(System.Object[],dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod,System.Object[])">
            <summary>
            Creates a new type instance. The returned type is a reference.
            If it's a value type, the returned type is a reference to a boxed value.
            </summary>
            <param name="genericArgs">Generic type arguments (<see cref="T:System.Type"/> or <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances)</param>
            <param name="ctor">Constructor to call</param>
            <param name="args">Arguments. Each argument is passed to <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Create(System.Object)"/>,
            see its documentation for more details.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Call(dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod,System.Object[])">
            <summary>
            Calls a method in the debugged process
            </summary>
            <param name="method">Method to call</param>
            <param name="args">Arguments, either simple types (ints, doubles, strings, null),
            arrays (<c>int[], string[])</c>, <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>, <see cref="T:System.Type"/>,
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances.
            If this is an instance method, the first argument must be the <c>this</c> pointer. Use
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.Box"/> to box values.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Call(System.Object[],dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod,System.Object[])">
            <summary>
            Calls a method in the debugged process
            </summary>
            <param name="genericArgs">Generic type arguments followed by generic method arguments
            (<see cref="T:System.Type"/> or <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances)</param>
            <param name="method">Method to call</param>
            <param name="args">Arguments, either simple types (ints, doubles, strings, null),
            arrays (<c>int[], string[])</c>, <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>, <see cref="T:System.Type"/>,
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances.
            If this is an instance method, the first argument must be the <c>this</c> pointer. Use
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.Box"/> to box values.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Call(System.String,System.String,System.String,System.Object[])">
            <summary>
            Calls a method in the debugged process
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <param name="methodName">Method name</param>
            <param name="args">Arguments, either simple types (ints, doubles, strings, null),
            arrays (<c>int[], string[])</c>, <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>, <see cref="T:System.Type"/>,
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances.
            If this is an instance method, the first argument must be the <c>this</c> pointer. Use
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.Box"/> to box values.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Call(System.String,System.UInt32,System.Object[])">
            <summary>
            Calls a method in the debugged process
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="token">Method token</param>
            <param name="args">Arguments, either simple types (ints, doubles, strings, null),
            arrays (<c>int[], string[])</c>, <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>, <see cref="T:System.Type"/>,
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances.
            If this is an instance method, the first argument must be the <c>this</c> pointer. Use
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.Box"/> to box values.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Call(System.Object[],System.String,System.String,System.String,System.Object[])">
            <summary>
            Calls a method in the debugged process
            </summary>
            <param name="genericArgs">Generic type arguments followed by generic method arguments
            (<see cref="T:System.Type"/> or <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances)</param>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <param name="methodName">Method name</param>
            <param name="args">Arguments, either simple types (ints, doubles, strings, null),
            arrays (<c>int[], string[])</c>, <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>, <see cref="T:System.Type"/>,
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances.
            If this is an instance method, the first argument must be the <c>this</c> pointer. Use
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.Box"/> to box values.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Call(System.Object[],System.String,System.UInt32,System.Object[])">
            <summary>
            Calls a method in the debugged process
            </summary>
            <param name="genericArgs">Generic type arguments followed by generic method arguments
            (<see cref="T:System.Type"/> or <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances)</param>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="token">Method token</param>
            <param name="args">Arguments, either simple types (ints, doubles, strings, null),
            arrays (<c>int[], string[])</c>, <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>, <see cref="T:System.Type"/>,
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances.
            If this is an instance method, the first argument must be the <c>this</c> pointer. Use
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.Box"/> to box values.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.AssemblyLoad(System.Byte[])">
            <summary>
            Loads the assembly in the debugged process by calling <see cref="M:System.Reflection.Assembly.Load(System.Byte[])"/>
            </summary>
            <param name="assembly">Assembly bytes</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.AssemblyLoad(System.String)">
            <summary>
            Loads the assembly in the debugged process by calling <see cref="M:System.Reflection.Assembly.Load(System.String)"/>
            </summary>
            <param name="assemblyString">Assembly name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.AssemblyLoadFrom(System.String)">
            <summary>
            Loads the assembly in the debugged process by calling <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)"/>
            </summary>
            <param name="assemblyFile">Assembly filename</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.AssemblyLoadFile(System.String)">
            <summary>
            Loads the assembly in the debugged process by calling <see cref="M:System.Reflection.Assembly.LoadFile(System.String)"/>
            </summary>
            <param name="filename">Filename</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.ToString(dnSpy.Contracts.Scripting.Debugger.IDebuggerValue)">
            <summary>
            Calls <paramref name="value"/>'s <see cref="M:System.Object.ToString"/> method
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.CreateEval">
            <summary>
            Creates an evaluator
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType">
            <summary>
            An instantiated type (<c>ICorDebugType</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.Namespace">
            <summary>
            Gets the namespace
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.FullName">
            <summary>
            Gets the full name, which is the same as calling <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.Attributes">
            <summary>
            Gets the type attributes
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.Visibility">
            <summary>
            Gets the visibility
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsNotPublic">
            <summary>
            true if not public
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsPublic">
            <summary>
            true if public
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsNestedPublic">
            <summary>
            true if nested public
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsNestedPrivate">
            <summary>
            true if nested private
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsNestedFamily">
            <summary>
            true if nested family
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsNestedAssembly">
            <summary>
            true if nested assembly
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsNestedFamilyAndAssembly">
            <summary>
            true if nested family and assembly
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsNestedFamilyOrAssembly">
            <summary>
            true if nested family or assembly
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.Layout">
            <summary>
            Gets the layout
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsAutoLayout">
            <summary>
            true if auto layout
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsSequentialLayout">
            <summary>
            true if sequential layout
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsExplicitLayout">
            <summary>
            true if explicit layout
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsInterface">
            <summary>
            true if it's an interface
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsClass">
            <summary>
            true if it's a class or struct
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsAbstract">
            <summary>
            true if it's abstract
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsSealed">
            <summary>
            true if it's sealed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsSpecialName">
            <summary>
            true if's special name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsImport">
            <summary>
            true if it's an import
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsSerializable">
            <summary>
            true if it's serializable
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsWindowsRuntime">
            <summary>
            true if it's windows runtime
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.StringFormat">
            <summary>
            Gets the string format
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsAnsiClass">
            <summary>
            true if it's an ANSI string class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsUnicodeClass">
            <summary>
            true if it's a unicode string class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsAutoClass">
            <summary>
            true if it's an auto string class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsCustomFormatClass">
            <summary>
            true if it's a custom string format class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsBeforeFieldInit">
            <summary>
            true if it's before field init
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsForwarder">
            <summary>
            true if it's a forwarder
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsRuntimeSpecialName">
            <summary>
            true if it's a runtime special name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.HasSecurity">
            <summary>
            true if it has a security descriptor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.Token">
            <summary>
            Gets the <c>TypeDef</c> token or a nil token if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.Class"/> is null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ElementType">
            <summary>
            Gets the element type, see also <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.TryGetPrimitiveType"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ElementTypeOrEnumUnderlyingType">
            <summary>
            Returns the enum underlying type if it's an enum, else <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ElementType"/> is returned
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsSZArray">
            <summary>
            true if it's a <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.SZArray"/> (but not a <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.Array"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsArray">
            <summary>
            true if it's a <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.Array"/> (but not a <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.SZArray"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsAnyArray">
            <summary>
            true if it's a <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.SZArray"/> or a <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.Array"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsPtr">
            <summary>
            true if it's a <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.Ptr"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsByRef">
            <summary>
            true if it's a <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.ByRef"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsGenericInst">
            <summary>
            true if it's a <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.GenericInst"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsFnPtr">
            <summary>
            true if it's a <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.FnPtr"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.Rank">
            <summary>
            Gets the rank of the array
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.FirstTypeParameter">
            <summary>
            Gets the first type parameter
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.TypeParameters">
            <summary>
            Gets all type parameters. If it's a <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.Class"/> or a <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.ValueType"/>,
            then the returned parameters are the type parameters in the correct order. If it's
            a <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.FnPtr"/>, the first type is the return type, followed by
            all the method argument types in correct order. If it's a <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.Array"/>,
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.SZArray"/>, <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.ByRef"/> or a
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.Ptr"/>, the returned type is the inner type, eg. <c>int</c> if the
            type is <c>int[]</c>. In this case, <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.FirstTypeParameter"/> can be called instead.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.Class">
            <summary>
            Gets the non-instantiated type, only valid if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ElementType"/> is a
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.Class"/> or <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.ValueType"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.BaseType">
            <summary>
            Gets the base type or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsEnum">
            <summary>
            true if it derives from <see cref="T:System.Enum"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsValueType">
            <summary>
            true if it derives from <see cref="T:System.Enum"/> or <see cref="T:System.ValueType"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.DerivesFromSystemValueType">
            <summary>
            true if this class directly derives from <see cref="T:System.ValueType"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsSystemEnum">
            <summary>
            true if this is <see cref="T:System.Enum"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsSystemValueType">
            <summary>
            true if this is <see cref="T:System.ValueType"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsSystemObject">
            <summary>
            true if this is <see cref="T:System.Object"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsSystemNullable">
            <summary>
            true if this is <see cref="T:System.Nullable`1"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.EnumUnderlyingType">
            <summary>
            Returns the enum underlying type and shouldn't be called unless <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsEnum"/>
            is true. <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.End"/> is returned if the underlying type wasn't found.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.TryGetPrimitiveType">
            <summary>
            Same as <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ElementType"/> except that it tries to return a primitive element
            type (eg. <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.U4"/>) if it's a primitive type.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsSystem(System.String)">
            <summary>
            Returns true if it's a System.XXX type in the corlib (eg. mscorlib)
            </summary>
            <param name="name">Name (not including namespace)</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.HasAttribute(System.String)">
            <summary>
            Returns true if an attribute is present
            </summary>
            <param name="attributeName">Full name of attribute type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ToPtr">
            <summary>
            Creates a pointer type
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ToPointer">
            <summary>
            Creates a pointer type
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ToByReference">
            <summary>
            Creates a by-ref type
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ToByRef">
            <summary>
            Creates a by-ref type
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ToSZArray">
            <summary>
            Creates a single-dimension zero-lower bound array type
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ToArray(System.Int32)">
            <summary>
            Creates a multi-dimensional array type. If <paramref name="rank"/> is <c>1</c>, you most
            likely want to call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ToSZArray"/> instead of this method.
            </summary>
            <param name="rank">Number of dimensions</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.Methods">
            <summary>
            Gets all methods declared in this type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.Fields">
            <summary>
            Gets all fields declared in this type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.Properties">
            <summary>
            Gets all properties declared in this type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.Events">
            <summary>
            Gets all events declared in this type
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetMethods(System.Boolean)">
            <summary>
            Returns all methods
            </summary>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetMethod(System.String,System.Boolean)">
            <summary>
            Finds a method. If only one method is found, it's returned, else the method that takes
            no arguments is returned, or null if it doesn't exist.
            </summary>
            <param name="name">Method name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetMethod(System.String,System.Object[])">
            <summary>
            Finds a method with a certain signature. Base classes are also searched.
            </summary>
            <param name="name">Method name</param>
            <param name="argTypes">Argument types. This can be <see cref="T:System.Type"/>s or strings
            with the full name of the argument types</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetMethod(System.String,System.Boolean,System.Object[])">
            <summary>
            Finds a method with a certain signature.
            </summary>
            <param name="name">Method name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <param name="argTypes">Argument types. This can be <see cref="T:System.Type"/>s or strings
            with the full name of the argument types</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetMethods(System.String,System.Boolean)">
            <summary>
            Finds methods
            </summary>
            <param name="name">Method name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetConstructors">
            <summary>
            Returns all constructors
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetConstructor">
            <summary>
            Returns the default constructor or null if not found
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetConstructor(System.Object[])">
            <summary>
            Returns a constructor
            </summary>
            <param name="argTypes">Argument types. This can be <see cref="T:System.Type"/>s or strings
            with the full name of the argument types</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetFields(System.Boolean)">
            <summary>
            Returns all fields
            </summary>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetFields(System.String,System.Boolean)">
            <summary>
            Finds fields
            </summary>
            <param name="name">Field name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetField(System.String,System.Boolean)">
            <summary>
            Finds a field
            </summary>
            <param name="name">Field name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetProperties(System.Boolean)">
            <summary>
            Returns all properties
            </summary>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetProperties(System.String,System.Boolean)">
            <summary>
            Finds properties
            </summary>
            <param name="name">Property name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetProperty(System.String,System.Boolean)">
            <summary>
            Finds a property
            </summary>
            <param name="name">Property name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetEvents(System.Boolean)">
            <summary>
            Returns all events
            </summary>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetEvents(System.String,System.Boolean)">
            <summary>
            Finds events
            </summary>
            <param name="name">Event name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetEvent(System.String,System.Boolean)">
            <summary>
            Finds a event
            </summary>
            <param name="name">Event name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetField(System.Reflection.FieldInfo)">
            <summary>
            Gets a field
            </summary>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetMethod(System.Reflection.MethodBase)">
            <summary>
            Gets a method
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetProperty(System.Reflection.PropertyInfo)">
            <summary>
            Gets a property
            </summary>
            <param name="prop">Property</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetEvent(System.Reflection.EventInfo)">
            <summary>
            Gets an event
            </summary>
            <param name="evt">Event</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.Write(dnSpy.Contracts.Highlighting.ISyntaxHighlightOutput,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            Write this to <paramref name="output"/>
            </summary>
            <param name="output">Destination</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ToString(dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            ToString()
            </summary>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.UInt32)">
            <summary>
            Reads a static field
            </summary>
            <param name="frame">Frame</param>
            <param name="token">Token of field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IStackFrame,dnSpy.Contracts.Scripting.Debugger.IDebuggerField)">
            <summary>
            Reads a static field
            </summary>
            <param name="frame">Frame</param>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.String,System.Boolean)">
            <summary>
            Reads a static field
            </summary>
            <param name="frame">Frame</param>
            <param name="name">Field name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue">
            <summary>
            A value in the debugged process. This value gets neutered (invalid) as soon as the debugged
            process continues.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.CanReadWrite">
            <summary>
            true if it supports reading and writing its value (<c>ICorDebugGenericValue</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsReference">
            <summary>
            true if it's a reference (<c>ICorDebugReferenceValue</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsHandle">
            <summary>
            true if it's a handle (<c>ICorDebugHandleValue</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsHeap">
            <summary>
            true if it's a heap (<c>ICorDebugHeapValue</c>, <c>ICorDebugArrayValue</c>,
            <c>ICorDebugBoxValue</c>, <c>ICorDebugStringValue</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsArray">
            <summary>
            true if it's an array (<c>ICorDebugArrayValue</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsBox">
            <summary>
            true if it's a boxed value (<c>ICorDebugBoxValue</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsString">
            <summary>
            true if it's a string (<c>ICorDebugStringValue</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsObject">
            <summary>
            true if it's an object (<c>ICorDebugObjectValue</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsContext">
            <summary>
            true if it's a context (<c>ICorDebugContext</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsComObject">
            <summary>
            true if it's an RCW (<c>ICorDebugComObjectValue</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsExceptionObject">
            <summary>
            true if it's an exception object (<c>ICorDebugExceptionObjectValue</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ElementType">
            <summary>
            Gets the element type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ElementTypeOrEnumUnderlyingType">
            <summary>
            Returns the enum underlying type if it's an enum, else <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ElementType"/> is returned
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Size">
            <summary>
            Gets the size of the value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Address">
            <summary>
            Gets the address of the value or 0 if it's not available, eg. it could be in a register
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Class">
            <summary>
            Gets the class if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsObject"/> or <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsContext"/>, else null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Type">
            <summary>
            Gets the type or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsNull">
            <summary>
            true if it's a reference and it's null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ReferenceAddress">
            <summary>
            Gets/sets the address to which the reference points (see <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsReference"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.HandleType">
            <summary>
            Gets the handle type if it's a handle value (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsHandle"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.DereferencedValue">
            <summary>
            Gets the dereferenced value to which the reference (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsReference"/>) points or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ArrayElementType">
            <summary>
            Gets the type of the array's elements or <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.End"/> if it's not an array
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Rank">
            <summary>
            Gets the rank of the array or 0 if it's not an array
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ArrayCount">
            <summary>
            Gets the number of elements in the array or 0 if it's not an array
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Dimensions">
            <summary>
            Gets the dimensions or null if it's not an array
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.HasBaseIndicies">
            <summary>
            true if the array has base indices
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.BaseIndicies">
            <summary>
            Gets all base indicies or null if it's not an array
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.BoxedValue">
            <summary>
            Gets the boxed object value or null if none. The return value has <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsObject"/> set to true
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.StringLength">
            <summary>
            Gets the length of the string in characters or 0 if it's not a string (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsString"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.String">
            <summary>
            Gets the string or null if it's not a string (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsString"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsValueClass">
            <summary>
            true if this is an object value (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsObject"/>) and it's a value type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ExceptionObjectStackFrames">
            <summary>
            Gets all <see cref="T:dnSpy.Contracts.Scripting.Debugger.ExceptionObjectStackFrame"/>s if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsExceptionObject"/> is true
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Value">
            <summary>
            Gets the value. Only values of simple types are currently returned: boolean, integers,
            floating points, decimal, string and null.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsNeutered">
            <summary>
            true if the value has been neutered, eg. because Continue() was called
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.DisposeHandle">
            <summary>
            Disposes the handle if it's a handle (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsHandle"/>)
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.GetElementAtPosition(System.UInt32)">
            <summary>
            Gets the value at a specified index in the array or null. The array is treated as a
            zero-based, single-dimensional array
            </summary>
            <param name="index">Index of element</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.GetElementAtPosition(System.Int32)">
            <summary>
            Gets the value at a specified index in the array or null. The array is treated as a
            zero-based, single-dimensional array
            </summary>
            <param name="index">Index of element</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.GetElement(System.UInt32[])">
            <summary>
            Gets the value at the specified indices or null
            </summary>
            <param name="indices">Indices into the array</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.GetElement(System.Int32[])">
            <summary>
            Gets the value at the specified indices or null
            </summary>
            <param name="indices">Indices into the array</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.GetFieldValue(dnSpy.Contracts.Scripting.Debugger.IDebuggerClass,System.UInt32)">
            <summary>
            Gets the value of a field or null if it's not an object (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsObject"/>)
            </summary>
            <param name="cls">Class</param>
            <param name="token">Token of field in <paramref name="cls"/></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.GetFieldValue(System.String,System.Boolean)">
            <summary>
            Gets the value of a field. Returns null if field wasn't found or there was another error
            </summary>
            <param name="name">Name of field</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.CreateHandle(dnSpy.Contracts.Scripting.Debugger.DebugHandleType)">
            <summary>
            Creates a handle to this heap value (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsHeap"/>). The returned value is a
            handle value (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsHandle"/>).
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(System.Byte[])">
            <summary>
            Writes a new value. Can be called if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.CanReadWrite"/> is true
            </summary>
            <param name="data">Data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Read">
            <summary>
            Reads the data. Can be called if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.CanReadWrite"/> is true. Returns null if there
            was an error.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ReadBoolean">
            <summary>
            Reads a <see cref="T:System.Boolean"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ReadChar">
            <summary>
            Reads a <see cref="T:System.Char"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ReadSByte">
            <summary>
            Reads a <see cref="T:System.SByte"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ReadInt16">
            <summary>
            Reads a <see cref="T:System.Int16"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ReadInt32">
            <summary>
            Reads a <see cref="T:System.Int32"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ReadInt64">
            <summary>
            Reads a <see cref="T:System.Int64"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ReadByte">
            <summary>
            Reads a <see cref="T:System.Byte"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ReadUInt16">
            <summary>
            Reads a <see cref="T:System.UInt16"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ReadUInt32">
            <summary>
            Reads a <see cref="T:System.UInt32"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ReadUInt64">
            <summary>
            Reads a <see cref="T:System.UInt64"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ReadSingle">
            <summary>
            Reads a <see cref="T:System.Single"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ReadDouble">
            <summary>
            Reads a <see cref="T:System.Double"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ReadDecimal">
            <summary>
            Reads a <see cref="T:System.Decimal"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.GetNullableValue(dnSpy.Contracts.Scripting.Debugger.IDebuggerValue@)">
            <summary>
            Gets the nullable value's value field. Returns true if it's a nullable type, false if
            it's not a nullable type.
            </summary>
            <param name="value">Updated with the value of the nullable field or null if the nullable
            is null or if it's not a nullable value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Read(dnSpy.Contracts.Scripting.Debugger.IDebuggerField)">
            <summary>
            Reads an instance field. To read a static field, see eg. <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IStackFrame,dnSpy.Contracts.Scripting.Debugger.IDebuggerField)"/>
            </summary>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Read(System.UInt32)">
            <summary>
            Reads an instance field. To read a static field, see eg. <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.UInt32)"/>
            </summary>
            <param name="token">Field token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Read(System.String,System.Boolean)">
            <summary>
            Reads an instance field. To read a static field, see eg. <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.String,System.Boolean)"/>
            </summary>
            <param name="name">Field name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Call(dnSpy.Contracts.Scripting.Debugger.IDebuggerThread,dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod,System.Object[])">
            <summary>
            Calls an instance method in the debugged process
            </summary>
            <param name="thread">Thread to use</param>
            <param name="method">Instance method to call</param>
            <param name="args">Arguments, either simple types (ints, doubles, strings, null),
            arrays (<c>int[], string[])</c>, <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>, <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Type"/>,
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances.
            Use <see cref="T:dnSpy.Contracts.Scripting.Debugger.Box"/> to box values.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Call(dnSpy.Contracts.Scripting.Debugger.IDebuggerThread,System.Object[],dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod,System.Object[])">
            <summary>
            Calls an instance method in the debugged process
            </summary>
            <param name="thread">Thread to use</param>
            <param name="genericArgs">Generic type arguments followed by generic method arguments
            (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Type"/> or <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances)</param>
            <param name="method">Instance method to call</param>
            <param name="args">Arguments, either simple types (ints, doubles, strings, null),
            arrays (<c>int[], string[])</c>, <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>, <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Type"/>,
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances.
            Use <see cref="T:dnSpy.Contracts.Scripting.Debugger.Box"/> to box values.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Call(dnSpy.Contracts.Scripting.Debugger.IDebuggerThread,System.String,System.String,System.String,System.Object[])">
            <summary>
            Calls an instance method in the debugged process
            </summary>
            <param name="thread">Thread to use</param>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <param name="methodName">Method name</param>
            <param name="args">Arguments, either simple types (ints, doubles, strings, null),
            arrays (<c>int[], string[])</c>, <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>, <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Type"/>,
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances.
            Use <see cref="T:dnSpy.Contracts.Scripting.Debugger.Box"/> to box values.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Call(dnSpy.Contracts.Scripting.Debugger.IDebuggerThread,System.String,System.UInt32,System.Object[])">
            <summary>
            Calls an instance method in the debugged process
            </summary>
            <param name="thread">Thread to use</param>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="token">Method token</param>
            <param name="args">Arguments, either simple types (ints, doubles, strings, null),
            arrays (<c>int[], string[])</c>, <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>, <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Type"/>,
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances.
            Use <see cref="T:dnSpy.Contracts.Scripting.Debugger.Box"/> to box values.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Call(dnSpy.Contracts.Scripting.Debugger.IDebuggerThread,System.Object[],System.String,System.String,System.String,System.Object[])">
            <summary>
            Calls an instance method in the debugged process
            </summary>
            <param name="thread">Thread to use</param>
            <param name="genericArgs">Generic type arguments followed by generic method arguments
            (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Type"/> or <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances)</param>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <param name="methodName">Method name</param>
            <param name="args">Arguments, either simple types (ints, doubles, strings, null),
            arrays (<c>int[], string[])</c>, <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>, <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Type"/>,
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances.
            Use <see cref="T:dnSpy.Contracts.Scripting.Debugger.Box"/> to box values.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Call(dnSpy.Contracts.Scripting.Debugger.IDebuggerThread,System.Object[],System.String,System.UInt32,System.Object[])">
            <summary>
            Calls an instance method in the debugged process
            </summary>
            <param name="thread">Thread to use</param>
            <param name="genericArgs">Generic type arguments followed by generic method arguments
            (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Type"/> or <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances)</param>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="token">Method token</param>
            <param name="args">Arguments, either simple types (ints, doubles, strings, null),
            arrays (<c>int[], string[])</c>, <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>, <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Type"/>,
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances.
            Use <see cref="T:dnSpy.Contracts.Scripting.Debugger.Box"/> to box values.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.SaveData">
            <summary>
            Reads the data but doesn't return internal values such as array length if it's an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.SaveData(System.IO.Stream)">
            <summary>
            Reads the data but doesn't return internal values such as array length if it's an array.
            </summary>
            <param name="stream">Destination stream</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.SaveData(System.String)">
            <summary>
            Reads the data but doesn't return internal values such as array length if it's an array.
            </summary>
            <param name="filename">Filename</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.GetArrayDataAddress">
            <summary>
            Returns the address of the first element in the array
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.GetArrayDataAddress(System.UInt64@)">
            <summary>
            Returns the address of the first element in the array
            </summary>
            <param name="elemSize">Element size</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(dnSpy.Contracts.Highlighting.ISyntaxHighlightOutput,dnSpy.Contracts.Scripting.Debugger.ValueResult,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            Write this to <paramref name="output"/>
            </summary>
            <param name="output">Destination</param>
            <param name="valueResult">Value result</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ToString(dnSpy.Contracts.Scripting.Debugger.ValueResult,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            ToString()
            </summary>
            <param name="valueResult">Value result</param>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(dnSpy.Contracts.Highlighting.ISyntaxHighlightOutput,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            Write this to <paramref name="output"/>
            </summary>
            <param name="output">Destination</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.WriteType(dnSpy.Contracts.Highlighting.ISyntaxHighlightOutput,dnSpy.Contracts.Scripting.Debugger.IDebuggerType,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            Write this to <paramref name="output"/>
            </summary>
            <param name="output">Destination</param>
            <param name="type">Type</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.WriteType(dnSpy.Contracts.Highlighting.ISyntaxHighlightOutput,dnSpy.Contracts.Scripting.Debugger.IDebuggerClass,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            Write this to <paramref name="output"/>
            </summary>
            <param name="output">Destination</param>
            <param name="cls">Class</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ToString(dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            ToString()
            </summary>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IEval">
            <summary>
            Calls a method in the debugged process. Call its <see cref="M:System.IDisposable.Dispose"/> method
            once you don't need the instance anymore so the debugger knows the evaluation has ended.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateNull">
            <summary>
            Creates a null value that can be passed to the debugged process
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Box(dnSpy.Contracts.Scripting.Debugger.IDebuggerValue)">
            <summary>
            Box a value type
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.Object)">
            <summary>
            Creates a reference to a boxed value that can be passed to the debugged process
            </summary>
            <param name="value">A primitive type (ints, doubles, string, null),
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>, <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/>, <see cref="T:System.Type"/></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.Boolean)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.Boolean"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.Char)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.Char"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.SByte)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.SByte"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.Byte)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.Byte"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.Int16)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.Int16"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.UInt16)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.UInt16"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.Int32)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.Int32"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.UInt32)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.UInt32"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.Int64)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.Int64"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.UInt64)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.UInt64"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.Single)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.Single"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.Double)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.Double"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.IntPtr)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.IntPtr"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.UIntPtr)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.UIntPtr"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.Decimal)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.Decimal"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(dnSpy.Contracts.Scripting.Debugger.IDebuggerType)">
            <summary>
            Creates a reference to a boxed type filled with 0s. The constructor isn't called.
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.Type)">
            <summary>
            Creates a reference to a boxed type filled with 0s. The constructor isn't called.
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Object)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/> that can be passed to the debugged process
            </summary>
            <param name="value">A simple type (ints, doubles, string, null),
            arrays (<c>int[]</c>, <c>string[]</c>), <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>,
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/>, <see cref="T:System.Type"/>.
            Use <see cref="T:dnSpy.Contracts.Scripting.Debugger.Box"/> to box values or call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.Object)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Boolean)">
            <summary>
            Creates a <see cref="T:System.Boolean"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Char)">
            <summary>
            Creates a <see cref="T:System.Char"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.SByte)">
            <summary>
            Creates a <see cref="T:System.SByte"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Byte)">
            <summary>
            Creates a <see cref="T:System.Byte"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Int16)">
            <summary>
            Creates a <see cref="T:System.Int16"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.UInt16)">
            <summary>
            Creates a <see cref="T:System.UInt16"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Int32)">
            <summary>
            Creates a <see cref="T:System.Int32"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.UInt32)">
            <summary>
            Creates a <see cref="T:System.UInt32"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Int64)">
            <summary>
            Creates a <see cref="T:System.Int64"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.UInt64)">
            <summary>
            Creates a <see cref="T:System.UInt64"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Single)">
            <summary>
            Creates a <see cref="T:System.Single"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Double)">
            <summary>
            Creates a <see cref="T:System.Double"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.IntPtr)">
            <summary>
            Creates a <see cref="T:System.IntPtr"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.UIntPtr)">
            <summary>
            Creates a <see cref="T:System.UIntPtr"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Decimal)">
            <summary>
            Creates a <see cref="T:System.Decimal"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(dnSpy.Contracts.Scripting.Debugger.IDebuggerType)">
            <summary>
            Creates a type filled with 0s. The constructor isn't called.
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Type)">
            <summary>
            Creates a type filled with 0s. The constructor isn't called.
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.String)">
            <summary>
            Creates a <see cref="T:System.String"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateArray(dnSpy.Contracts.Scripting.Debugger.IDebuggerType,System.Int32)">
            <summary>
            Creates an array. <paramref name="elementType"/> must be a primitive type (but not
            <see cref="T:System.IntPtr"/> or <see cref="T:System.UIntPtr"/>) or a reference type
            </summary>
            <param name="elementType">Array element type</param>
            <param name="length">Number of elements</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateArray(System.Type,System.Int32)">
            <summary>
            Creates an array. <paramref name="elementType"/> must be a primitive type (but not
            <see cref="T:System.IntPtr"/> or <see cref="T:System.UIntPtr"/>) or a reference type
            </summary>
            <param name="elementType">Array element type</param>
            <param name="length">Number of elements</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Boolean[])">
            <summary>
            Creates a <see cref="T:System.Boolean"/> array
            </summary>
            <param name="array">Data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Char[])">
            <summary>
            Creates a <see cref="T:System.Char"/> array
            </summary>
            <param name="array">Data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.SByte[])">
            <summary>
            Creates a <see cref="T:System.SByte"/> array
            </summary>
            <param name="array">Data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Byte[])">
            <summary>
            Creates a <see cref="T:System.Byte"/> array
            </summary>
            <param name="array">Data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Int16[])">
            <summary>
            Creates a <see cref="T:System.Int16"/> array
            </summary>
            <param name="array">Data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.UInt16[])">
            <summary>
            Creates a <see cref="T:System.UInt16"/> array
            </summary>
            <param name="array">Data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Int32[])">
            <summary>
            Creates a <see cref="T:System.Int32"/> array
            </summary>
            <param name="array">Data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.UInt32[])">
            <summary>
            Creates a <see cref="T:System.UInt32"/> array
            </summary>
            <param name="array">Data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Int64[])">
            <summary>
            Creates a <see cref="T:System.Int64"/> array
            </summary>
            <param name="array">Data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.UInt64[])">
            <summary>
            Creates a <see cref="T:System.UInt64"/> array
            </summary>
            <param name="array">Data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Single[])">
            <summary>
            Creates a <see cref="T:System.Single"/> array
            </summary>
            <param name="array">Data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Double[])">
            <summary>
            Creates a <see cref="T:System.Double"/> array
            </summary>
            <param name="array">Data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.String[])">
            <summary>
            Creates a <see cref="T:System.String"/> array
            </summary>
            <param name="array">Data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod,System.Object[])">
            <summary>
            Creates a new type instance. The returned type is a reference.
            If it's a value type, the returned type is a reference to a boxed value.
            </summary>
            <param name="ctor">Constructor to call</param>
            <param name="args">Arguments. Each argument is passed to <see cref="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Object)"/>,
            see its documentation for more details.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Object[],dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod,System.Object[])">
            <summary>
            Creates a new type instance. The returned type is a reference.
            If it's a value type, the returned type is a reference to a boxed value.
            </summary>
            <param name="genericArgs">Generic type arguments (<see cref="T:System.Type"/> or <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances)</param>
            <param name="ctor">Constructor to call</param>
            <param name="args">Arguments. Each argument is passed to <see cref="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Object)"/>,
            see its documentation for more details.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Call(dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod,System.Object[])">
            <summary>
            Calls <paramref name="method"/> in the debugged process
            </summary>
            <param name="method">Method to call</param>
            <param name="args">Arguments. If it's an instance method, the first argument is the
            <c>this</c> pointer. Each argument is passed to <see cref="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Object)"/>, see its
            documentation for more details.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Call(System.Object[],dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod,System.Object[])">
            <summary>
            Calls <paramref name="method"/> in the debugged process
            </summary>
            <param name="genericArgs">Generic type arguments followed by generic method arguments
            (<see cref="T:System.Type"/> or <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances)</param>
            <param name="method">Method to call</param>
            <param name="args">Arguments. If it's an instance method, the first argument is the
            <c>this</c> pointer. Each argument is passed to <see cref="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Object)"/>, see its
            documentation for more details.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.ToString(dnSpy.Contracts.Scripting.Debugger.IDebuggerValue)">
            <summary>
            Calls the <c>ToString()</c> method
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.AssemblyLoad(System.Byte[])">
            <summary>
            Loads the assembly in the debugged process by calling <see cref="M:System.Reflection.Assembly.Load(System.Byte[])"/>
            </summary>
            <param name="rawAssembly">Assembly bytes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.AssemblyLoad(System.String)">
            <summary>
            Loads the assembly in the debugged process by calling <see cref="M:System.Reflection.Assembly.Load(System.String)"/>
            </summary>
            <param name="assemblyString">Assembly name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.AssemblyLoadFrom(System.String)">
            <summary>
            Loads the assembly in the debugged process by calling <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)"/>
            </summary>
            <param name="assemblyFile">Assembly filename</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.AssemblyLoadFile(System.String)">
            <summary>
            Loads the assembly in the debugged process by calling <see cref="M:System.Reflection.Assembly.LoadFile(System.String)"/>
            </summary>
            <param name="filename">Assembly filename</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IEventBreakpoint">
            <summary>
            Debug event breakpoint
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IEventBreakpoint.EventKind">
            <summary>
            Gets the event kind
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IILBreakpoint">
            <summary>
            IL code breakpoint
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.ILCodeKind">
            <summary>
            IL code kind
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ILCodeKind.Original">
            <summary>
            The debugger does not have access to information from ReJIT instrumentation.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ILCodeKind.ReJIT">
            <summary>
            The debugger has access to information from ReJIT instrumentation.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.ILFrameIP">
            <summary>
            IL frame IP address
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILFrameIP.Offset">
            <summary>
            Gets the offset
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILFrameIP.Mapping">
            <summary>
            Gets the mapping result
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILFrameIP.IsProlog">
            <summary>
            The native code is in the prolog, so the value of the IP is 0.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILFrameIP.IsEpilog">
            <summary>
            The native code is in an epilog, so the value of the IP is the address of the last instruction of the method.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILFrameIP.HasNoInfo">
            <summary>
            No mapping information is available for the method, so the value of the IP is 0.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILFrameIP.IsUnmappedAddress">
            <summary>
            Although there is mapping information for the method, the current address cannot be mapped to Microsoft intermediate language (MSIL) code. The value of the IP is 0.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILFrameIP.IsExact">
            <summary>
            Either the method maps exactly to MSIL code or the frame has been interpreted, so the value of the IP is accurate.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILFrameIP.IsApproximate">
            <summary>
            The method was successfully mapped, but the value of the IP may be approximate.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ILFrameIP.#ctor(System.UInt32,dnSpy.Contracts.Scripting.Debugger.MappingResult)">
            <summary>
            Constructor
            </summary>
            <param name="offset">Offset</param>
            <param name="mapping">Mapping flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ILFrameIP.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.INativeBreakpoint">
            <summary>
            Native code breakpoint
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.InternalFrameType">
            <summary>
            Internal frame type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.InternalFrameType.None">
            <summary>
            A null value. The ICorDebugInternalFrame::GetFrameType method never returns this value.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.InternalFrameType.M2U">
            <summary>
            A managed-to-unmanaged stub frame.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.InternalFrameType.U2M">
            <summary>
            An unmanaged-to-managed stub frame.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.InternalFrameType.AppDomainTransition">
            <summary>
            A transition between application domains.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.InternalFrameType.LightweightFunction">
            <summary>
            A lightweight method call.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.InternalFrameType.FuncEval">
            <summary>
            The start of function evaluation.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.InternalFrameType.InternalCall">
            <summary>
            An internal call into the common language runtime.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.InternalFrameType.ClassInit">
            <summary>
            The start of a class initialization.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.InternalFrameType.Exception">
            <summary>
            An exception that is thrown.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.InternalFrameType.Security">
            <summary>
            A frame used for code access security.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.InternalFrameType.JitCompilation">
            <summary>
            The runtime is JIT-compiling a method.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IStackChain">
            <summary>
            Stack chain. This stack frame is only valid until the debugged process continues.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackChain.Thread">
            <summary>
            Gets the thread
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackChain.IsManaged">
            <summary>
            true if this is a managed chain
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackChain.Reason">
            <summary>
            Gets the reason
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackChain.StackStart">
            <summary>
            Start address of the stack segment
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackChain.StackEnd">
            <summary>
            End address of the stack segment
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackChain.ActiveFrame">
            <summary>
            Gets the active frame or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackChain.Callee">
            <summary>
            Gets the callee or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackChain.Caller">
            <summary>
            Gets the caller or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackChain.Next">
            <summary>
            Gets the next chain or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackChain.Previous">
            <summary>
            Gets the previous chain or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackChain.Frames">
            <summary>
            Gets all frames
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IStackFrame">
            <summary>
            A stack frame in the debugged process. This stack frame is only valid until the debugged
            process continues.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.IsNeutered">
            <summary>
            true if it has been neutered. It gets neutered when the program continues or if the
            instruction pointer is changed.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.Chain">
            <summary>
            Gets its chain
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.Token">
            <summary>
            Gets the token of the method or 0
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.StackStart">
            <summary>
            Start address of the stack segment
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.StackEnd">
            <summary>
            End address of the stack segment
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.IsILFrame">
            <summary>
            true if it's an IL frame
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.IsNativeFrame">
            <summary>
            true if it's a native frame
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.IsJITCompiledFrame">
            <summary>
            true if it's a JIT-compiled frame (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.IsILFrame"/> and <see cref="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.IsNativeFrame"/>
            are both true).
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.IsInternalFrame">
            <summary>
            true if it's an internal frame
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.IsRuntimeUnwindableFrame">
            <summary>
            true if this is a runtime unwindable frame
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.ILFrameIP">
            <summary>
            Gets the IL frame IP. Only valid if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.IsILFrame"/> is true
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.NativeOffset">
            <summary>
            Gets the native frame IP. Only valid if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.IsNativeFrame"/> is true. Writing
            a new value will neuter this instance.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.InternalFrameType">
            <summary>
            Gets the internal frame type or <see cref="F:dnSpy.Contracts.Scripting.Debugger.InternalFrameType.None"/>
            if it's not an internal frame
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.Index">
            <summary>
            Gets the stack frame index
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.Method">
            <summary>
            Gets the method or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.ILCode">
            <summary>
            Gets the IL code or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.Code">
            <summary>
            Gets the code or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.Arguments">
            <summary>
            Gets all arguments
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.Locals">
            <summary>
            Gets all locals
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GenericArguments">
            <summary>
            Gets all generic type and/or method arguments. The first returned values are the generic
            type args, followed by the generic method args. See also
            <see cref="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GenericTypeArguments"/>, <see cref="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GenericMethodArguments"/> and
            <see cref="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GetGenericArguments(System.Collections.Generic.List{dnSpy.Contracts.Scripting.Debugger.IDebuggerType}@,System.Collections.Generic.List{dnSpy.Contracts.Scripting.Debugger.IDebuggerType}@)"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GenericTypeArguments">
            <summary>
            Gets all generic type arguments
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GenericMethodArguments">
            <summary>
            Gets all generic method arguments
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GetLocal(System.UInt32)">
            <summary>
            Gets a local variable or null if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.IsILFrame"/> is false
            </summary>
            <param name="index">Index of local</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GetLocal(System.Int32)">
            <summary>
            Gets a local variable or null if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.IsILFrame"/> is false
            </summary>
            <param name="index">Index of local</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GetArgument(System.UInt32)">
            <summary>
            Gets an argument or null if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.IsILFrame"/> is false
            </summary>
            <param name="index">Index of argument</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GetArgument(System.Int32)">
            <summary>
            Gets an argument or null if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.IsILFrame"/> is false
            </summary>
            <param name="index">Index of argument</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GetLocals(dnSpy.Contracts.Scripting.Debugger.ILCodeKind)">
            <summary>
            Gets all locals
            </summary>
            <param name="kind">Kind</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GetLocal(dnSpy.Contracts.Scripting.Debugger.ILCodeKind,System.UInt32)">
            <summary>
            Gets a local variable or null
            </summary>
            <param name="kind">Kind</param>
            <param name="index">Index of local</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GetLocal(dnSpy.Contracts.Scripting.Debugger.ILCodeKind,System.Int32)">
            <summary>
            Gets a local variable or null
            </summary>
            <param name="kind">Kind</param>
            <param name="index">Index of local</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GetCode(dnSpy.Contracts.Scripting.Debugger.ILCodeKind)">
            <summary>
            Gets the code or null
            </summary>
            <param name="kind">Kind</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GetGenericArguments(System.Collections.Generic.List{dnSpy.Contracts.Scripting.Debugger.IDebuggerType}@,System.Collections.Generic.List{dnSpy.Contracts.Scripting.Debugger.IDebuggerType}@)">
            <summary>
            Splits up <see cref="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GenericArguments"/> into generic type and method arguments
            </summary>
            <param name="typeGenArgs">Gets updated with a list containing all generic type arguments</param>
            <param name="methGenArgs">Gets updated with a list containing all generic method arguments</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.StepInto">
            <summary>
            Step into the method
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.StepIntoAsync(System.Int32)">
            <summary>
            Step into the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitAsync(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.StepIntoWait(System.Int32)">
            <summary>
            Step into the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.StepIntoWait(System.Threading.CancellationToken,System.Int32)">
            <summary>
            Step into the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="token">Cancellation token</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.StepOver">
            <summary>
            Step over the method
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.StepOverAsync(System.Int32)">
            <summary>
            Step over the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitAsync(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.StepOverWait(System.Int32)">
            <summary>
            Step over the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.StepOverWait(System.Threading.CancellationToken,System.Int32)">
            <summary>
            Step over the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="token">Cancellation token</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.StepOut">
            <summary>
            Step out of the method
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.StepOutAsync(System.Int32)">
            <summary>
            Step out of the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitAsync(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.StepOutWait(System.Int32)">
            <summary>
            Step out of the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.StepOutWait(System.Threading.CancellationToken,System.Int32)">
            <summary>
            Step out of the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="token">Cancellation token</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.RunTo">
            <summary>
            Let the program execute until it returns to this frame
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.RunToAsync(System.Int32)">
            <summary>
            Let the program execute until it returns to this frame and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitAsync(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.RunToWait(System.Int32)">
            <summary>
            Let the program execute until it returns to this frame and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.RunToWait(System.Threading.CancellationToken,System.Int32)">
            <summary>
            Let the program execute until it returns to this frame and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="token">Cancellation token</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.SetOffset(System.Int32)">
            <summary>
            Set next instruction to execute. All <see cref="T:dnSpy.Contracts.Scripting.Debugger.IStackFrame"/> and <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>
            instances will be neutered and can't be used after this method returns.
            </summary>
            <param name="offset">New offset within the current method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.SetOffset(System.UInt32)">
            <summary>
            Set next instruction to execute. All <see cref="T:dnSpy.Contracts.Scripting.Debugger.IStackFrame"/> and <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>
            instances will be neutered and can't be used after this method returns.
            </summary>
            <param name="offset">New offset within the current method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.SetNativeOffset(System.Int32)">
            <summary>
            Set next instruction to execute. All <see cref="T:dnSpy.Contracts.Scripting.Debugger.IStackFrame"/> and <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>
            instances will be neutered and can't be used after this method returns.
            </summary>
            <param name="offset">New offset within the current method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.SetNativeOffset(System.UInt32)">
            <summary>
            Set next instruction to execute. All <see cref="T:dnSpy.Contracts.Scripting.Debugger.IStackFrame"/> and <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>
            instances will be neutered and can't be used after this method returns.
            </summary>
            <param name="offset">New offset within the current method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IDebuggerField)">
            <summary>
            Reads a static field
            </summary>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IDebuggerClass,System.UInt32)">
            <summary>
            Reads a static field
            </summary>
            <param name="cls">Class</param>
            <param name="token">Field token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IDebuggerType,System.UInt32)">
            <summary>
            Reads a static field
            </summary>
            <param name="type">Type</param>
            <param name="token">Field token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IDebuggerClass,System.String,System.Boolean)">
            <summary>
            Reads a static field
            </summary>
            <param name="cls">Class</param>
            <param name="name">Field name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IDebuggerType,System.String,System.Boolean)">
            <summary>
            Reads a static field
            </summary>
            <param name="type">Type</param>
            <param name="name">Field name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IDebuggerType,dnSpy.Contracts.Scripting.Debugger.IDebuggerField)">
            <summary>
            Reads a static field
            </summary>
            <param name="type">Declaring type</param>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.Write(dnSpy.Contracts.Highlighting.ISyntaxHighlightOutput,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            Write this to <paramref name="output"/>
            </summary>
            <param name="output">Destination</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.ToString(dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            ToString()
            </summary>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.MappingResult">
            <summary>
            Debug mapping result
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.MappingResult.Prolog">
            <summary>
            The native code is in the prolog, so the value of the IP is 0.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.MappingResult.Epilog">
            <summary>
            The native code is in an epilog, so the value of the IP is the address of the last instruction of the method.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.MappingResult.NoInfo">
            <summary>
            No mapping information is available for the method, so the value of the IP is 0.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.MappingResult.UnmappedAddress">
            <summary>
            Although there is mapping information for the method, the current address cannot be mapped to Microsoft intermediate language (MSIL) code. The value of the IP is 0.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.MappingResult.Exact">
            <summary>
            Either the method maps exactly to MSIL code or the frame has been interpreted, so the value of the IP is accurate.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.MappingResult.Approximate">
            <summary>
            The method was successfully mapped, but the value of the IP may be approximate.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.ModuleName">
            <summary>
            A module
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ModuleName.op_Implicit(System.String)~dnSpy.Contracts.Scripting.Debugger.ModuleName">
            <summary>implicit operator</summary>
            <param name="moduleFilename">Module filename</param>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ModuleName.AssemblyFullName">
            <summary>
            Gets the full name, identical to the dnlib assembly full name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ModuleName.Name">
            <summary>
            Name of module. This is the filename if <see cref="P:dnSpy.Contracts.Scripting.Debugger.ModuleName.IsInMemory"/> is false, else it's <see cref="P:dnlib.DotNet.ModuleDef.Name"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ModuleName.IsDynamic">
            <summary>
            true if it's a dynamic module
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ModuleName.IsInMemory">
            <summary>
            true if it's an in-memory module and the file doesn't exist on disk
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ModuleName.ModuleNameOnly">
            <summary>
            true if <see cref="P:dnSpy.Contracts.Scripting.Debugger.ModuleName.AssemblyFullName"/> isn't used when comparing this instance against
            other instances.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ModuleName.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="asmFullName">Assembly full name</param>
            <param name="moduleName">Module name</param>
            <param name="isDynamic">true if it's a dynamic module</param>
            <param name="isInMemory">true if it's an in-memory module</param>
            <param name="nameOnly">true if <paramref name="asmFullName"/> is ignored</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ModuleName.Create(System.String)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Scripting.Debugger.ModuleName"/> that was loaded from a file
            </summary>
            <param name="moduleFilename">Module filename</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ModuleName.CreateFromFile(dnlib.DotNet.ModuleDef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Scripting.Debugger.ModuleName"/> that was loaded from a file
            </summary>
            <param name="module">Module</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ModuleName.CreateInMemory(dnlib.DotNet.ModuleDef)">
            <summary>
            Creates an in-memory <see cref="T:dnSpy.Contracts.Scripting.Debugger.ModuleName"/>
            </summary>
            <param name="module">Module</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ModuleName.Create(dnlib.DotNet.ModuleDef,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Scripting.Debugger.ModuleName"/>
            </summary>
            <param name="module">Module</param>
            <param name="isDynamic">true if it's a dynamic module</param>
            <param name="isInMemory">true if it's an in-memory module</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ModuleName.Create(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Scripting.Debugger.ModuleName"/>
            </summary>
            <param name="asmFullName">Full name of assembly. Must be identical to <see cref="P:dnlib.DotNet.AssemblyDef.FullName"/></param>
            <param name="moduleName">Name of module. This is the filename if <paramref name="isInMemory"/>
            is false, else it must be identical to <see cref="P:dnlib.DotNet.ModuleDef.Name"/></param>
            <param name="isDynamic">true if it's a dynamic module</param>
            <param name="isInMemory">true if it's an in-memory module</param>
            <param name="moduleNameOnly">true if <paramref name="asmFullName"/> is ignored</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ModuleName.op_Equality(dnSpy.Contracts.Scripting.Debugger.ModuleName,dnSpy.Contracts.Scripting.Debugger.ModuleName)">
            <summary>
            operator==()
            </summary>
            <param name="a">a</param>
            <param name="b">b</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ModuleName.op_Inequality(dnSpy.Contracts.Scripting.Debugger.ModuleName,dnSpy.Contracts.Scripting.Debugger.ModuleName)">
            <summary>
            operator!=()
            </summary>
            <param name="a">a</param>
            <param name="b">b</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ModuleName.Equals(dnSpy.Contracts.Scripting.Debugger.ModuleName)">
            <summary>
            Equals()
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ModuleName.Equals(System.Object)">
            <summary>
            Equals()
            </summary>
            <param name="obj">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ModuleName.GetHashCode">
            <summary>
            GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ModuleName.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.ThreadState">
            <summary>
            Thread state
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ThreadState.Run">
            <summary>
            The thread runs freely, unless a debug event occurs.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ThreadState.Suspend">
            <summary>
            The thread cannot run.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.ThreadUserState">
            <summary>
            Thread user state
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ThreadUserState.StopRequested">
            <summary>
            A termination of the thread has been requested.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ThreadUserState.SuspendRequested">
            <summary>
            A suspension of the thread has been requested.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ThreadUserState.Background">
            <summary>
            The thread is running in the background.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ThreadUserState.Unstarted">
            <summary>
            The thread has not started executing.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ThreadUserState.Stopped">
            <summary>
            The thread has been terminated.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ThreadUserState.WaitSleepJoin">
            <summary>
            The thread is waiting for another thread to complete a task.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ThreadUserState.Suspended">
            <summary>
            The thread has been suspended.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ThreadUserState.UnsafePoint">
            <summary>
            The thread is at an unsafe point. That is, the thread is at a point in execution where it may block garbage collection.
            
            Debug events may be dispatched from unsafe points, but suspending a thread at an unsafe point will very likely cause a deadlock until the thread is resumed. The safe and unsafe points are determined by the just-in-time (JIT) and garbage collection implementation.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ThreadUserState.ThreadPool">
            <summary>
            The thread is from the thread pool.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags">
            <summary>
            Type printer flags
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.ValueResult">
            <summary>
            A value read from the debugged process
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ValueResult.Value">
            <summary>
            The value. Only valid if <see cref="F:dnSpy.Contracts.Scripting.Debugger.ValueResult.IsValid"/> is true, else it shouldn't be used
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ValueResult.IsValid">
            <summary>
            true if <see cref="F:dnSpy.Contracts.Scripting.Debugger.ValueResult.Value"/> is valid
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ValueResult.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ValueResult.Write(dnSpy.Contracts.Highlighting.ISyntaxHighlightOutput,dnSpy.Contracts.Scripting.Debugger.IDebuggerValue,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            Write this to <paramref name="output"/>
            </summary>
            <param name="output">Destination</param>
            <param name="value">Owner <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/> instance</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ValueResult.ToString(dnSpy.Contracts.Scripting.Debugger.IDebuggerValue,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            ToString()
            </summary>
            <param name="value">Owner <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/> instance</param>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ValueResult.Equals(dnSpy.Contracts.Scripting.Debugger.ValueResult)">
            <summary>
            Equals()
            </summary>
            <param name="other">Other value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ValueResult.Equals(System.Object)">
            <summary>
            Equals()
            </summary>
            <param name="obj">Other value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ValueResult.GetHashCode">
            <summary>
            GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ValueResult.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.IServiceLocator">
            <summary>
            Service locator
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.IServiceLocator.Resolve``1">
            <summary>
            Resolves a service, and throws if it wasn't found
            </summary>
            <typeparam name="T">Type of service</typeparam>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.IServiceLocator.TryResolve``1">
            <summary>
            Resolves a service or returns null if not found
            </summary>
            <typeparam name="T">Type of service</typeparam>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Roslyn.IPrintOptions">
            <summary>
            Print options (<see cref="T:Microsoft.CodeAnalysis.Scripting.Hosting.PrintOptions"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Roslyn.IPrintOptions.Ellipsis">
            <summary>
            Ellipsis string
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Roslyn.IPrintOptions.EscapeNonPrintableCharacters">
            <summary>
            Escape non-printable characters
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Roslyn.IPrintOptions.MaximumOutputLength">
            <summary>
            Maximum output length
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Roslyn.IPrintOptions.MemberDisplayFormat">
            <summary>
            Member display format
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Roslyn.IPrintOptions.NumberRadix">
            <summary>
            Number radix
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals">
            <summary>
            The script's global class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.Instance">
            <summary>
            Returns itself so it can be passed into classes that can't access the globals
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.ScriptReset">
            <summary>
            Raised when the script gets reset. Can be used to unregister from events to prevent
            memory leaks. Raised on the UI thread.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.Token">
            <summary>
            Cancellation token that gets signalled when the script gets reset
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.PrintOptions">
            <summary>
            Print options
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.Print(System.String)">
            <summary>
            Prints text to the screen
            </summary>
            <param name="text">Text</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.Print(System.String,System.Object[])">
            <summary>
            Prints text to the screen
            </summary>
            <param name="fmt">Format</param>
            <param name="args">Args</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.PrintLine(System.String)">
            <summary>
            Prints text followed by a new line to the screen
            </summary>
            <param name="text">Text or null</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.PrintLine(System.String,System.Object[])">
            <summary>
            Prints text followed by a new line to the screen
            </summary>
            <param name="fmt">Format</param>
            <param name="args">Args</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.Print(System.Object)">
            <summary>
            Formats and prints a value to the screen
            </summary>
            <param name="value">Value, can be null</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.PrintLine(System.Object)">
            <summary>
            Formats and prints a value followed by a new line to the screen
            </summary>
            <param name="value">Value or null</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.Print(System.Exception)">
            <summary>
            Formats and prints an exception to the screen
            </summary>
            <param name="ex">Exception</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.PrintLine(System.Exception)">
            <summary>
            Formats and prints an exception followed by a new line to the screen
            </summary>
            <param name="ex">Exception</param>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.UIDispatcher">
            <summary>
            UI thread dispatcher
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.UI(System.Action)">
            <summary>
            Executes <paramref name="action"/> in the UI thread
            </summary>
            <param name="action">Code</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.UI``1(System.Func{``0})">
            <summary>
            Executes <paramref name="func"/> in the UI thread
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="func">Code</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.Break">
            <summary>
            Calls <see cref="M:System.Diagnostics.Debugger.Break"/>. Use dnSpy to debug itself
            (dnSpy --multiple) and then call this method from your script in the debugged dnSpy process.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.Resolve``1">
            <summary>
            Resolves a service, and throws if it wasn't found
            </summary>
            <typeparam name="T">Type of service</typeparam>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.TryResolve``1">
            <summary>
            Resolves a service or returns null if not found
            </summary>
            <typeparam name="T">Type of service</typeparam>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.Show(System.String,dnSpy.Contracts.App.MsgBoxButton,System.Windows.Window)">
            <summary>
            Shows a message box
            </summary>
            <param name="message">Message to show</param>
            <param name="buttons">Buttons that should be present</param>
            <param name="ownerWindow">Owner window or null to use the main window</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.ShowOKCancel(System.String,System.Windows.Window)">
            <summary>
            Shows a message box with buttons OK and Cancel
            </summary>
            <param name="message">Message to show</param>
            <param name="ownerWindow">Owner window or null to use the main window</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.ShowOC(System.String,System.Windows.Window)">
            <summary>
            Shows a message box with buttons OK and Cancel
            </summary>
            <param name="message">Message to show</param>
            <param name="ownerWindow">Owner window or null to use the main window</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.ShowYesNo(System.String,System.Windows.Window)">
            <summary>
            Shows a message box with buttons Yes and No
            </summary>
            <param name="message">Message to show</param>
            <param name="ownerWindow">Owner window or null to use the main window</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.ShowYN(System.String,System.Windows.Window)">
            <summary>
            Shows a message box with buttons Yes and No
            </summary>
            <param name="message">Message to show</param>
            <param name="ownerWindow">Owner window or null to use the main window</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.ShowYesNoCancel(System.String,System.Windows.Window)">
            <summary>
            Shows a message box with buttons Yes, No and Cancel
            </summary>
            <param name="message">Message to show</param>
            <param name="ownerWindow">Owner window or null to use the main window</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.ShowYNC(System.String,System.Windows.Window)">
            <summary>
            Shows a message box with buttons Yes, No and Cancel
            </summary>
            <param name="message">Message to show</param>
            <param name="ownerWindow">Owner window or null to use the main window</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.Ask``1(System.String,System.String,System.String,System.Func{System.String,``0},System.Func{System.String,System.String},System.Windows.Window)">
            <summary>
            Asks the user for a value and returns it or the default value (eg. null or 0) if the
            user canceled the dialog box.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="labelMessage">Label</param>
            <param name="defaultText">Default text to write to the textbox or null</param>
            <param name="title">Title or null</param>
            <param name="converter">Converts a string to the type, or null to use the default
            converter.</param>
            <param name="verifier">Verifies the typed message. Returns null or an empty string if
            it's a valid value, else an error message to show to the user.</param>
            <param name="ownerWindow">Owner window or null to use the main window</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.Show(System.Exception,System.String,System.Windows.Window)">
            <summary>
            Shows an exception message
            </summary>
            <param name="exception">Exception</param>
            <param name="msg">Message to show or null</param>
            <param name="ownerWindow">Owner window or null to use the main window</param>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Roslyn.MemberDisplayFormat">
            <summary>
            Member display format (<see cref="T:Microsoft.CodeAnalysis.Scripting.Hosting.MemberDisplayFormat"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Roslyn.MemberDisplayFormat.SingleLine">
            <summary>
            Display structure of the object on a single line.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Roslyn.MemberDisplayFormat.SeparateLines">
            <summary>
            Displays a simple description of the object followed by list of members. Each member is displayed on a separate line.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Roslyn.MemberDisplayFormat.Hidden">
            <summary>
            Display just a simple description of the object, like type name or ToString(). Don't display any members of the object.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.ScriptException">
            <summary>
            Base class of script-related exceptions
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.ScriptException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.ScriptException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.ScriptException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message</param>
            <param name="innerException">Inner exception or null</param>
        </member>
        <member name="T:dnSpy.Contracts.Search.BodyResult">
            <summary>
            Stored in <see cref="P:dnSpy.Contracts.Search.ISearchResult.Object"/> if the method body was searched
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.BodyResult.ILOffset">
            <summary>
            IL offset of instruction referencing the constant
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Search.BodyResult.#ctor(System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="ilOffset">IL offset of instruction</param>
        </member>
        <member name="T:dnSpy.Contracts.Search.FileSearcherOptions">
            <summary>
            <see cref="T:dnSpy.Contracts.Search.IFileSearcher"/> options
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Search.FileSearcherOptions.DEFAULT_MAX_RESULTS">
            <summary>
            Default number of results to return
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.FileSearcherOptions.MaxResults">
            <summary>
            Max results to return
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.FileSearcherOptions.SearchComparer">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Search.ISearchComparer"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.FileSearcherOptions.Filter">
            <summary>
            Filter
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.FileSearcherOptions.SearchDecompiledData">
            <summary>
            Searches decompiled data, eg. decompiled XAML
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Search.FileSearcherOptions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Search.FileSearcherOptions.Clone">
            <summary>
            Clones this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Search.FileSearcherOptions.CopyTo(dnSpy.Contracts.Search.FileSearcherOptions)">
            <summary>
            Copies this instance to <paramref name="other"/> and returns it
            </summary>
            <param name="other">Destination</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Search.IFileSearcher">
            <summary>
            Searches for things in <see cref="T:dnSpy.Contracts.Files.IDnSpyFile"/>s and <see cref="T:dnSpy.Contracts.Files.TreeView.IFileTreeView"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.IFileSearcher.TooManyResults">
            <summary>
            true if too many results were found and the search was canceled
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.IFileSearcher.SyntaxHighlight">
            <summary>
            Used by <see cref="T:dnSpy.Contracts.Search.ISearchResult"/>. true if the result is syntax highlighted in the UI.
            <see cref="M:dnSpy.Contracts.Search.ISearchResult.RefreshUI"/> must be called if this gets updated.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.IFileSearcher.Language">
            <summary>
            Used by <see cref="T:dnSpy.Contracts.Search.ISearchResult"/>. Language to use.
            <see cref="M:dnSpy.Contracts.Search.ISearchResult.RefreshUI"/> must be called if this gets updated.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.IFileSearcher.BackgroundType">
            <summary>
            Used by <see cref="T:dnSpy.Contracts.Search.ISearchResult"/>. Background type for images.
            <see cref="M:dnSpy.Contracts.Search.ISearchResult.RefreshUI"/> must be called if this gets updated.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.IFileSearcher.SearchingResult">
            <summary>
            A search result that was added to indicate that it's searching. Should be removed from
            the list after the search has completed if it's not null.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Search.IFileSearcher.Start(System.Collections.Generic.IEnumerable{dnSpy.Contracts.Files.TreeView.IDnSpyFileNode})">
            <summary>
            Starts the search
            </summary>
            <param name="files">Files to search</param>
        </member>
        <member name="M:dnSpy.Contracts.Search.IFileSearcher.Start(System.Collections.Generic.IEnumerable{dnSpy.Contracts.Search.SearchTypeInfo})">
            <summary>
            Starts the search
            </summary>
            <param name="typeInfos">Types to search</param>
        </member>
        <member name="M:dnSpy.Contracts.Search.IFileSearcher.Cancel">
            <summary>
            Cancels the search
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Search.IFileSearcher.OnSearchCompleted">
            <summary>
            Raised when the search has completed or was canceled
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Search.IFileSearcher.OnNewSearchResults">
            <summary>
            Raised when there are more results available
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Search.IFileSearcherCreator">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Search.IFileSearcher"/> instances
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Search.IFileSearcherCreator.Create(dnSpy.Contracts.Search.FileSearcherOptions)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Search.IFileSearcher"/> instance
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Search.ISearchComparer">
            <summary>
            Search comparer
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Search.ISearchComparer.IsMatch(System.String,System.Object)">
            <summary>
            Checks whether some value matches something
            </summary>
            <param name="text">String representation of <paramref name="obj"/> or null</param>
            <param name="obj">Original object</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Search.ISearchResult">
            <summary>
            Search result
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.ISearchResult.Object">
            <summary>
            <see cref="T:dnSpy.Contracts.Files.IDnSpyFile"/> if it's a non-.NET file. <see cref="T:dnlib.DotNet.AssemblyDef"/>,
            <see cref="T:dnlib.DotNet.ModuleDef"/>, <see cref="T:dnlib.DotNet.AssemblyRef"/>, <see cref="T:dnlib.DotNet.ModuleRef"/>,
            <see cref="T:dnSpy.Contracts.Files.TreeView.Resources.IResourceNode"/>, <see cref="T:dnSpy.Contracts.Files.TreeView.Resources.IResourceElementNode"/>, <see cref="T:System.String"/>
            (namespace), <see cref="T:dnlib.DotNet.TypeDef"/>, <see cref="T:dnlib.DotNet.MethodDef"/>, <see cref="T:dnlib.DotNet.FieldDef"/>,
            <see cref="T:dnlib.DotNet.PropertyDef"/>, <see cref="T:dnlib.DotNet.EventDef"/>.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.ISearchResult.DnSpyFile">
            <summary>
            Owner file
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Search.ISearchResult.RefreshUI">
            <summary>
            Refreshes UI fields. Should be called if the theme,
            <see cref="P:dnSpy.Contracts.Search.IFileSearcher.SyntaxHighlight"/> or <see cref="P:dnSpy.Contracts.Search.IFileSearcher.Language"/>
            changes.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.ISearchResult.Reference">
            <summary>
            Gets the reference
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.ISearchResult.ObjectInfo">
            <summary>
            Gets any extra info related to <see cref="P:dnSpy.Contracts.Search.ISearchResult.Object"/>. <see cref="T:dnSpy.Contracts.Search.BodyResult"/> if the
            method body was searched.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Search.SearchResultEventArgs">
            <summary>
            <see cref="T:dnSpy.Contracts.Search.ISearchResult"/> event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.SearchResultEventArgs.Results">
            <summary>
            New search results
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Search.SearchResultEventArgs.#ctor(dnSpy.Contracts.Search.ISearchResult[])">
            <summary>
            Constructor
            </summary>
            <param name="results">Search results</param>
        </member>
        <member name="T:dnSpy.Contracts.Search.SearchTypeInfo">
            <summary>
            Search a type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.SearchTypeInfo.DnSpyFile">
            <summary>
            Owner file
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.SearchTypeInfo.Type">
            <summary>
            Type to search
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Search.SearchTypeInfo.#ctor(dnSpy.Contracts.Files.IDnSpyFile,dnlib.DotNet.TypeDef)">
            <summary>
            Constructor
            </summary>
            <param name="file">File</param>
            <param name="type">Type</param>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.REFRESH_LANGUAGE_SHOWMEMBER">
            <summary>
            Code using <see cref="M:dnSpy.Contracts.Languages.ILanguage.ShowMember(dnlib.DotNet.IMemberRef)"/> must be
            refreshed.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.REFRESH_TREEVIEW_MEMBER_ORDER">
            <summary>
            Treeview member order setting got updated
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.DISABLE_MMAP">
            <summary>
            Disable memory mapped I/O
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_SETTINGS_TAB_DECOMPILER">
            <summary>
            Order of decompiler settings tab
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_DEBUGGER_TAB_DISPLAY">
            <summary>
            Order of debugger settings tab
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_SETTINGS_TAB_DISPLAY">
            <summary>
            Order of display settings tab
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_SETTINGS_TAB_HEXEDITOR">
            <summary>
            Order of hex editor settings tab
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_BAML_TAB_DISPLAY">
            <summary>
            Order of baml settings tab
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_SETTINGS_TAB_MISC">
            <summary>
            Order of misc settings tab
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_SETTINGS_LISTENER_FILEMANAGER">
            <summary>
            Order of <see cref="T:dnSpy.Contracts.Files.IFileManager"/>'s <see cref="T:dnSpy.Contracts.Settings.Dialog.IAppSettingsModifiedListener"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_SETTINGS_LISTENER_DECOMPILER">
            <summary>
            Order of decompiler's <see cref="T:dnSpy.Contracts.Settings.Dialog.IAppSettingsModifiedListener"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_SETTINGS_LISTENER_FILETREEVIEW">
            <summary>
            Order of <see cref="T:dnSpy.Contracts.Files.TreeView.IFileTreeView"/>'s <see cref="T:dnSpy.Contracts.Settings.Dialog.IAppSettingsModifiedListener"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.GUID_DYNTAB_MISC">
            <summary>
            Guid of app settings tab "Misc"
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_MISC_USEMMAPDIO">
            <summary>Misc tab: order of: use mmap'd I/O checkbox</summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_MISC_EXPLORERINTEGRATION">
            <summary>Misc tab: order of: windows explorer integration checkbox</summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_MISC_DESERIALIZERSRCS">
            <summary>Misc tab: order of: deserialize resources checkbox</summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_MISC_ENABLEALLWARNINGS">
            <summary>Misc tab: order of: enable all warnings button</summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_MISC_USENEWRENDERER">
            <summary>Misc tab: order of: use new renderer group box</summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.IAppRefreshSettings">
            <summary>
            Stores info on what needs to be refreshed when the settings dialog box has closed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Dialog.IAppRefreshSettings.Add(System.Guid,System.Object)">
            <summary>
            Adds something that must be refreshed, eg. <see cref="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.REFRESH_LANGUAGE_SHOWMEMBER"/>
            </summary>
            <param name="guid">Guid, eg. <see cref="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.REFRESH_LANGUAGE_SHOWMEMBER"/></param>
            <param name="value">Value or null</param>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Dialog.IAppRefreshSettings.Has(System.Guid)">
            <summary>
            Returns true if <paramref name="guid"/> has been added by <see cref="M:dnSpy.Contracts.Settings.Dialog.IAppRefreshSettings.Add(System.Guid,System.Object)"/>
            </summary>
            <param name="guid">Guid, eg. <see cref="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.REFRESH_LANGUAGE_SHOWMEMBER"/></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Dialog.IAppRefreshSettings.GetValue(System.Guid)">
            <summary>
            Gets the value or null if it's not present
            </summary>
            <param name="guid">Guid, eg. <see cref="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.REFRESH_LANGUAGE_SHOWMEMBER"/></param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.IAppSettingsModifiedListener">
            <summary>
            Gets notified when the settings dialog box has closed. Use <see cref="T:dnSpy.Contracts.Settings.Dialog.ExportAppSettingsModifiedListenerAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Dialog.IAppSettingsModifiedListener.OnSettingsModified(dnSpy.Contracts.Settings.Dialog.IAppRefreshSettings)">
            <summary>
            Called when the settings have been updated
            </summary>
            <param name="appRefreshSettings">Stuff that must be refreshed</param>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.IAppSettingsModifiedListenerMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.IAppSettingsModifiedListenerMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Dialog.ExportAppSettingsModifiedListenerAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.ExportAppSettingsModifiedListenerAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Settings.Dialog.IAppSettingsModifiedListener"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Dialog.ExportAppSettingsModifiedListenerAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.ExportAppSettingsModifiedListenerAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.IAppSettingsTab">
            <summary>
            A tab shown in the main settings dialog box
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.IAppSettingsTab.Order">
            <summary>
            Gets the order, eg. <see cref="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_SETTINGS_TAB_DECOMPILER"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.IAppSettingsTab.Title">
            <summary>
            Gets the title
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.IAppSettingsTab.UIObject">
            <summary>
            Gets the UI object
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Dialog.IAppSettingsTab.OnClosed(System.Boolean,dnSpy.Contracts.Settings.Dialog.IAppRefreshSettings)">
            <summary>
            Called when the dialog box has been closed
            </summary>
            <param name="saveSettings">true to save the settings, false to cancel any changes</param>
            <param name="appRefreshSettings">Used if <paramref name="saveSettings"/> is true. Add
            anything that needs to be refreshed, eg. re-decompile code</param>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.IAppSettingsTabCreator">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Settings.Dialog.IAppSettingsTab"/> instances
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Dialog.IAppSettingsTabCreator.Create">
            <summary>
            Creates new <see cref="T:dnSpy.Contracts.Settings.Dialog.IAppSettingsTab"/> instances
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.IDynamicAppSettingsTab">
            <summary>
            A tab with <see cref="T:dnSpy.Contracts.Settings.Dialog.ISimpleAppOption"/>s. Use <see cref="T:dnSpy.Contracts.Settings.Dialog.ExportDynamicAppSettingsTabAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.IDynamicAppSettingsTabMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.IDynamicAppSettingsTabMetadata.Guid">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Dialog.ExportDynamicAppSettingsTabAttribute.Guid"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.IDynamicAppSettingsTabMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Dialog.ExportDynamicAppSettingsTabAttribute.Order"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.IDynamicAppSettingsTabMetadata.Title">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Dialog.ExportDynamicAppSettingsTabAttribute.Title"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.ExportDynamicAppSettingsTabAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Settings.Dialog.IDynamicAppSettingsTab"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Dialog.ExportDynamicAppSettingsTabAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.ExportDynamicAppSettingsTabAttribute.Guid">
            <summary>
            Gets the guid, eg. <see cref="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.GUID_DYNTAB_MISC"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.ExportDynamicAppSettingsTabAttribute.Order">
            <summary>
            Gets the order, eg. <see cref="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_SETTINGS_TAB_DECOMPILER"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.ExportDynamicAppSettingsTabAttribute.Title">
            <summary>
            Gets the title
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.ISimpleAppOption">
            <summary>
            An option added to the app settings dialog box, see <see cref="T:dnSpy.Contracts.Settings.Dialog.ISimpleAppOptionCheckBox"/>,
            <see cref="T:dnSpy.Contracts.Settings.Dialog.ISimpleAppOptionButton"/>, <see cref="T:dnSpy.Contracts.Settings.Dialog.ISimpleAppOptionTextBox"/>,
            <see cref="T:dnSpy.Contracts.Settings.Dialog.ISimpleAppOptionUserContent"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.ISimpleAppOption.Order">
            <summary>
            Gets the order
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Dialog.ISimpleAppOption.OnClosed(System.Boolean,dnSpy.Contracts.Settings.Dialog.IAppRefreshSettings)">
            <summary>
            Called when the dialog box has been closed
            </summary>
            <param name="saveSettings">true to save the settings, false to cancel any changes</param>
            <param name="appRefreshSettings">Used if <paramref name="saveSettings"/> is true. Add
            anything that needs to be refreshed, eg. re-decompile code</param>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.ISimpleAppOptionCheckBox">
            <summary>
            Adds a checkbox to the app settings dialog box
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.ISimpleAppOptionCheckBox.Text">
            <summary>
            Gets the checkbox text
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.ISimpleAppOptionCheckBox.Value">
            <summary>
            Gets the value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.ISimpleAppOptionCheckBox.IsThreeState">
            <summary>
            true if it's a three-state checkbox
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.ISimpleAppOptionCheckBox.ToolTip">
            <summary>
            Gets the tooltip or null
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.ISimpleAppOptionButton">
            <summary>
            Adds a button to the app settings dialog box
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.ISimpleAppOptionButton.Text">
            <summary>
            Gets the button text
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.ISimpleAppOptionButton.Command">
            <summary>
            Gets the button command
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.ISimpleAppOptionButton.ToolTip">
            <summary>
            Gets the tooltip or null
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.ISimpleAppOptionTextBox">
            <summary>
            Adds a textbox to the app settings dialog box
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.ISimpleAppOptionTextBox.Text">
            <summary>
            Gets the label text
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.ISimpleAppOptionTextBox.Value">
            <summary>
            Gets the textbox text
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.ISimpleAppOptionTextBox.ToolTip">
            <summary>
            Gets the tooltip or null
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.ISimpleAppOptionUserContent">
            <summary>
            Adds user content to the app settings dialog box
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.ISimpleAppOptionUserContent.UIContent">
            <summary>
            Gets the UI content
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.ISimpleAppOptionCreator">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Settings.Dialog.ISimpleAppOption"/> instances (<see cref="T:dnSpy.Contracts.Settings.Dialog.ISimpleAppOptionCheckBox"/>,
            <see cref="T:dnSpy.Contracts.Settings.Dialog.ISimpleAppOptionButton"/>, <see cref="T:dnSpy.Contracts.Settings.Dialog.ISimpleAppOptionTextBox"/>,
            <see cref="T:dnSpy.Contracts.Settings.Dialog.ISimpleAppOptionUserContent"/>). Use <see cref="T:dnSpy.Contracts.Settings.Dialog.ExportSimpleAppOptionCreatorAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Dialog.ISimpleAppOptionCreator.Create">
            <summary>
            Creates new <see cref="T:dnSpy.Contracts.Settings.Dialog.ISimpleAppOption"/> instances
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.ISimpleAppOptionCreatorMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.ISimpleAppOptionCreatorMetadata.Guid">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Dialog.ExportSimpleAppOptionCreatorAttribute.Guid"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.ExportSimpleAppOptionCreatorAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Settings.Dialog.ISimpleAppOptionCreator"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Dialog.ExportSimpleAppOptionCreatorAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.ExportSimpleAppOptionCreatorAttribute.Guid">
            <summary>
            Gets the guid of the <see cref="T:dnSpy.Contracts.Settings.Dialog.IDynamicAppSettingsTab"/>, eg. <see cref="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.GUID_DYNTAB_MISC"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.ISettingsManager">
            <summary>
            Settings manager
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.ISettingsManager.Sections">
            <summary>
            Gets all sections
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.ISettingsManager.GetOrCreateSection(System.Guid)">
            <summary>
            Gets an existing section or creates a new one if one doesn't exist
            </summary>
            <param name="guid">Guid of section</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Settings.ISettingsManager.RemoveSection(System.Guid)">
            <summary>
            Removes a section
            </summary>
            <param name="guid">Guid of section</param>
        </member>
        <member name="M:dnSpy.Contracts.Settings.ISettingsManager.RemoveSection(dnSpy.Contracts.Settings.ISettingsSection)">
            <summary>
            Removes a section
            </summary>
            <param name="section">Section</param>
        </member>
        <member name="M:dnSpy.Contracts.Settings.ISettingsManager.RecreateSection(System.Guid)">
            <summary>
            Removes an existing section and re-creates it
            </summary>
            <param name="guid">Guid of section</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Settings.ISettingsSection">
            <summary>
            Settings section
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.ISettingsSection.Name">
            <summary>
            Name of section
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.ISettingsSection.Attributes">
            <summary>
            Gets all attributes
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.ISettingsSection.Attribute``1(System.String,``0)">
            <summary>
            Adds or overwrites an existing attribute with a new value
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="name">Name of attribute</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Settings.ISettingsSection.Attribute``1(System.String)">
            <summary>
            Gets the value of the attribute or the default value if it's not present
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="name">Name of attribute</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Settings.ISettingsSection.RemoveAttribute(System.String)">
            <summary>
            Removes an attribute
            </summary>
            <param name="name">Name of attribute</param>
        </member>
        <member name="M:dnSpy.Contracts.Settings.ISettingsSection.CopyFrom(dnSpy.Contracts.Settings.ISettingsSection)">
            <summary>
            Copies <paramref name="section"/> to this instance
            </summary>
            <param name="section">Source section</param>
        </member>
        <member name="T:dnSpy.Contracts.Settings.ISettingsSectionCreator">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Settings.ISettingsSection"/>s
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.ISettingsSectionCreator.Sections">
            <summary>
            Gets all sections
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.ISettingsSectionCreator.CreateSection(System.String)">
            <summary>
            Creates a new section, even if a section with the same name already exists
            </summary>
            <param name="name">Name of section</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Settings.ISettingsSectionCreator.GetOrCreateSection(System.String)">
            <summary>
            Gets an existing section or creates a new one if one doesn't exist
            </summary>
            <param name="name">Name of section</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Settings.ISettingsSectionCreator.RemoveSection(System.String)">
            <summary>
            Removes a section
            </summary>
            <param name="name">Name of section</param>
        </member>
        <member name="M:dnSpy.Contracts.Settings.ISettingsSectionCreator.RemoveSection(dnSpy.Contracts.Settings.ISettingsSection)">
            <summary>
            Removes a section
            </summary>
            <param name="section">Section</param>
        </member>
        <member name="M:dnSpy.Contracts.Settings.ISettingsSectionCreator.SectionsWithName(System.String)">
            <summary>
            Gets all sections
            </summary>
            <param name="name">Name of section</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Settings.ISettingsSectionCreator.TryGetSection(System.String)">
            <summary>
            Gets a section or null if it doesn't exist
            </summary>
            <param name="name">Name of section</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Tabs.ITabContent">
            <summary>
            Tab content
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabContent.Title">
            <summary>
            Title. If this property can change, you must implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabContent.ToolTip">
            <summary>
            ToolTip or null. If this property can change, you must implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabContent.UIObject">
            <summary>
            The UI object. If this property can change, you must implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabContent.FocusedElement">
            <summary>
            Gets the element that should get focus when the tab is selected or null to use <see cref="P:dnSpy.Contracts.Tabs.ITabContent.UIObject"/>.
            Implement <see cref="T:dnSpy.Contracts.Controls.IFocusable"/> to set focus yourself.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabContent.OnVisibilityChanged(dnSpy.Contracts.Tabs.TabContentVisibilityEvent)">
            <summary>
            Called when the visibility changes
            </summary>
            <param name="visEvent">Event</param>
        </member>
        <member name="T:dnSpy.Contracts.Tabs.ITabGroup">
            <summary>
            Contains 0 or more tabs
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroup.Tag">
            <summary>
            Any value can be written here. It's ignored by this instance.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroup.TabGroupManager">
            <summary>
            Gets the owner <see cref="T:dnSpy.Contracts.Tabs.ITabGroupManager"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroup.TabContents">
            <summary>
            Gets all <see cref="T:dnSpy.Contracts.Tabs.ITabContent"/> instances
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroup.ActiveTabContent">
            <summary>
            Gets the active <see cref="T:dnSpy.Contracts.Tabs.ITabContent"/> or null if <see cref="P:dnSpy.Contracts.Tabs.ITabGroup.TabContents"/> is empty
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Tabs.ITabGroup.TabContentAttached">
            <summary>
            Raised when a <see cref="T:dnSpy.Contracts.Tabs.ITabContent"/> is attached/detached
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroup.IsKeyboardFocusWithin">
            <summary>
            true if keyboard focus is within the tab
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroup.SetFocus(dnSpy.Contracts.Tabs.ITabContent)">
            <summary>
            Sets keyboard focus
            </summary>
            <param name="content">Content</param>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroup.Close(dnSpy.Contracts.Tabs.ITabContent)">
            <summary>
            Closes the tab
            </summary>
            <param name="content">Content</param>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroup.Add(dnSpy.Contracts.Tabs.ITabContent)">
            <summary>
            Adds tab content
            </summary>
            <param name="content">Content</param>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroup.CloseActiveTabCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroup.CloseActiveTab"/> can execute
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroup.CloseActiveTab">
            <summary>
            Closes the active tab
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroup.CloseAllTabsCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroup.CloseAllTabs"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroup.CloseAllTabs">
            <summary>
            Closes all tabs
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroup.CloseAllButActiveTabCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroup.CloseAllButActiveTab"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroup.CloseAllButActiveTab">
            <summary>
            Closes all tabs except the active tab
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroup.SelectNextTabCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroup.SelectNextTab"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroup.SelectNextTab">
            <summary>
            Selects the next tab
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroup.SelectPreviousTabCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroup.SelectPreviousTab"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroup.SelectPreviousTab">
            <summary>
            Selects the previous tab
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroup.ContextMenuCreator">
            <summary>
            Gets the context menu creator
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Tabs.ITabGroupManager">
            <summary>
            <see cref="T:dnSpy.Contracts.Tabs.ITabGroup"/> manager
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupManager.Tag">
            <summary>
            Any value can be written here. It's ignored by this instance.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupManager.TabManager">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Tabs.ITabManager"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupManager.TabGroups">
            <summary>
            Gets all <see cref="T:dnSpy.Contracts.Tabs.ITabGroup"/> instances
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupManager.ActiveTabGroup">
            <summary>
            Gets the active <see cref="T:dnSpy.Contracts.Tabs.ITabGroup"/> or null if <see cref="P:dnSpy.Contracts.Tabs.ITabGroupManager.TabGroups"/> is empty
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupManager.IsHorizontal">
            <summary>
            true if the <see cref="T:dnSpy.Contracts.Tabs.ITabGroup"/>s are lined up horizontally, else vertically
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupManager.Create">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Tabs.ITabGroup"/> instance
            </summary>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupManager.UIObject">
            <summary>
            Gets the UI object
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Tabs.ITabGroupManager.TabSelectionChanged">
            <summary>
            Raised when a new tab has been selected
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Tabs.ITabGroupManager.TabGroupSelectionChanged">
            <summary>
            Raised when a new tab group has been selected
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Tabs.ITabGroupManager.TabGroupCollectionChanged">
            <summary>
            Raised when a tab group has been added or removed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupManager.Close(dnSpy.Contracts.Tabs.ITabGroup)">
            <summary>
            Closes the tab group
            </summary>
            <param name="tabGroup">Tab group</param>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupManager.CloseAllTabsCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroupManager.CloseAllTabs"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupManager.CloseAllTabs">
            <summary>
            Closes all tabs
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupManager.NewHorizontalTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroupManager.NewHorizontalTabGroup(System.Action{dnSpy.Contracts.Tabs.ITabGroup})"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupManager.NewHorizontalTabGroup(System.Action{dnSpy.Contracts.Tabs.ITabGroup})">
            <summary>
            Moves the active tab to a new horizontal tab group
            </summary>
            <param name="onCreated">Called after the <see cref="T:dnSpy.Contracts.Tabs.ITabGroup"/> instance has been created</param>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupManager.NewVerticalTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroupManager.NewVerticalTabGroup(System.Action{dnSpy.Contracts.Tabs.ITabGroup})"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupManager.NewVerticalTabGroup(System.Action{dnSpy.Contracts.Tabs.ITabGroup})">
            <summary>
            Moves the active tab to a new vertical tab group
            </summary>
            <param name="onCreated">Called after the <see cref="T:dnSpy.Contracts.Tabs.ITabGroup"/> instance has been created</param>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupManager.MoveToNextTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroupManager.MoveToNextTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupManager.MoveToNextTabGroup">
            <summary>
            Moves active tab to the next tab group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupManager.MoveToPreviousTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroupManager.MoveToPreviousTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupManager.MoveToPreviousTabGroup">
            <summary>
            Moves the active tab to the previous tab group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupManager.MoveAllToNextTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroupManager.MoveAllToNextTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupManager.MoveAllToNextTabGroup">
            <summary>
            Moves all tabs in the current tab group to the next tab group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupManager.MoveAllToPreviousTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroupManager.MoveAllToPreviousTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupManager.MoveAllToPreviousTabGroup">
            <summary>
            Moves all tabs in the current tab group to the previous tab group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupManager.CloseTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroupManager.CloseTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupManager.CloseTabGroup">
            <summary>
            Closes the tab group and all its tabs
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupManager.CloseAllTabGroupsButThisCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroupManager.CloseAllTabGroupsButThis"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupManager.CloseAllTabGroupsButThis">
            <summary>
            Closes all tab groups except the active one
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupManager.MoveTabGroupAfterNextTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroupManager.MoveTabGroupAfterNextTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupManager.MoveTabGroupAfterNextTabGroup">
            <summary>
            Moves the active tab group after the next one
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupManager.MoveTabGroupBeforePreviousTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroupManager.MoveTabGroupBeforePreviousTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupManager.MoveTabGroupBeforePreviousTabGroup">
            <summary>
            Moves the active tab group before the previous one
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupManager.MergeAllTabGroupsCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroupManager.MergeAllTabGroups"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupManager.MergeAllTabGroups">
            <summary>
            Moves all tabs to one tab group and closes the remaining (empty) tab groups
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupManager.UseVerticalTabGroupsCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroupManager.UseVerticalTabGroups"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupManager.UseVerticalTabGroups">
            <summary>
            Stacks all tab groups vertically
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupManager.UseHorizontalTabGroupsCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroupManager.UseHorizontalTabGroups"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupManager.UseHorizontalTabGroups">
            <summary>
            Stacks all tab groups horizontally
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Tabs.ITabManager">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Tabs.ITabGroupManager"/> instances
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabManager.TabGroupManagers">
            <summary>
            Gets all <see cref="T:dnSpy.Contracts.Tabs.ITabGroupManager"/> instances
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabManager.ActiveTabGroupManager">
            <summary>
            Gets the active <see cref="T:dnSpy.Contracts.Tabs.ITabGroupManager"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabManager.Create(dnSpy.Contracts.Tabs.TabGroupManagerOptions)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Tabs.ITabGroupManager"/> instance
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabManager.Remove(dnSpy.Contracts.Tabs.ITabGroupManager)">
            <summary>
            Removes a <see cref="T:dnSpy.Contracts.Tabs.ITabGroupManager"/> instance
            </summary>
            <param name="mgr">Instance to remove</param>
        </member>
        <member name="T:dnSpy.Contracts.Tabs.ITabManagerCreator">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Tabs.ITabManager"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabManagerCreator.Create">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Tabs.ITabManager"/> instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Tabs.TabContentAttachedEventArgs">
            <summary>
            <see cref="T:dnSpy.Contracts.Tabs.ITabContent"/> attached/detached event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.TabContentAttachedEventArgs.Attached">
            <summary>
            true if attached, false if detached
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.TabContentAttachedEventArgs.TabContent">
            <summary>
            The attached/detached tab content instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.TabContentAttachedEventArgs.#ctor(System.Boolean,dnSpy.Contracts.Tabs.ITabContent)">
            <summary>
            Constructor
            </summary>
            <param name="attached">true if attached, false if detached</param>
            <param name="tabContent">Tab content</param>
        </member>
        <member name="T:dnSpy.Contracts.Tabs.TabContentVisibilityEvent">
            <summary>
            Event type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Tabs.TabContentVisibilityEvent.Added">
            <summary>
            It's been added to the UI. It may or may not be visible.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Tabs.TabContentVisibilityEvent.Removed">
            <summary>
            It's been removed from the UI
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Tabs.TabContentVisibilityEvent.Visible">
            <summary>
            It's open and visible
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Tabs.TabContentVisibilityEvent.Hidden">
            <summary>
            It's open but hidden
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Tabs.TabContentVisibilityEvent.GotKeyboardFocus">
            <summary>
            The content got keyboard focus
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Tabs.TabContentVisibilityEvent.LostKeyboardFocus">
            <summary>
            The content lost keyboard focus
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Tabs.TabGroupCollectionChangedEventArgs">
            <summary>
            Collection changed event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.TabGroupCollectionChangedEventArgs.Added">
            <summary>
            true if <see cref="P:dnSpy.Contracts.Tabs.TabGroupCollectionChangedEventArgs.TabGroup"/> was added, false if it was removed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.TabGroupCollectionChangedEventArgs.TabGroup">
            <summary>
            The tab group
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.TabGroupCollectionChangedEventArgs.#ctor(System.Boolean,dnSpy.Contracts.Tabs.ITabGroup)">
            <summary>
            Constructor
            </summary>
            <param name="added">true if it was added</param>
            <param name="tabGroup">Tab group</param>
        </member>
        <member name="T:dnSpy.Contracts.Tabs.TabGroupManagerOptions">
            <summary>
            <see cref="T:dnSpy.Contracts.Tabs.ITabGroupManager"/> options
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Tabs.TabGroupManagerOptions.TabControlStyle">
            <summary>
            A style or a resource key or null to use the default style
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Tabs.TabGroupManagerOptions.TabItemStyle">
            <summary>
            A style or a resource key or null to use the default style
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Tabs.TabGroupManagerOptions.TabGroupGuid">
            <summary>
            Guid to use to initialize the context menu if <see cref="F:dnSpy.Contracts.Tabs.TabGroupManagerOptions.InitializeContextMenu"/> is null
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Tabs.TabGroupManagerOptions.InitializeContextMenu">
            <summary>
            Called in the <see cref="T:dnSpy.Contracts.Tabs.ITabGroup"/> constructor to initialize the context menu. If
            null, the instance itself initializes it using <see cref="F:dnSpy.Contracts.Tabs.TabGroupManagerOptions.TabGroupGuid"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.TabGroupManagerOptions.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.TabGroupManagerOptions.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="tabGroupGuid">See <see cref="F:dnSpy.Contracts.Tabs.TabGroupManagerOptions.TabGroupGuid"/></param>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.TabGroupManagerOptions.#ctor(System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="tabGroupGuid">See <see cref="F:dnSpy.Contracts.Tabs.TabGroupManagerOptions.TabGroupGuid"/></param>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.TabGroupManagerOptions.Clone">
            <summary>
            Clones this instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Tabs.TabGroupSelectedEventArgs">
            <summary>
            Tab group selected event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.TabGroupSelectedEventArgs.Selected">
            <summary>
            Selected tab group or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.TabGroupSelectedEventArgs.Unselected">
            <summary>
            Unselected tab group or null
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.TabGroupSelectedEventArgs.#ctor(dnSpy.Contracts.Tabs.ITabGroup,dnSpy.Contracts.Tabs.ITabGroup)">
            <summary>
            Constructor
            </summary>
            <param name="selected">Selected tab group or null</param>
            <param name="unselected">Unselected tab group or null</param>
        </member>
        <member name="T:dnSpy.Contracts.Tabs.TabSelectedEventArgs">
            <summary>
            Tab selected event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.TabSelectedEventArgs.TabGroup">
            <summary>
            Tab group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.TabSelectedEventArgs.Selected">
            <summary>
            Selected tab content or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.TabSelectedEventArgs.Unselected">
            <summary>
            Unselected tab content or null
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.TabSelectedEventArgs.#ctor(dnSpy.Contracts.Tabs.ITabGroup,dnSpy.Contracts.Tabs.ITabContent,dnSpy.Contracts.Tabs.ITabContent)">
            <summary>
            Constructor
            </summary>
            <param name="tabGroup">Tab group</param>
            <param name="selected">Selected content or null</param>
            <param name="unselected">Unselected content or null</param>
        </member>
        <member name="T:dnSpy.Contracts.TextEditor.IReplCommandHandler">
            <summary>
            Gets notified by a <see cref="T:dnSpy.Contracts.TextEditor.IReplEditor"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TextEditor.IReplCommandHandler.IsCommand(System.String)">
            <summary>
            Called by <see cref="T:dnSpy.Contracts.TextEditor.IReplEditor"/> after enter has been pressed. Returns true if
            <paramref name="input"/> is a command. If false is returned, the user can enter more
            text.
            </summary>
            <param name="input">Current user input</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.TextEditor.IReplCommandHandler.ExecuteCommand(System.String)">
            <summary>
            Called after <see cref="M:dnSpy.Contracts.TextEditor.IReplCommandHandler.IsCommand(System.String)"/> has returned true
            </summary>
            <param name="input">User input</param>
        </member>
        <member name="T:dnSpy.Contracts.TextEditor.IReplEditor">
            <summary>
            A REPL (Read, Eval, Print, Loop) editor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TextEditor.IReplEditor.CanClear">
            <summary>
            true if <see cref="M:dnSpy.Contracts.TextEditor.IReplEditor.Clear"/> can be called
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TextEditor.IReplEditor.Clear">
            <summary>
            Clears the screen
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TextEditor.IReplEditor.CanSelectPreviousCommand">
            <summary>
            true if <see cref="M:dnSpy.Contracts.TextEditor.IReplEditor.SelectPreviousCommand"/> can be called
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TextEditor.IReplEditor.SelectPreviousCommand">
            <summary>
            Selects the previous command
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TextEditor.IReplEditor.CanSelectNextCommand">
            <summary>
            true if <see cref="M:dnSpy.Contracts.TextEditor.IReplEditor.SelectNextCommand"/> can be called
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TextEditor.IReplEditor.SelectNextCommand">
            <summary>
            Selects the next command
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TextEditor.IReplEditor.OutputPrint(System.String)">
            <summary>
            Adds script output. This method can be called from any thread
            </summary>
            <param name="text">Text</param>
        </member>
        <member name="M:dnSpy.Contracts.TextEditor.IReplEditor.OutputPrintLine(System.String)">
            <summary>
            Adds script output and a new line. This method can be called from any thread
            </summary>
            <param name="text">Text</param>
        </member>
        <member name="P:dnSpy.Contracts.TextEditor.IReplEditor.CommandHandler">
            <summary>
            Gets notified by this instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TextEditor.IReplEditor.OnCommandExecuted">
            <summary>
            Called by <see cref="P:dnSpy.Contracts.TextEditor.IReplEditor.CommandHandler"/> after the command has finished executing
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TextEditor.IReplEditor.Reset">
            <summary>
            Resets the state to original executing state, but doesn't reset history or clears the screen
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.TextEditor.IReplEditorCreator">
            <summary>
            Creates REPL (Read, Eval, Print, Loop) text editors
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TextEditor.IReplEditorCreator.Create(dnSpy.Contracts.TextEditor.ReplEditorOptions)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.TextEditor.IReplEditorUI"/> instance
            </summary>
            <param name="options">Options or null</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.TextEditor.IReplEditorUI">
            <summary>
            A REPL (Read, Eval, Print, Loop) editor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TextEditor.IReplEditorUI.UIObject">
            <summary>
            UI object
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TextEditor.IReplEditorUI.FocusedElement">
            <summary>
            Focused element
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TextEditor.IReplEditorUI.ScaleElement">
            <summary>
            Gets the element that gets the <see cref="T:System.Windows.Media.ScaleTransform"/> or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TextEditor.IReplEditorUI.Tag">
            <summary>
            Can be set to any value by the user
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.TextEditor.ITextEditorSettings">
            <summary>
            Settings used by all text editors
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TextEditor.ITextEditorSettings.FontFamily">
            <summary>
            Font family
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TextEditor.ITextEditorSettings.FontSize">
            <summary>
            Font size
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TextEditor.ITextEditorSettings.ShowLineNumbers">
            <summary>
            true if line numbers should be shown
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TextEditor.ITextEditorSettings.AutoHighlightRefs">
            <summary>
            true if references are highlighted
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TextEditor.ITextEditorSettings.HighlightCurrentLine">
            <summary>
            true if current line should be highlighted
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TextEditor.ITextEditorSettings.WordWrap">
            <summary>
            true if word wrapping is enabled
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.TextEditor.ReplEditorOptions">
            <summary>
            <see cref="T:dnSpy.Contracts.TextEditor.IReplEditor"/> options
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.TextEditor.ReplEditorOptions.DEFAULT_PROMPT_TEXT">
            <summary>
            Default <see cref="P:dnSpy.Contracts.TextEditor.ReplEditorOptions.PromptText"/> value
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.TextEditor.ReplEditorOptions.DEFAULT_CONTINUE_TEXT">
            <summary>
            Default <see cref="P:dnSpy.Contracts.TextEditor.ReplEditorOptions.ContinueText"/> value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TextEditor.ReplEditorOptions.PromptText">
            <summary>
            Prompt, default is <see cref="F:dnSpy.Contracts.TextEditor.ReplEditorOptions.DEFAULT_PROMPT_TEXT"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TextEditor.ReplEditorOptions.ContinueText">
            <summary>
            Continue text, default is <see cref="F:dnSpy.Contracts.TextEditor.ReplEditorOptions.DEFAULT_CONTINUE_TEXT"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TextEditor.ReplEditorOptions.TextEditorCommandGuid">
            <summary>
            Command guid of text editor or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TextEditor.ReplEditorOptions.TextAreaCommandGuid">
            <summary>
            Command guid of text area or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TextEditor.ReplEditorOptions.MenuGuid">
            <summary>
            Guid of context menu or null
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TextEditor.ReplEditorOptions.Clone">
            <summary>
            Clones this
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.TextEditor.TextEditorLocation">
            <summary>
            Text editor location
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.TextEditor.TextEditorLocation.Line">
            <summary>
            Line
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.TextEditor.TextEditorLocation.Column">
            <summary>
            Column
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TextEditor.TextEditorLocation.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="line">Line</param>
            <param name="column">Column</param>
        </member>
        <member name="T:dnSpy.Contracts.Themes.ColorType">
            <summary>
            Color type
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Themes.ITheme">
            <summary>
            A theme
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Themes.ITheme.Guid">
            <summary>Guid</summary>
        </member>
        <member name="P:dnSpy.Contracts.Themes.ITheme.Name">
            <summary>Name or an empty string</summary>
        </member>
        <member name="P:dnSpy.Contracts.Themes.ITheme.MenuName">
            <summary>Name of theme that can be used in a MenuItem</summary>
        </member>
        <member name="P:dnSpy.Contracts.Themes.ITheme.IsHighContrast">
            <summary>true if this is a high-contrast theme</summary>
        </member>
        <member name="P:dnSpy.Contracts.Themes.ITheme.Order">
            <summary>Theme order. Can be used by a UI class to sort the themes before showing them
            to the user</summary>
        </member>
        <member name="M:dnSpy.Contracts.Themes.ITheme.GetColor(dnSpy.Contracts.Themes.ColorType)">
            <summary>
            Gets the inherited color
            </summary>
            <param name="colorType">Color</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Themes.ITheme.GetTextColor(dnSpy.Contracts.Themes.ColorType)">
            <summary>
            Gets the inherited color that can be used by a text editor (default colors are null)
            </summary>
            <param name="colorType">Color</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Themes.IThemeColor">
            <summary>
            Theme color
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Themes.IThemeColor.Name">
            <summary>
            Name of color
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Themes.IThemeColor.FontWeight">
            <summary>
            Font weight or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Themes.IThemeColor.FontStyle">
            <summary>
            Font style or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Themes.IThemeColor.Foreground">
            <summary>
            Foreground (first) color or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Themes.IThemeColor.Background">
            <summary>
            Background (second) color null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Themes.IThemeColor.Color3">
            <summary>
            Third color or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Themes.IThemeColor.Color4">
            <summary>
            Fourth color or null
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Themes.IThemeManager">
            <summary>
            Manages all <see cref="T:dnSpy.Contracts.Themes.ITheme"/>s
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Themes.IThemeManager.Theme">
            <summary>
            Gets the current theme
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Themes.IThemeManager.ThemeChanged">
            <summary>
            Notified when <see cref="P:dnSpy.Contracts.Themes.IThemeManager.Theme"/> gets changed
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Themes.IThemeManager.EarlyThemeChanged">
            <summary>
            Notified when <see cref="P:dnSpy.Contracts.Themes.IThemeManager.Theme"/> gets changed. Gets notified before <see cref="E:dnSpy.Contracts.Themes.IThemeManager.ThemeChanged"/>
            and should normally not be used (it's currently only used by <see cref="T:dnSpy.Contracts.Images.IImageManager"/>)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Themes.ThemeChangedEventArgs">
            <summary>
            Theme changed event args
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Themes.ThemeConstants">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Themes.ThemeConstants.THEME_HIGHCONTRAST_GUID">
            <summary>
            High contrast theme guid
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Themes.ThemeConstants.THEME_BLUE_GUID">
            <summary>
            Blue theme guid
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Themes.ThemeConstants.THEME_DARK_GUID">
            <summary>
            Dark theme guid
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Themes.ThemeConstants.THEME_LIGHT_GUID">
            <summary>
            Light theme guid
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.ExportToolBarButtonAttribute">
            <summary>
            Exports a toolbar button (<see cref="T:dnSpy.Contracts.ToolBars.IToolBarButton"/>)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.ExportToolBarButtonAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.ExportToolBarButtonAttribute.Header">
            <summary>
            (Optional) toolbar button header property value. If not set, you can implement
            <see cref="T:dnSpy.Contracts.ToolBars.IToolBarButton2"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.ExportToolBarButtonAttribute.Icon">
            <summary>
            (Optional) icon name. If not set, you must implement <see cref="T:dnSpy.Contracts.ToolBars.IToolBarButton2"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.ExportToolBarButtonAttribute.ToolTip">
            <summary>
            (Optional) tooltip. If not set, you can implement <see cref="T:dnSpy.Contracts.ToolBars.IToolBarButton2"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.ExportToolBarButtonAttribute.IsToggleButton">
            <summary>
            true if it's a toggle button. If true, you must implement <see cref="T:dnSpy.Contracts.ToolBars.IToolBarToggleButton"/>.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.ExportToolBarItemAttribute">
            <summary>
            ToolBar export attribute base class
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.ExportToolBarItemAttribute.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="contractType">Contract type</param>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.ExportToolBarItemAttribute.OwnerGuid">
            <summary>
            Guid of owner toolbar or null to use <see cref="F:dnSpy.Contracts.ToolBars.ToolBarConstants.APP_TB_GUID"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.ExportToolBarItemAttribute.Group">
            <summary>
            Group name, must be of the format "order,name" where order is a decimal number and the
            order of the group in this toolbar.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.ExportToolBarItemAttribute.Order">
            <summary>
            Order within the toolbar group (<see cref="P:dnSpy.Contracts.ToolBars.ExportToolBarItemAttribute.Group"/>)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.ExportToolBarObjectAttribute">
            <summary>
            Exports a toolbar object (<see cref="T:dnSpy.Contracts.ToolBars.IToolBarObject"/>)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.ExportToolBarObjectAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.IToolBarButton">
            <summary>
            A button in the toolbar
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.IToolBarButton.IsEnabled(dnSpy.Contracts.ToolBars.IToolBarItemContext)">
            <summary>
            Returns true if the toolbar item is enabled and its <see cref="M:dnSpy.Contracts.ToolBars.IToolBarButton.Execute(dnSpy.Contracts.ToolBars.IToolBarItemContext)"/>
            method can be called.
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.IToolBarButton.Execute(dnSpy.Contracts.ToolBars.IToolBarItemContext)">
            <summary>
            Executes the command
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.IToolBarButton2">
            <summary>
            Extends <see cref="T:dnSpy.Contracts.ToolBars.IToolBarButton"/> with some extra methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.IToolBarButton2.GetHeader(dnSpy.Contracts.ToolBars.IToolBarItemContext)">
            <summary>
            Gets the header or null to use the header from the attribute
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.IToolBarButton2.GetIcon(dnSpy.Contracts.ToolBars.IToolBarItemContext)">
            <summary>
            Gets the icon name or null to use the icon from the attribute
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.IToolBarButton2.GetToolTip(dnSpy.Contracts.ToolBars.IToolBarItemContext)">
            <summary>
            Gets the tooltip or null to use the tooltip from the attribute
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.IToolBarButtonMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.IToolBarButtonMetadata.Header">
            <summary>See <see cref="P:dnSpy.Contracts.ToolBars.ExportToolBarButtonAttribute.Header"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.IToolBarButtonMetadata.Icon">
            <summary>See <see cref="P:dnSpy.Contracts.ToolBars.ExportToolBarButtonAttribute.Icon"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.IToolBarButtonMetadata.ToolTip">
            <summary>See <see cref="P:dnSpy.Contracts.ToolBars.ExportToolBarButtonAttribute.ToolTip"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.IToolBarButtonMetadata.IsToggleButton">
            <summary>See <see cref="P:dnSpy.Contracts.ToolBars.ExportToolBarButtonAttribute.IsToggleButton"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.IToolBarItem">
            <summary>
            A ToolBar item command
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.IToolBarItem.IsVisible(dnSpy.Contracts.ToolBars.IToolBarItemContext)">
            <summary>
            Returns true if the toolbar item is visible in the toolbar
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.IToolBarItemContext">
            <summary>
            <see cref="T:dnSpy.Contracts.ToolBars.IToolBarItem"/> context
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.IToolBarItemContext.ToolBarGuid">
            <summary>
            Gets the guid of the toolbar, eg. <see cref="F:dnSpy.Contracts.ToolBars.ToolBarConstants.APP_TB_GUID"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.IToolBarItemMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.IToolBarItemMetadata.OwnerGuid">
            <summary>See <see cref="P:dnSpy.Contracts.ToolBars.ExportToolBarItemAttribute.OwnerGuid"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.IToolBarItemMetadata.Group">
            <summary>See <see cref="P:dnSpy.Contracts.ToolBars.ExportToolBarItemAttribute.Group"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.IToolBarItemMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.ToolBars.ExportToolBarItemAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.IToolBarManager">
            <summary>
            ToolBar manager
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.IToolBarManager.InitializeToolBar(System.Windows.Controls.ToolBar,System.Guid,System.Windows.IInputElement)">
            <summary>
            Creates a <see cref="T:System.Windows.Controls.ToolBar"/>
            </summary>
            <param name="toolBar">The toolbar to initialize or null to create a new one and initialize it</param>
            <param name="toolBarGuid">Guid of toolbar, eg. <see cref="F:dnSpy.Contracts.ToolBars.ToolBarConstants.APP_TB_GUID"/></param>
            <param name="commandTarget">Command target for toolbar items, eg. the owner window, or null</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.IToolBarObject">
            <summary>
            A toolbar object
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.IToolBarObject.GetUIObject(dnSpy.Contracts.ToolBars.IToolBarItemContext,System.Windows.IInputElement)">
            <summary>
            Gets the UI object to place in the <see cref="T:System.Windows.Controls.ToolBar"/>
            </summary>
            <param name="context">Context</param>
            <param name="commandTarget">Command target for toolbar items, eg. the owner window, or null</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.IToolBarObjectMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.IToolBarToggleButton">
            <summary>
            Implement this interface if <see cref="P:dnSpy.Contracts.ToolBars.ExportToolBarButtonAttribute.IsToggleButton"/> is true
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.IToolBarToggleButton.GetBinding(dnSpy.Contracts.ToolBars.IToolBarItemContext)">
            <summary>
            Gets the binding
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.ToolBarConstants">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolBars.ToolBarConstants.APP_TB_GUID">
            <summary>Guid of app toolbar</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolBars.ToolBarConstants.GROUP_APP_TB_MAIN_MENU">
            <summary>Group: App ToolBar: Main, Group: Menu</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolBars.ToolBarConstants.GROUP_APP_TB_MAIN_NAVIGATION">
            <summary>Group: App ToolBar: Main, Group: Back/Forward</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolBars.ToolBarConstants.GROUP_APP_TB_MAIN_OPEN">
            <summary>Group: App ToolBar: Main, Group: Open</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolBars.ToolBarConstants.GROUP_APP_TB_MAIN_LANGUAGE">
            <summary>Group: App ToolBar: Main, Group: Language</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolBars.ToolBarConstants.GROUP_APP_TB_MAIN_ASMED_UNDO">
            <summary>Group: App ToolBar: Main, Group: AsmEditor Undo/Redo</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolBars.ToolBarConstants.GROUP_APP_TB_MAIN_DEBUG">
            <summary>Group: App ToolBar: Main, Group: Debug</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolBars.ToolBarConstants.GROUP_APP_TB_MAIN_DEBUG_CONTINUE">
            <summary>Group: App ToolBar: Main, Group: Debug / Continue</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolBars.ToolBarConstants.GROUP_APP_TB_MAIN_DEBUG_STEP">
            <summary>Group: App ToolBar: Main, Group: Debug / Step</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolBars.ToolBarConstants.GROUP_APP_TB_MAIN_SEARCH">
            <summary>Group: App ToolBar: Main, Group: Search</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolBars.ToolBarConstants.GROUP_APP_TB_MAIN_FULLSCREEN">
            <summary>Group: App ToolBar: Main, Group: Full Screen</summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.App.AppToolWindowConstants">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowConstants.DEFAULT_CONTENT_ORDER_LEFT_FILES">
            <summary>Order of files tool window</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowConstants.DEFAULT_CONTENT_ORDER_BOTTOM_ANALYZER">
            <summary>Order of analyzer tool window</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowConstants.DEFAULT_CONTENT_ORDER_BOTTOM_DEBUGGER_LOCALS">
            <summary>Order of debugger locals window</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowConstants.DEFAULT_CONTENT_ORDER_BOTTOM_DEBUGGER_BREAKPOINTS">
            <summary>Order of debugger breakpoints tool window</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowConstants.DEFAULT_CONTENT_ORDER_BOTTOM_DEBUGGER_CALLSTACK">
            <summary>Order of debugger call stack tool window</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowConstants.DEFAULT_CONTENT_ORDER_BOTTOM_DEBUGGER_THREADS">
            <summary>Order of debugger threads tool window</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowConstants.DEFAULT_CONTENT_ORDER_BOTTOM_DEBUGGER_EXCEPTIONS">
            <summary>Order of debugger exceptions tool window</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowConstants.DEFAULT_CONTENT_ORDER_BOTTOM_DEBUGGER_MODULES">
            <summary>Order of debugger modules tool window</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowConstants.DEFAULT_CONTENT_ORDER_BOTTOM_DEBUGGER_MEMORY">
            <summary>Order of debugger memory tool window</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowConstants.DEFAULT_CONTENT_ORDER_BOTTOM_SCRIPTING_CSHARP">
            <summary>Order of C# interactive window</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowConstants.DEFAULT_CONTENT_ORDER_BOTTOM_SCRIPTING_VISUAL_BASIC">
            <summary>Order of Visual Basic interactive window</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowConstants.DEFAULT_CONTENT_ORDER_TOP_SEARCH">
            <summary>Order of search tool window</summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation">
            <summary>
            Tool window location
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation.Left">
            <summary>Left</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation.Right">
            <summary>Right</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation.Top">
            <summary>Top</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation.Bottom">
            <summary>Bottom</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation.DefaultHorizontal">
            <summary>Default horizontal location, eg. <see cref="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation.Bottom"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation.Default">
            <summary>Default horizontal location, eg. <see cref="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation.Bottom"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation.DefaultVertical">
            <summary>Default vertical location, eg. <see cref="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation.Left"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.App.IMainToolWindowContentCreator">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.ToolWindows.IToolWindowContent"/> instances.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.App.IMainToolWindowContentCreator.GetOrCreate(System.Guid)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.ToolWindows.IToolWindowContent"/> instance or returns a cached instance if it's
            already been created. Returns null if someone else should create it.
            </summary>
            <param name="guid">Guid, see <see cref="P:dnSpy.Contracts.ToolWindows.IToolWindowContent.Guid"/></param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.App.IMainToolWindowContentCreator.ContentInfos">
            <summary>
            Gets the tool windows it can create
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.App.IMainToolWindowManager">
            <summary>
            Allows adding tool windows
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.App.IMainToolWindowManager.Show(dnSpy.Contracts.ToolWindows.IToolWindowContent,System.Nullable{dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation})">
            <summary>
            Adds <paramref name="content"/> to a tool window and gives it keyboard focus. If it's
            already been added, it becomes active and gets keyboard focus.
            </summary>
            <param name="content">Content</param>
            <param name="location">Location or null to use the default location
            (<see cref="F:dnSpy.Contracts.ToolWindows.App.ToolWindowContentInfo.Location"/>). It's ignored if the content is already
            present in the UI.</param>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.App.IMainToolWindowManager.Show(System.Guid,System.Nullable{dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation})">
            <summary>
            Adds content to a tool window and gives it keyboard focus. If it's already been added,
            it becomes active and gets keyboard focus.
            </summary>
            <param name="guid">Guid of content, see <see cref="P:dnSpy.Contracts.ToolWindows.IToolWindowContent.Guid"/></param>
            <param name="location">Location or null to use the default location
            (<see cref="F:dnSpy.Contracts.ToolWindows.App.ToolWindowContentInfo.Location"/>). It's ignored if the content is already
            present in the UI.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.App.IMainToolWindowManager.Close(dnSpy.Contracts.ToolWindows.IToolWindowContent)">
            <summary>
            Removes <paramref name="content"/> from the UI
            </summary>
            <param name="content">Content</param>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.App.IMainToolWindowManager.Close(System.Guid)">
            <summary>
            Removes the tool window from the UI
            </summary>
            <param name="guid">Guid</param>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.App.IMainToolWindowManager.IsShown(dnSpy.Contracts.ToolWindows.IToolWindowContent)">
            <summary>
            Returns true if <paramref name="content"/> is shown in the UI
            </summary>
            <param name="content">Content</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.App.IMainToolWindowManager.IsShown(System.Guid)">
            <summary>
            Returns true if the content is shown in the UI
            </summary>
            <param name="guid">Guid of content, see <see cref="P:dnSpy.Contracts.ToolWindows.IToolWindowContent.Guid"/></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.App.IMainToolWindowManager.Owns(dnSpy.Contracts.ToolWindows.IToolWindowGroup)">
            <summary>
            Returns true if it owns <paramref name="toolWindowGroup"/>
            </summary>
            <param name="toolWindowGroup">Group</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.App.IMainToolWindowManager.CanMove(dnSpy.Contracts.ToolWindows.IToolWindowContent,dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation)">
            <summary>
            Returns true if <see cref="M:dnSpy.Contracts.ToolWindows.App.IMainToolWindowManager.Move(dnSpy.Contracts.ToolWindows.IToolWindowContent,dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation)"/> can execute
            </summary>
            <param name="content">Content</param>
            <param name="location">Location</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.App.IMainToolWindowManager.Move(dnSpy.Contracts.ToolWindows.IToolWindowContent,dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation)">
            <summary>
            Moves <paramref name="content"/> to a new location
            </summary>
            <param name="content">Content</param>
            <param name="location">Location</param>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.App.IMainToolWindowManager.CanMove(dnSpy.Contracts.ToolWindows.IToolWindowGroup,dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation)">
            <summary>
            Returns true if <see cref="M:dnSpy.Contracts.ToolWindows.App.IMainToolWindowManager.Move(dnSpy.Contracts.ToolWindows.IToolWindowGroup,dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation)"/> can execute
            </summary>
            <param name="group">Group</param>
            <param name="location">Location</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.App.IMainToolWindowManager.Move(dnSpy.Contracts.ToolWindows.IToolWindowGroup,dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation)">
            <summary>
            Moves <paramref name="group"/> to a new location
            </summary>
            <param name="group">Group</param>
            <param name="location">Location</param>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.App.ToolWindowContentInfo">
            <summary>
            <see cref="T:dnSpy.Contracts.ToolWindows.IToolWindowContent"/> info
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.ToolWindowContentInfo.Guid">
            <summary>
            Guid of <see cref="T:dnSpy.Contracts.ToolWindows.IToolWindowContent"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.ToolWindowContentInfo.Location">
            <summary>
            Location
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.ToolWindowContentInfo.Order">
            <summary>
            Order, used if <see cref="F:dnSpy.Contracts.ToolWindows.App.ToolWindowContentInfo.IsDefault"/> is true
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.ToolWindowContentInfo.IsDefault">
            <summary>
            true if it's shown the first time dnSpy loads
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.App.ToolWindowContentInfo.#ctor(System.Guid,dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation,System.Double,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="guid">Guid</param>
            <param name="location">Location</param>
            <param name="order">Order</param>
            <param name="isDefault">true if default</param>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.IToolWindowContent">
            <summary>
            Tool window content
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowContent.Guid">
            <summary>
            Gets the guid of this content
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowContent.Title">
            <summary>
            Title. If this property can change, you must implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowContent.ToolTip">
            <summary>
            ToolTip or null. If this property can change, you must implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowContent.UIObject">
            <summary>
            The UI object. If this property can change, you must implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowContent.FocusedElement">
            <summary>
            Gets the element that should get focus when the tab is selected or null to use
            <see cref="P:dnSpy.Contracts.ToolWindows.IToolWindowContent.UIObject"/>. Implement <see cref="T:dnSpy.Contracts.Controls.IFocusable"/> to set focus yourself.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowContent.ScaleElement">
            <summary>
            Gets the element that gets the <see cref="T:System.Windows.Media.ScaleTransform"/> or null if none
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowContent.OnVisibilityChanged(dnSpy.Contracts.ToolWindows.ToolWindowContentVisibilityEvent)">
            <summary>
            Called when the visibility changes
            </summary>
            <param name="visEvent">Event</param>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.IToolWindowGroup">
            <summary>
            Tool window tab group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroup.ToolWindowGroupManager">
            <summary>
            Gets the owner <see cref="T:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroup.TabContents">
            <summary>
            Gets all <see cref="T:dnSpy.Contracts.ToolWindows.IToolWindowContent"/> instances
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroup.ActiveTabContent">
            <summary>
            Gets the active <see cref="T:dnSpy.Contracts.ToolWindows.IToolWindowContent"/> or null if <see cref="P:dnSpy.Contracts.ToolWindows.IToolWindowGroup.TabContents"/> is empty
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroup.Add(dnSpy.Contracts.ToolWindows.IToolWindowContent)">
            <summary>
            Adds the content
            </summary>
            <param name="content">Content</param>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroup.Close(dnSpy.Contracts.ToolWindows.IToolWindowContent)">
            <summary>
            Closes the content
            </summary>
            <param name="content">Content</param>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroup.MoveTo(dnSpy.Contracts.ToolWindows.IToolWindowGroup,dnSpy.Contracts.ToolWindows.IToolWindowContent)">
            <summary>
            Moves <paramref name="content"/> from this group to <paramref name="destGroup"/>
            </summary>
            <param name="destGroup">Destination group</param>
            <param name="content">Content in this group</param>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroup.SetFocus(dnSpy.Contracts.ToolWindows.IToolWindowContent)">
            <summary>
            Sets keyboard focus
            </summary>
            <param name="content">Content</param>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroup.CloseActiveTabCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroup.CloseActiveTab"/> can execute
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroup.CloseActiveTab">
            <summary>
            Closes the active tab
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager">
            <summary>
            Tool window group manager
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.TabGroups">
            <summary>
            Gets all <see cref="T:dnSpy.Contracts.ToolWindows.IToolWindowGroup"/> instances
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.ActiveTabGroup">
            <summary>
            Gets the active <see cref="T:dnSpy.Contracts.ToolWindows.IToolWindowGroup"/> or null if <see cref="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.TabGroups"/> is empty
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.IsHorizontal">
            <summary>
            true if the <see cref="T:dnSpy.Contracts.ToolWindows.IToolWindowGroup"/>s are lined up horizontally, else vertically
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.Create">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.ToolWindows.IToolWindowGroup"/> instance
            </summary>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.UIObject">
            <summary>
            Gets the UI object
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.TabSelectionChanged">
            <summary>
            Raised when a new tab has been selected
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.TabGroupSelectionChanged">
            <summary>
            Raised when a new tab group has been selected
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.TabGroupCollectionChanged">
            <summary>
            Raised when a tab group has been added or removed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.Close(dnSpy.Contracts.ToolWindows.IToolWindowGroup)">
            <summary>
            Closes the group
            </summary>
            <param name="group">Group</param>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.CloseAllTabsCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.CloseAllTabs"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.CloseAllTabs">
            <summary>
            Closes all tabs
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.NewHorizontalTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.NewHorizontalTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.NewHorizontalTabGroup">
            <summary>
            Moves the active tab to a new horizontal tab group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.NewVerticalTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.NewVerticalTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.NewVerticalTabGroup">
            <summary>
            Moves the active tab to a new vertical tab group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.MoveToNextTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.MoveToNextTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.MoveToNextTabGroup">
            <summary>
            Moves active tab to the next tab group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.MoveToPreviousTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.MoveToPreviousTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.MoveToPreviousTabGroup">
            <summary>
            Moves the active tab to the previous tab group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.MoveAllToNextTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.MoveAllToNextTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.MoveAllToNextTabGroup">
            <summary>
            Moves all tabs in the current tab group to the next tab group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.MoveAllToPreviousTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.MoveAllToPreviousTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.MoveAllToPreviousTabGroup">
            <summary>
            Moves all tabs in the current tab group to the previous tab group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.CloseTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.CloseTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.CloseTabGroup">
            <summary>
            Closes the tab group and all its tabs
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.CloseAllTabGroupsButThisCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.CloseAllTabGroupsButThis"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.CloseAllTabGroupsButThis">
            <summary>
            Closes all tab groups except the active one
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.MoveTabGroupAfterNextTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.MoveTabGroupAfterNextTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.MoveTabGroupAfterNextTabGroup">
            <summary>
            Moves the active tab group after the next one
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.MoveTabGroupBeforePreviousTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.MoveTabGroupBeforePreviousTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.MoveTabGroupBeforePreviousTabGroup">
            <summary>
            Moves the active tab group before the previous one
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.MergeAllTabGroupsCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.MergeAllTabGroups"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.MergeAllTabGroups">
            <summary>
            Moves all tabs to one tab group and closes the remaining (empty) tab groups
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.UseVerticalTabGroupsCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.UseVerticalTabGroups"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.UseVerticalTabGroups">
            <summary>
            Stacks all tab groups vertically
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.UseHorizontalTabGroupsCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.UseHorizontalTabGroups"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager.UseHorizontalTabGroups">
            <summary>
            Stacks all tab groups horizontally
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.IToolWindowManager">
            <summary>
            Tool window manager
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowManager.Create(dnSpy.Contracts.ToolWindows.ToolWindowGroupManagerOptions)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.ToolWindows.IToolWindowGroupManager"/> instance
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.IToolWindowManagerCreator">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.ToolWindows.IToolWindowManager"/> instances
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowManagerCreator.Create">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.ToolWindows.IToolWindowManager"/> instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.ToolWindowContentVisibilityEvent">
            <summary>
            Event type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.ToolWindowContentVisibilityEvent.Added">
            <summary>
            It's been added to the UI. It may or may not be visible.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.ToolWindowContentVisibilityEvent.Removed">
            <summary>
            It's been removed from the UI
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.ToolWindowContentVisibilityEvent.Visible">
            <summary>
            It's open and visible
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.ToolWindowContentVisibilityEvent.Hidden">
            <summary>
            It's open but hidden
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.ToolWindowContentVisibilityEvent.GotKeyboardFocus">
            <summary>
            The content got keyboard focus
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.ToolWindowContentVisibilityEvent.LostKeyboardFocus">
            <summary>
            The content lost keyboard focus
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.ToolWindowGroupCollectionChangedEventArgs">
            <summary>
            Collection changed event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.ToolWindowGroupCollectionChangedEventArgs.Added">
            <summary>
            true if <see cref="P:dnSpy.Contracts.ToolWindows.ToolWindowGroupCollectionChangedEventArgs.TabGroup"/> was added, false if it was removed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.ToolWindowGroupCollectionChangedEventArgs.TabGroup">
            <summary>
            The tab group
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.ToolWindowGroupCollectionChangedEventArgs.#ctor(System.Boolean,dnSpy.Contracts.ToolWindows.IToolWindowGroup)">
            <summary>
            Constructor
            </summary>
            <param name="added">true if it was added</param>
            <param name="tabGroup">Tab group</param>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.ToolWindowGroupManagerOptions">
            <summary>
            <see cref="T:dnSpy.Contracts.ToolWindows.IToolWindowManager"/> options
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.ToolWindowGroupManagerOptions.TabControlStyle">
            <summary>
            A style or a resource key or null to use the default style
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.ToolWindowGroupManagerOptions.TabItemStyle">
            <summary>
            A style or a resource key or null to use the default style
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.ToolWindowGroupManagerOptions.ToolWindowGroupGuid">
            <summary>
            Tool window group guid, eg. <see cref="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_TOOLWINDOW_TABCONTROL_GUID"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.ToolWindowGroupManagerOptions.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.ToolWindowGroupManagerOptions.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="groupGuid">See <see cref="F:dnSpy.Contracts.ToolWindows.ToolWindowGroupManagerOptions.ToolWindowGroupGuid"/></param>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.ToolWindowGroupManagerOptions.#ctor(System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="groupGuid">See <see cref="F:dnSpy.Contracts.ToolWindows.ToolWindowGroupManagerOptions.ToolWindowGroupGuid"/></param>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.ToolWindowGroupManagerOptions.Clone">
            <summary>
            Clones this instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.ToolWindowGroupSelectedEventArgs">
            <summary>
            Tab group selected event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.ToolWindowGroupSelectedEventArgs.Selected">
            <summary>
            Selected tab group or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.ToolWindowGroupSelectedEventArgs.Unselected">
            <summary>
            Unselected tab group or null
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.ToolWindowGroupSelectedEventArgs.#ctor(dnSpy.Contracts.ToolWindows.IToolWindowGroup,dnSpy.Contracts.ToolWindows.IToolWindowGroup)">
            <summary>
            Constructor
            </summary>
            <param name="selected">Selected tab group or null</param>
            <param name="unselected">Unselected tab group or null</param>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.ToolWindowSelectedEventArgs">
            <summary>
            Tab selected event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.ToolWindowSelectedEventArgs.TabGroup">
            <summary>
            Tab group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.ToolWindowSelectedEventArgs.Selected">
            <summary>
            Selected tab content or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.ToolWindowSelectedEventArgs.Unselected">
            <summary>
            Unselected tab content or null
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.ToolWindowSelectedEventArgs.#ctor(dnSpy.Contracts.ToolWindows.IToolWindowGroup,dnSpy.Contracts.ToolWindows.IToolWindowContent,dnSpy.Contracts.ToolWindows.IToolWindowContent)">
            <summary>
            Constructor
            </summary>
            <param name="tabGroup">Tab group</param>
            <param name="selected">Selected content or null</param>
            <param name="unselected">Unselected content or null</param>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.IMDTokenNode">
            <summary>
            Holds a reference with a token
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.IMDTokenNode.Reference">
            <summary>
            Gets the reference
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.ITreeNode">
            <summary>
            A tree node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNode.TreeView">
            <summary>
            Gets the treeview
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNode.Parent">
            <summary>
            Gets the parent or null if it is the root node or if it hasn't been inserted into the
            treeview yet.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNode.Children">
            <summary>
            Gets all children or an empty list if <see cref="P:dnSpy.Contracts.TreeView.ITreeNode.LazyLoading"/> is true. See also
            <see cref="M:dnSpy.Contracts.TreeView.ITreeNode.EnsureChildrenLoaded"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNode.DataChildren">
            <summary>
            Gets all <see cref="T:dnSpy.Contracts.TreeView.ITreeNodeData"/> children in <see cref="P:dnSpy.Contracts.TreeView.ITreeNode.Children"/>. See also
            <see cref="M:dnSpy.Contracts.TreeView.ITreeNode.EnsureChildrenLoaded"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNode.Data">
            <summary>
            Tree node data
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNode.LazyLoading">
            <summary>
            Gets/sets lazy loading of children. When true, <see cref="M:dnSpy.Contracts.TreeView.ITreeNodeData.CreateChildren"/>
            will get called to load the children. Should only be used by <see cref="P:dnSpy.Contracts.TreeView.ITreeNode.Data"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNode.IsExpanded">
            <summary>
            true if it's expanded
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNode.IsHidden">
            <summary>
            true if it's hidden
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNode.IsVisible">
            <summary>
            true when this node is not hidden and all parent nodes are expanded and not hidden
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeNode.EnsureChildrenLoaded">
            <summary>
            Forces loading of <see cref="P:dnSpy.Contracts.TreeView.ITreeNode.Children"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeNode.AddChild(dnSpy.Contracts.TreeView.ITreeNode)">
            <summary>
            Adds a new node to <see cref="P:dnSpy.Contracts.TreeView.ITreeNode.Children"/>
            </summary>
            <param name="node">Node to insert</param>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeNode.Descendants">
            <summary>
            Gets all descendants
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeNode.DescendantsAndSelf">
            <summary>
            Gets all descendants including itself
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeNode.RefreshUI">
            <summary>
            Refreshes the UI
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.ITreeNodeData">
            <summary>
            User data stored in a <see cref="T:dnSpy.Contracts.TreeView.ITreeNode"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNodeData.Guid">
            <summary>
            Guid of this data
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNodeData.TreeNodeGroup">
            <summary>
            Group or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNodeData.Text">
            <summary>
            Gets the data shown in the UI
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNodeData.ToolTip">
            <summary>
            Gets the data shown in a tooltip
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNodeData.Icon">
            <summary>
            Icon
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNodeData.ExpandedIcon">
            <summary>
            Expanded icon or null to use <see cref="P:dnSpy.Contracts.TreeView.ITreeNodeData.Icon"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNodeData.SingleClickExpandsChildren">
            <summary>
            true if single clicking on a node expands all its children
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeNodeData.ShowExpander(System.Boolean)">
            <summary>
            Returns true if the expander should be shown
            </summary>
            <param name="defaultValue">Default value</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNodeData.TreeNode">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.TreeView.ITreeNode"/> owner instance. Only the treeview may write to this
            property.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeNodeData.CreateChildren">
            <summary>
            Called when it's time to create its children
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeNodeData.Initialize">
            <summary>
            Called after <see cref="P:dnSpy.Contracts.TreeView.ITreeNodeData.TreeNode"/> has been set.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeNodeData.OnRefreshUI">
            <summary>
            Called by <see cref="M:dnSpy.Contracts.TreeView.ITreeNode.RefreshUI"/> before it invalidates all UI properties
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeNodeData.Activate">
            <summary>
            Called when the item gets activated, eg. double clicked. Returns true if it was handled,
            false otherwise.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeNodeData.OnEnsureChildrenLoaded">
            <summary>
            Called by <see cref="M:dnSpy.Contracts.TreeView.ITreeNode.EnsureChildrenLoaded"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeNodeData.OnChildrenChanged(dnSpy.Contracts.TreeView.ITreeNodeData[],dnSpy.Contracts.TreeView.ITreeNodeData[])">
            <summary>
            Called when the children has been changed
            </summary>
            <param name="added">Added nodes</param>
            <param name="removed">Removed nodes</param>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeNodeData.OnIsVisibleChanged">
            <summary>
            Called when <see cref="P:dnSpy.Contracts.TreeView.ITreeNode.IsVisible"/> has changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeNodeData.OnIsExpandedChanged(System.Boolean)">
            <summary>
            Called when <see cref="P:dnSpy.Contracts.TreeView.ITreeNode.IsExpanded"/> has changed
            </summary>
            <param name="isExpanded">Value of <see cref="P:dnSpy.Contracts.TreeView.ITreeNode.IsExpanded"/></param>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeNodeData.CanDrag(dnSpy.Contracts.TreeView.ITreeNodeData[])">
            <summary>
            Returns true if the nodes can be dragged
            </summary>
            <param name="nodes">Nodes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeNodeData.StartDrag(System.Windows.DependencyObject,dnSpy.Contracts.TreeView.ITreeNodeData[])">
            <summary>
            Starts the drag and drop operation
            </summary>
            <param name="dragSource">Drag source</param>
            <param name="nodes">Nodes</param>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeNodeData.Copy(dnSpy.Contracts.TreeView.ITreeNodeData[])">
            <summary>
            Copies nodes
            </summary>
            <param name="nodes">Nodes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeNodeData.CanDrop(System.Windows.DragEventArgs,System.Int32)">
            <summary>
            Returns true if drop can execute
            </summary>
            <param name="e">Event args</param>
            <param name="index">Index</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeNodeData.Drop(System.Windows.DragEventArgs,System.Int32)">
            <summary>
            Drops data
            </summary>
            <param name="e">Event args</param>
            <param name="index">Index</param>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.TreeNodeDataExtensionMethods">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TreeNodeDataExtensionMethods.Descendants(dnSpy.Contracts.TreeView.ITreeNodeData)">
            <summary>
            Gets all descendants
            </summary>
            <param name="self">This</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TreeNodeDataExtensionMethods.DescendantsAndSelf(dnSpy.Contracts.TreeView.ITreeNodeData)">
            <summary>
            Gets all descendants including itself
            </summary>
            <param name="self">This</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TreeNodeDataExtensionMethods.GetAncestorOrSelf``1(dnSpy.Contracts.TreeView.ITreeNodeData)">
            <summary>
            Gets the ancestor of a certain type
            </summary>
            <typeparam name="T">Desired type</typeparam>
            <param name="self">This</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.ITreeNodeDataCreator">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.TreeView.ITreeNodeData"/>. Use <see cref="T:dnSpy.Contracts.TreeView.ExportTreeNodeDataCreatorAttribute"/> to
            export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeNodeDataCreator.Create(dnSpy.Contracts.TreeView.TreeNodeDataCreatorContext)">
            <summary>
            Creates new <see cref="T:dnSpy.Contracts.TreeView.ITreeNodeData"/>
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.ITreeNodeDataCreatorMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNodeDataCreatorMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.TreeView.ExportTreeNodeDataCreatorAttribute.Order"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNodeDataCreatorMetadata.Guid">
            <summary>See <see cref="P:dnSpy.Contracts.TreeView.ExportTreeNodeDataCreatorAttribute.Guid"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.ExportTreeNodeDataCreatorAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.TreeView.ITreeNodeDataCreator"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ExportTreeNodeDataCreatorAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ExportTreeNodeDataCreatorAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ExportTreeNodeDataCreatorAttribute.Guid">
            <summary>
            Guid of owner <see cref="T:dnSpy.Contracts.TreeView.ITreeNodeData"/> that will receive the new
            <see cref="T:dnSpy.Contracts.TreeView.ITreeNodeData"/> nodes
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.ITreeNodeGroup">
            <summary>
            Tree node group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNodeGroup.Order">
            <summary>
            Order of group relative to other groups
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.ITreeView">
            <summary>
            A treeview
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeView.Guid">
            <summary>
            Guid of this treeview
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeView.Root">
            <summary>
            Gets the invisible root node
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeView.Create(dnSpy.Contracts.TreeView.ITreeNodeData)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.TreeView.ITreeNode"/> instance that can be inserted into this, and only
            this, treeview.
            </summary>
            <param name="data">User data</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeView.UIObject">
            <summary>
            Gets the treeview UI object
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeView.SelectItems(System.Collections.Generic.IEnumerable{dnSpy.Contracts.TreeView.ITreeNodeData})">
            <summary>
            Select items
            </summary>
            <param name="items">Items to select</param>
        </member>
        <member name="E:dnSpy.Contracts.TreeView.ITreeView.SelectionChanged">
            <summary>
            Raised when selection has changed
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.TreeView.ITreeView.NodeRemoved">
            <summary>
            Raised when a node has been removed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeView.SelectedItem">
            <summary>
            Gets the selected node or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeView.SelectedItems">
            <summary>
            Gets all selected items
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeView.TopLevelSelection">
            <summary>
            Gets the selected items which don't have any of their ancestors selected
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeView.Focus">
            <summary>
            Focuses the treeview, possibly getting keyboard focus
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeView.RefreshAllNodes">
            <summary>
            Calls all nodes' <see cref="M:dnSpy.Contracts.TreeView.ITreeNode.RefreshUI"/> method
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeView.FromImplNode(System.Object)">
            <summary>
            Converts the selected item to a <see cref="T:dnSpy.Contracts.TreeView.ITreeNodeData"/>. Should rarely be called.
            </summary>
            <param name="selectedItem">Selected item</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeView.ToImplNode(dnSpy.Contracts.TreeView.ITreeNodeData)">
            <summary>
            Converts <paramref name="node"/> to the real tree node
            </summary>
            <param name="node">Node</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeView.CollapseUnusedNodes">
            <summary>
            Collapses all unselected nodes
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.ITreeViewListener">
            <summary>
            Gets notified by the <see cref="T:dnSpy.Contracts.TreeView.ITreeView"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeViewListener.OnEvent(dnSpy.Contracts.TreeView.ITreeView,dnSpy.Contracts.TreeView.TreeViewListenerEventArgs)">
            <summary>
            Called at various times
            </summary>
            <param name="treeView">Sender</param>
            <param name="e">Event args</param>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.ITreeViewManager">
            <summary>
            Treeview manager
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeViewManager.Create(System.Guid,dnSpy.Contracts.TreeView.TreeViewOptions)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.TreeView.ITreeView"/> instance
            </summary>
            <param name="guid">Guid of treeview</param>
            <param name="options">Treeview options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeViewManager.GetCreators(System.Guid)">
            <summary>
            Gets <see cref="T:dnSpy.Contracts.TreeView.ITreeNodeDataCreator"/>s
            </summary>
            <param name="guid">Guid of owner tree node (<see cref="P:dnSpy.Contracts.TreeView.ITreeView.Guid"/>)</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.TreeNodeDataCreatorContext">
            <summary>
            <see cref="T:dnSpy.Contracts.TreeView.ITreeNodeDataCreator"/> context
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeNodeDataCreatorContext.Owner">
            <summary>
            Owner of new <see cref="T:dnSpy.Contracts.TreeView.ITreeNodeData"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TreeNodeDataCreatorContext.#ctor(dnSpy.Contracts.TreeView.ITreeNode)">
            <summary>
            Constructor
            </summary>
            <param name="owner">Owner</param>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.TreeViewListenerEvent">
            <summary>
            <see cref="T:dnSpy.Contracts.TreeView.ITreeViewListener"/> event
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.TreeView.TreeViewListenerEvent.NodeCreated">
            <summary>
            A new node was created. <see cref="P:dnSpy.Contracts.TreeView.TreeViewListenerEventArgs.Argument"/> is a <see cref="T:dnSpy.Contracts.TreeView.ITreeNode"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.TreeViewListenerEventArgs">
            <summary>
            <see cref="T:dnSpy.Contracts.TreeView.ITreeViewListener"/> event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeViewListenerEventArgs.Event">
            <summary>
            Event type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeViewListenerEventArgs.Argument">
            <summary>
            Argument, see <see cref="T:dnSpy.Contracts.TreeView.TreeViewListenerEvent"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TreeViewListenerEventArgs.#ctor(dnSpy.Contracts.TreeView.TreeViewListenerEvent,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="event">Event</param>
            <param name="arg">Argument</param>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.TreeViewOptions">
            <summary>
            Treeview options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeViewOptions.CanDragAndDrop">
            <summary>
            true if drag and drop is possible
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeViewOptions.AllowDrop">
            <summary>
            See <see cref="P:System.Windows.UIElement.AllowDrop"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeViewOptions.IsVirtualizing">
            <summary>
            See <see cref="F:System.Windows.Controls.VirtualizingStackPanel.IsVirtualizingProperty"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeViewOptions.VirtualizationMode">
            <summary>
            See <see cref="F:System.Windows.Controls.VirtualizingStackPanel.VirtualizationModeProperty"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeViewOptions.SelectionMode">
            <summary>
            See <see cref="P:System.Windows.Controls.ListBox.SelectionMode"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeViewOptions.IsGridView">
            <summary>
            true if it's a grid view
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeViewOptions.TreeViewListener">
            <summary>
            <see cref="T:dnSpy.Contracts.TreeView.ITreeView"/> listener
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeViewOptions.RootNode">
            <summary>
            The root node or null
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TreeViewOptions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.TVConstants">
            <summary>
            Treeview constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.TreeView.TVConstants.FILE_TREEVIEW_GUID">
            <summary>Guid of file treeview</summary>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.TVNodeRemovedEventArgs">
            <summary>
            Node removed event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TVNodeRemovedEventArgs.Node">
            <summary>
            The node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TVNodeRemovedEventArgs.Removed">
            <summary>
            true if <see cref="P:dnSpy.Contracts.TreeView.TVNodeRemovedEventArgs.Node"/> was removed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TVNodeRemovedEventArgs.#ctor(dnSpy.Contracts.TreeView.ITreeNodeData,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="node">Node</param>
            <param name="removed">true if it was removed</param>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.TVSelectionChangedEventArgs">
            <summary>
            Selection changed event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TVSelectionChangedEventArgs.Added">
            <summary>
            Added nodes
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TVSelectionChangedEventArgs.Removed">
            <summary>
            Removed nodes
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TVSelectionChangedEventArgs.#ctor(dnSpy.Contracts.TreeView.ITreeNodeData[],dnSpy.Contracts.TreeView.ITreeNodeData[])">
            <summary>
            Constructor
            </summary>
            <param name="added">Added nodes or null</param>
            <param name="removed">Removed nodes or null</param>
        </member>
    </members>
</doc>
